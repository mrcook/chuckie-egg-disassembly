; SkoolKit disassembly for Chuckie Egg
; (https://github.com/mrcook/chuckie-egg-disassembly/)
;
; Copyright (c) 2018 Michael R. Cook (this disassembly)
; Copyright (c) 1984 A&F Software (Chuckie Egg)
; Chuckie Egg was designed and developed by Nigel Alderton
@start=$5ef3

@org=$5ef3
; NOTE: this is a hack to get the game assembling. It is actually part of the
; tape loader routine, which includes some nice set up code to make the game
; assemble out-of-the-box.
c$5ef3 ld a,$07      ;
 $5ef5 ld ($5c48),a  ; Set border (SYSVAR_BORDCR) to $07 (white)
@ssub=jp $5fb8       ; NOTE: Replace following opcode
 $5ef8 ld hl,$5aff   ;

; Ignore the rest of the tape loader code/data.
s$5efb defs $bd

; Tape loader "start" routine.
c$5fb8 ld hl,$5dc0   ;
 $5fbb ld ($5c63),hl ; Set SYSVAR_STKBOT variable
 $5fbe ld ($5c65),hl ; Set SYSVAR_STKEND variable
 $5fc1 jp $a410      ; Start the game!

; Ignore the rest of the tape loader code/data.
s$5fc4 defs $01e4

; Level Buffer (empty level)
;
; Screen map data is copied to this buffer at the start of each new level. Each
; byte represents a tile ID, with 20 tile GFX in total.
; #TABLE(default,centre,:w)
; { =h Byte | =h Tile }
; { 00 | Blank Tile }
; { 01 | Ladder #1 (left) }
; { 02 | Ladder #2 (right) }
; { 03 | Egg }
; { 04 | Corn }
; { 05 | Floor }
; { A8 | Birdcage: handle #1 }
; { A9 | Birdcage: handle #2 }
; { AA | Birdcage: #01 (top) }
; { AB | Birdcage: #02 (top) }
; { AC | Birdcage: #03 (top) }
; { AD | Birdcage: #04 (top) }
; { AE | Birdcage: #05 (middle) }
; { AF | Birdcage: #06 (middle) }
; { B0 | Birdcage: #07 (middle) }
; { B1 | Birdcage: #08 (middle) }
; { B2 | Birdcage: #09 (bottom) }
; { B3 | Birdcage: #10 (bottom) }
; { B4 | Birdcage: #11 (bottom) }
; { B5 | Birdcage: #12 (bottom) }
; TABLE#
@label=level_buffer
s$61a8 defs $02a0

; This area is unused for gameplay, although it was used during game loading.
s$6448 defs $0a80

; Current player score.
;
; Each byte represents one decimal digit of the 6 digit score.
@label=current_score
s$6ec8 defs $06

; Saved score for player 1.
@label=score_p1
s$6ece defs $06

; Saved score for player 2.
@label=score_p2
s$6ed4 defs $06

; Saved score for player 3.
@label=score_p3
s$6eda defs $06

; Saved score for player 4.
@label=score_p4
s$6ee0 defs $06

; Current player cleared eggs counter
;
; Copied from the current player variable on level start, saved to the player
; variable on dying.
@label=cleared_eggs
b$6ee6 defb $00

; Save cleared eggs count for player 1.
@label=egg_count_p1
b$6ee7 defb $00

; Save cleared eggs count for player 2.
@label=egg_count_p2
b$6ee8 defb $00

; Save cleared eggs count for player 3.
@label=egg_count_p3
b$6ee9 defb $00

; Save cleared eggs count for player 4.
@label=egg_count_p4
b$6eea defb $00

; Current player cleared levels counter
;
; Copied from the current player variable on level start, saved to the player
; variable on dying.
@label=cleared_levels
b$6eeb defb $00

; Save levels cleared count for player 1.
@label=level_count_p1
b$6eec defb $00

; Save levels cleared count for player 2.
@label=level_count_p2
b$6eed defb $00

; Save levels cleared count for player 3.
@label=level_count_p3
b$6eee defb $00

; Save levels cleared count for player 4.
@label=level_count_p4
b$6eef defb $00

; Remaining lives for player 1.
@label=lives_p1
b$6ef0 defb $00

; Remaining lives for player 2.
@label=lives_p2
b$6ef1 defb $00

; Remaining lives for player 3.
@label=lives_p3
b$6ef2 defb $00

; Remaining lives for player 4.
@label=lives_p4
b$6ef3 defb $00

; Unused.
s$6ef4 defs $03ac

; Sprite buffer.
@label=sprite_buffer
s$72a0 defs $38

; X position of the Farmer.
@label=farmer_pos_x
b$72d8 defb $00

; Y position of the Farmer.
@label=farmer_pos_y
b$72d9 defb $00

; Animation frame counter.
;
; Frame values are from 0 to 3
@label=anim_frame
b$72da defb $00

; Direction the Farmer is facing.
;
; #TABLE(default,centre,:w)
; { =h Byte | =h Direction }
; { 00 | Right }
; { 04 | Left }
; { 0D | Forward (Climbing) }
; TABLE#
@label=farmer_direction
b$72db defb $00

; Unknown variable.
b$72dc defb $00

; Sprite/background composition buffer
;
; Current background tiles are loaded then the sprite data is merged.
@label=screen_buffer
s$72dd defs $48

; Farmer is airbourne?
;
; Values: $00=grounded, $02=airbourne.
@label=farmer_airbourne
b$7325 defb $00

; Farmer jumping direction.
;
; #TABLE(default,centre,:w)
; { =h Byte | =h Direction }
; { 00 | Straight up }
; { 01 | Right }
; { FF | Left }
; TABLE#
@label=farmer_jump_dir
b$7326 defb $00

; Variable related to the Farmer jumping.
b$7327 defb $00

; Variable related to the Farmer jumping.
b$7328 defb $00

; Unused?
b$7329 defb $00

; Direction Farmer is travelling while airbourne.
;
; Values: $01=up, $FF=down.
@label=farmer_air_dir
b$732a defb $00

; Unknown counter variable, but seems related to the ticker text at bottom of
; screen.
;
; Counts $08 to $01, and loops.
b$732b defb $00

; Unknown counter variable.
b$732c defb $00

; Menu screen ID.
;
; ID changes depending on what screen should be displayed, except when on the
; Instructions screen where the values relate to the selected input type menu.
; #TABLE(default,centre,:w)
; { =h Byte | =h state }
; { 03 | Redefine keys }
; { 05 | Select input type }
; { 06 | Intro music }
; { 0A | Instructions: Input type 1=$06, 2=$05, 3=$03 }
; TABLE#
@label=game_state
b$732d defb $00

; Keyboard address for: UP key
@label=key_up
w$732e defw $0000

; Keyboard address for: DOWN key
@label=key_down
w$7330 defw $0000

; Keyboard address for: LEFT key
@label=key_left
w$7332 defw $0000

; Keyboard address for: RIGHT key
@label=key_right
w$7334 defw $0000

; Keyboard address for: JUMP key
@label=key_jump
w$7336 defw $0000

; Keyboard address for: Alternative JUMP key
@label=key_jump_2
w$7338 defw $0000

; Total number of players for the current game?
;
; Possible values are 1, 2, 3, and 4.
@label=number_of_players
b$733a defb $00

; Current active player.
;
; Possible values are 1, 2, 3, and 4.
@label=current_player
b$733b defb $00

; Unknown variable the flips between 1 and 2.
b$733c defb $00

; Screen address of a 6-digit score for the active player.
;
; Position is calculated from the left with the following tile LSB values:
; P1=$05, P2=$0C, P3=$13, P4=$1A. Note: the MSB is always $40.
w$733d defw $0000

; Bonus: 3 decimal digits.
;
; This counts down in 10's, so the 4th digit isn't needed.
@label=bonus_timer
b$733f defb $00,$00,$00

; Time: 3 decimal digits.
@label=main_timer
b$7342 defb $00,$00,$00

; Timer sub-counter.
;
; The clock ticks about 20 times per second, and this counter ticks 10 times
; per clock tick - this info needs clarifying!
@label=main_sub_timer
b$7345 defb $00

; Bonus clock sub-counter.
;
; The bonus ticks about 7 times per second, and this counter ticks 64 times per
; clock tick - this info needs clarifying!
@label=bonus_sub_timer
b$7346 defb $00

; Unknown variables: seemd to always be $01.
b$7347 defb $00

; Unknown variables: seemd to always be $08.
b$7348 defb $00

; Unknown variables: seemd to always be $98.
b$7349 defb $00

; Unknown variable. On level start, counts up from $00 to $05, then remains
; there for the rest of the level.
b$734a defb $00

; Unknown variable. On level start, counts down from $F to $FB, then remains
; there for the rest of the level.
b$734b defb $00

; Another counter: counting from $0C to $01.
b$734c defb $00

; Bit. Flips from 0 to 1 when the above counter restarts.
b$734d defb $00

; Unknown variable, seems to hold 0x0505 for the whole level.
w$734e defw $0000

; Unknown variable. Seems to hold $FF the whole level.
b$7350 defb $00

; Unknown variable.
b$7351 defb $00

; Unknown variable.
w$7352 defw $0000

; Unknown variable.
b$7354 defb $00

; Unknown variable.
b$7355 defb $00

; Unknown variable.
b$7356 defb $00

; Robot Hens.
;
; #TABLE(default,centre,:w)
; { =h Bytes(n) | =h Meaning }
; { 0 | X position }
; { 1 | Y position }
; { 2 | ? }
; { 3 | Always $00? }
; TABLE#
@label=robot_hen_1
b$7357 defb $00,$00,$00,$00
@label=robot_hen_2
 $735b defb $00,$00,$00,$00
@label=robot_hen_3
 $735f defb $00,$00,$00,$00
@label=robot_hen_4
 $7363 defb $00,$00,$00,$00
@label=robot_hen_5
 $7367 defb $00,$00,$00,$00

; Another counter: counts from $03 to $01, and loops.
b$736b defb $00

; Another counter: counts $00 to $FF, and loops.
w$736c defw $0000

; Unknown.
b$736e defb $00

; Music play state
;
; Strange that 00 means "play music" - probably need a more appropriate label.
; #TABLE(default,centre,:w)
; { =h Byte | =h state }
; { 00 | play }
; { 01 | stopped }
; TABLE#
@label=music_play_state
b$736f defb $00

; SFX Timer, when collecting eggs/corn.
@label=sfx_timer
b$7370 defb $00

; Unused?
b$7371 defb $00,$00

; State variable for lookup table routine #R$9CEB.
b$7373 defb $00

; Lookup table address saved here by #R$9CEB.
w$7374 defw $0000

; Unused.
s$7376 defs $0eda

; Keyboard Controls #1: 2, W, 9, 0, Z or M.
@label=key_input_type_1
w$8250 defw $f71d
 $8252 defw $fb1d
 $8254 defw $ef1d
 $8256 defw $ef1e
 $8258 defw $fe1d
 $825a defw $7f1b

; Keyboard Controls #2: Cursor Keys, 4 or S.
@label=key_input_type_2
w$825c defw $ef17
 $825e defw $ef0f
 $8260 defw $f70f
 $8262 defw $ef1b
 $8264 defw $f717
 $8266 defw $ef1d

; Keyboard Controls #3: Q, A, O, P, M or 1.
@label=key_input_type_3
w$8268 defw $fb1e
 $826a defw $fd1e
 $826c defw $df1d
 $826e defw $df1e
 $8270 defw $7f1b
 $8272 defw $f71e

; Really unused?
s$8274 defs $c2

; Ticker text
;
; 'press R to redefine keys * press S to start game * press 1, 2 or 3 to select
; key type'
@label=msg_ticker
t$8336 defm "press",$00,"R",$00,"to",$00,"redefine",$00,"keys"
 $834e defm $00,$00
 $8350 defm "press",$00,"S",$00,"to",$00,"start",$00,"game"
 $8365 defm $00,$00,"press",$00,"1,2",$00,"or",$00,"3"
 $8375 defm $00,"to",$00,"select",$00,"key",$00,"type"
 $8388 defm $00,$00,$00,$00,$00,$00,$00,$00

; Instructions screen redefine keys text
;
; 'key types 1 & 2 are present and' 'cannot be changed but the type 3' 'keys
; are user defineable.      '
@label=msg_redefine_text
t$8390 defm "keys are user defineable.      "
 $83af defm $00
 $83b0 defm "cannot",$00,"be",$00,"changed",$00,"but",$00,"the",$00,"type"
 $83ce defm $00
 $83cf defm "3","key",$00,"types",$00
 $83da defm "1",$00,"&",$00,"2",$00,"are",$00,"preset",$00,"and"
 $83ee defm $00,$00

; Instructions screen key types table
@label=msg_key_types
t$83f0 defm "3     q    a    o    p    m or 1"
 $8410 defm "2     --cursor--keys--    4 or 9"
 $8430 defm "1     2    w    9    0    z or m"

; Unused data block?
b$8450 defb $c8,$c9,$ca,$cb,$20,$b8,$b9,$ba
 $8458 defb $20,$20,$bb,$bc,$bd,$20,$20,$be
 $8460 defb $bf,$c0,$20,$20,$c1,$c2,$c3,$20
 $8468 defb $20,$20,$20,$c4,$c5,$c6,$c7,$20

; Unused?
s$8470 defs $0e

; Instructions screen KEYS heading
;
; 'KEYS'
@label=msg_keys_heading
t$847e defm "KEYS"

; Unused
s$8482 defs $19

; Instructions screen objective text
;
; 'objective- to collect eggs from the hen-house.'
@label=msg_instructions_objective
t$849b defm "the",$00,"hen-house."
 $84a9 defb $00,$00,$00,$00,$00,$00,$00
 $84b0 defm "objective-",$00,"to",$00,"collect",$00,"eggs",$00,"from"

; Unused
s$84cf defs $0b

; Instructions screen heading
;
; 'INSTRUCTIONS'
@label=msg_instructions_heading
t$84da defm "INSTRUCTIONS"

; Unused?
s$84e6 defs $0a

; Blank tile graphic
;
; address from which the following graphics are accessed.
@label=gfx_tile_blank
b$84f0 defb $00,$00,$00,$00,$00,$00,$00,$00

; Ladder tile graphic (16x8)
;
; #HTML[#UDGARRAY2;$84F8-$8507-8(gfx_tile_ladder)]
@label=gfx_tile_ladder
b$84f8 defb $30,$30,$30,$3f,$3f,$30,$30,$30
 $8500 defb $0c,$0c,$0c,$fc,$fc,$0c,$0c,$0c

; Egg item graphic
;
; #HTML[#UDG$8508(gfx_item_egg)]
@label=gfx_item_egg
b$8508 defb $38,$7e,$ff,$ff,$ff,$7e,$38,$00

; Corn item graphic
;
; #HTML[#UDG$8510(gfx_item_corn)]
@label=gfx_item_corn
b$8510 defb $00,$00,$00,$10,$28,$54,$aa,$00

; Floor tile graphic
;
; #HTML[#UDG$8518(gfx_tile_floor)]
@label=gfx_tile_floor
b$8518 defb $fb,$00,$bf,$00,$ef,$00,$00,$00

; Unknown ad unused?
b$8520 defb $00,$00,$00,$00,$00,$00,$00,$00
 $8528 defb $00,$00,$00,$00,$00,$00,$00,$00
 $8530 defb $00,$00,$00,$00,$fe,$00,$00,$00
 $8538 defb $00,$00,$00,$00,$00,$00,$00,$00
 $8540 defb $00,$00,$00,$00,$00,$00,$00,$00

; "SCORE" label graphic (24x8)
;
; #HTML[#UDGARRAY3;$8548-$855F-8(labels_score)]
@label=gfx_label_score
b$8548 defb $63,$94,$84,$64,$14,$14,$94,$63
 $8550 defb $19,$a5,$25,$25,$25,$25,$a5,$19
 $8558 defb $cf,$28,$28,$ce,$48,$48,$28,$2f

; "PLAYER" label graphic (32x8)
;
; #HTML[#UDGARRAY4;$8560-$857F-8(labels_player)]
@label=gfx_label_player
b$8560 defb $00,$f2,$8a,$8a,$f2,$82,$82,$83
 $8568 defb $00,$0e,$11,$11,$1f,$11,$11,$d1
 $8570 defb $00,$45,$45,$29,$11,$11,$11,$11
 $8578 defb $00,$ee,$09,$09,$ee,$09,$09,$e9

; "TIME" label graphic (24x8)
;
; #HTML[#UDGARRAY3;$8580-$8597-8(labels_time)]
@label=gfx_label_time
b$8580 defb $00,$fb,$20,$20,$20,$20,$20,$23
 $8588 defb $00,$e8,$8c,$8b,$88,$88,$88,$e8
 $8590 defb $00,$5e,$d0,$50,$5e,$50,$50,$5e

; "A+F SOFTWARE" logo text (48x8)
;
; #HTML[#UDGARRAY6;$8598-$85C7-8(labels_af_software)]
@label=gfx_text_afsoftware
b$8598 defb $00,$00,$00,$e0,$a4,$ee,$a4,$a0
 $85a0 defb $00,$00,$00,$e1,$81,$e1,$80,$81
 $85a8 defb $00,$00,$00,$dd,$15,$d5,$55,$dd
 $85b0 defb $00,$00,$00,$dd,$09,$c9,$09,$08
 $85b8 defb $00,$00,$00,$17,$15,$17,$55,$a5
 $85c0 defb $00,$00,$00,$77,$54,$67,$54,$57

; "BONUS" label graphic (24x8)
;
; #HTML[#UDGARRAY3;$85C8-$85DF-8(labels_bonus)]
@label=gfx_label_bonus
b$85c8 defb $00,$e3,$94,$94,$e4,$94,$94,$e3
 $85d0 defb $00,$25,$a5,$b5,$ad,$a5,$a5,$24
 $85d8 defb $00,$26,$29,$28,$26,$21,$29,$c6

; "LE" text (8x8) - unknown usage
;
; #HTML[#UDGARRAY3;$85E0-$85E7-8(labels_le)]
@label=gfx_text_le
b$85e0 defb $00,$87,$84,$84,$87,$84,$84,$f7

; Unused?
b$85e8 defb $00,$00,$00,$00,$00,$00,$00,$00

; Font: A-Z, numbers, punctuation, and other symbols.
;
; #HTML[#FONT:(
; !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ)$85F0(font_complete)]
@label=font_all
b$85f0 defb $00,$00,$00,$00,$00,$00,$00,$00
 $85f8 defb $08,$08,$08,$08,$08,$08,$00,$08
 $8600 defb $24,$24,$00,$00,$00,$00,$00,$00
 $8608 defb $00,$24,$7e,$24,$24,$7e,$24,$00
 $8610 defb $00,$10,$7c,$50,$7c,$14,$7c,$10
 $8618 defb $00,$62,$64,$08,$10,$26,$46,$00
 $8620 defb $00,$10,$28,$10,$2a,$44,$3a,$00
 $8628 defb $00,$08,$10,$00,$00,$00,$00,$00
 $8630 defb $08,$10,$10,$10,$10,$10,$10,$08
 $8638 defb $10,$08,$08,$08,$08,$08,$08,$10
 $8640 defb $00,$00,$14,$08,$3e,$08,$14,$00
 $8648 defb $08,$08,$08,$7f,$08,$08,$08,$00
 $8650 defb $00,$00,$00,$00,$00,$08,$08,$10
 $8658 defb $00,$00,$00,$00,$7e,$00,$00,$00
 $8660 defb $00,$00,$00,$00,$00,$00,$18,$18
 $8668 defb $01,$02,$04,$08,$10,$20,$40,$00
 $8670 defb $3e,$43,$45,$49,$51,$61,$41,$3e
 $8678 defb $08,$18,$28,$08,$08,$08,$08,$3e
 $8680 defb $3e,$41,$01,$0e,$30,$40,$40,$7f
 $8688 defb $3e,$41,$01,$1e,$01,$01,$41,$3e
 $8690 defb $40,$48,$48,$48,$7f,$08,$08,$08
 $8698 defb $7f,$40,$40,$7e,$01,$01,$41,$3e
 $86a0 defb $3e,$40,$40,$7e,$41,$41,$41,$3e
 $86a8 defb $7f,$01,$02,$04,$08,$10,$10,$10
 $86b0 defb $3e,$41,$41,$3e,$41,$41,$41,$3e
 $86b8 defb $3e,$41,$41,$3f,$01,$01,$41,$3e
 $86c0 defb $00,$18,$18,$00,$00,$18,$18,$00
 $86c8 defb $00,$18,$18,$00,$00,$18,$18,$30
 $86d0 defb $04,$08,$10,$20,$10,$08,$04,$00
 $86d8 defb $00,$00,$3e,$00,$00,$3e,$00,$00
 $86e0 defb $20,$10,$08,$04,$08,$10,$20,$00
 $86e8 defb $3e,$41,$01,$02,$04,$08,$00,$08
 $86f0 defb $1e,$21,$4d,$55,$55,$4f,$20,$1e
 $86f8 defb $3e,$41,$41,$41,$7f,$41,$41,$41
 $8700 defb $7e,$41,$41,$7e,$41,$41,$41,$7e
 $8708 defb $3e,$41,$40,$40,$40,$40,$41,$3e
 $8710 defb $7e,$41,$41,$41,$41,$41,$41,$7e
 $8718 defb $7f,$41,$40,$7c,$40,$40,$41,$7f
 $8720 defb $7f,$41,$40,$7c,$40,$40,$40,$40
 $8728 defb $3e,$41,$40,$40,$47,$41,$41,$3e
 $8730 defb $41,$41,$41,$7f,$41,$41,$41,$41
 $8738 defb $7f,$08,$08,$08,$08,$08,$08,$7f
 $8740 defb $7f,$08,$08,$08,$08,$08,$48,$30
 $8748 defb $42,$44,$48,$70,$48,$44,$42,$42
 $8750 defb $40,$40,$40,$40,$40,$40,$40,$7f
 $8758 defb $41,$63,$55,$49,$41,$41,$41,$41
 $8760 defb $41,$61,$51,$49,$45,$43,$41,$41
 $8768 defb $3e,$41,$41,$41,$41,$41,$41,$3e
 $8770 defb $7e,$41,$41,$41,$7e,$40,$40,$40
 $8778 defb $3e,$41,$41,$41,$49,$45,$43,$3e
 $8780 defb $7e,$41,$41,$41,$7e,$44,$42,$41
 $8788 defb $3e,$41,$40,$3e,$01,$01,$41,$3e
 $8790 defb $7f,$08,$08,$08,$08,$08,$08,$08
 $8798 defb $41,$41,$41,$41,$41,$41,$41,$3e
 $87a0 defb $41,$41,$41,$41,$41,$22,$14,$08
 $87a8 defb $41,$41,$41,$41,$41,$49,$55,$22
 $87b0 defb $41,$22,$14,$08,$08,$14,$22,$41
 $87b8 defb $41,$22,$14,$08,$08,$08,$08,$08
 $87c0 defb $7f,$02,$04,$08,$10,$20,$40,$7f

; Unused font space?
s$87c8 defs $30

; Font: A-Z bold
;
; #HTML[#FONT:(ABCDEFGHIJKLMNOPQRSTUVWXYZ)$87F8(font_az_bold)]
@label=font_az_bold
b$87f8 defb $00,$3c,$66,$66,$7e,$66,$66,$66
 $8800 defb $00,$7c,$66,$66,$78,$66,$66,$7c
 $8808 defb $00,$3c,$66,$60,$60,$60,$66,$3c
 $8810 defb $00,$7c,$66,$66,$66,$66,$66,$7c
 $8818 defb $00,$7e,$62,$60,$7c,$60,$62,$7e
 $8820 defb $00,$7e,$62,$60,$7c,$60,$60,$60
 $8828 defb $00,$3c,$66,$60,$6e,$62,$62,$3c
 $8830 defb $00,$66,$66,$66,$7e,$66,$66,$66
 $8838 defb $00,$7e,$18,$18,$18,$18,$18,$7e
 $8840 defb $00,$7f,$0c,$0c,$0c,$4c,$4c,$38
 $8848 defb $00,$66,$66,$6c,$78,$6c,$66,$66
 $8850 defb $00,$60,$60,$60,$60,$60,$62,$7e
 $8858 defb $00,$c6,$ee,$d6,$c6,$c6,$c6,$c6
 $8860 defb $00,$66,$66,$76,$7e,$6e,$66,$66
 $8868 defb $00,$3c,$66,$66,$66,$66,$66,$3c
 $8870 defb $00,$7c,$66,$66,$7c,$60,$60,$60
 $8878 defb $00,$3c,$66,$66,$66,$76,$6c,$3a
 $8880 defb $00,$7c,$66,$66,$78,$66,$66,$66
 $8888 defb $00,$3c,$66,$60,$3c,$06,$66,$3c
 $8890 defb $00,$7e,$18,$18,$18,$18,$18,$18
 $8898 defb $00,$66,$66,$66,$66,$66,$66,$3c
 $88a0 defb $00,$66,$66,$66,$66,$66,$3c,$18
 $88a8 defb $00,$c6,$c6,$c6,$c6,$d6,$ee,$c6
 $88b0 defb $00,$66,$66,$3c,$18,$3c,$66,$66
 $88b8 defb $00,$66,$66,$3c,$18,$18,$18,$18
 $88c0 defb $00,$7e,$06,$0c,$18,$30,$60,$7e

; Font: Bullet point graphic
;
; Used to separate the scrolling ticker text: Start, Redefine, Insturctions.
; #HTML[#UDG$88C8(font_gfx_bullet)]
@label=font_bullet_point
b$88c8 defb $00,$08,$1c,$3e,$7f,$3e,$1c,$08

; Unused font space?
s$88d0 defs $10

; Font: Registered symbol graphic
;
; #HTML[#UDG$88E0(font_gfx_registered_symbol)]
@label=font_registered_symbol
b$88e0 defb $3c,$42,$b9,$a5,$b9,$a5,$42,$3c

; Font: Copyright symbol graphic
;
; #HTML[#UDG$88E8(font_gfx_copyright_symbol)]
@label=font_copyright_symbol
b$88e8 defb $3c,$42,$99,$a1,$a1,$99,$42,$3c

; Used but unknown (graphics?) data
b$88f0 defb $f0,$f0,$f0,$f0,$00,$00,$00,$00
 $88f8 defb $0f,$0f,$0f,$0f,$00,$00,$00,$00
 $8900 defb $ff,$ff,$ff,$ff,$00,$00,$00,$00
 $8908 defb $00,$00,$00,$00,$f0,$f0,$f0,$f0
 $8910 defb $f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0
 $8918 defb $0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0
 $8920 defb $ff,$ff,$ff,$ff,$f0,$f0,$f0,$f0
 $8928 defb $00,$00,$00,$00,$0f,$0f,$0f,$0f
 $8930 defb $f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f
 $8938 defb $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
 $8940 defb $ff,$ff,$ff,$ff,$0f,$0f,$0f,$0f
 $8948 defb $00,$00,$00,$00,$ff,$ff,$ff,$ff
 $8950 defb $f0,$f0,$f0,$f0,$ff,$ff,$ff,$ff
 $8958 defb $0f,$0f,$0f,$0f,$ff,$ff,$ff,$ff
 $8960 defb $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff

; "A+F CHUCKIE EGG" text graphic
;
; Use as the default name in the high score table.
; #HTML[#UDGARRAY8;$8968-$89A7-8(text_highscore_default_name)]
@label=gfx_text_highscore_default_name
b$8968 defb $00,$00,$f0,$92,$f7,$92,$90,$00
 $8970 defb $00,$00,$70,$40,$70,$40,$40,$00
 $8978 defb $00,$00,$e9,$89,$8f,$89,$e9,$00
 $8980 defb $00,$00,$4b,$4a,$4a,$4a,$7b,$00
 $8988 defb $00,$00,$a5,$28,$30,$28,$a5,$00
 $8990 defb $00,$00,$dc,$90,$9c,$90,$dc,$00
 $8998 defb $00,$00,$3b,$22,$3a,$22,$3b,$00
 $89a0 defb $00,$00,$de,$10,$d6,$52,$de,$00

; Font: Abbreviations for SP, CS, SS, EN (32x8)
;
; #HTML[#UDGARRAY4;$89A8-$89C7-8(font_gfx_abbreviations)]
@label=font_abbreviation_symbols
b$89a8 defb $00,$4e,$a9,$89,$4e,$28,$a8,$48
 $89b0 defb $00,$42,$a5,$84,$82,$81,$a5,$42
 $89b8 defb $00,$42,$a5,$84,$42,$21,$a5,$42
 $89c0 defb $00,$e9,$89,$8d,$eb,$89,$89,$e9

; "LEVEL" label graphic (24x8)
;
; #HTML[#UDGARRAY3;$89C8-$89DF-8(labels_level)]
@label=gfx_label_level
b$89c8 defb $00,$87,$84,$84,$87,$84,$84,$f7
 $89d0 defb $00,$a2,$22,$22,$a2,$22,$14,$88
 $89d8 defb $00,$f4,$84,$84,$f4,$84,$84,$f7

; Font: Numbers bold (used in the scores, level, etc.)
;
; #HTML[#FONT:(0123456789)$89E0(font_numbers_bold)]
@label=font_numbers_bold
b$89e0 defb $00,$1e,$21,$23,$25,$29,$31,$1e
 $89e8 defb $00,$04,$0c,$14,$04,$04,$04,$1f
 $89f0 defb $00,$1e,$21,$01,$1e,$20,$20,$3f
 $89f8 defb $00,$1e,$21,$01,$0e,$01,$21,$1e
 $8a00 defb $00,$06,$0a,$12,$22,$3f,$02,$02
 $8a08 defb $00,$3f,$20,$3e,$01,$01,$21,$1e
 $8a10 defb $00,$1e,$21,$20,$3e,$21,$21,$1e
 $8a18 defb $00,$3f,$01,$02,$04,$08,$08,$08
 $8a20 defb $00,$1e,$21,$21,$1e,$21,$21,$1e
 $8a28 defb $00,$1e,$21,$21,$1f,$01,$21,$1e

; Birdcage handle graphic tiles (16x8)
;
; #HTML[#UDGARRAY2;$8A30-$8A3F-8(level_gfx_birdcage_handle)]
@label=gfx_tile_birdcage_handle
b$8a30 defb $00,$00,$07,$0c,$08,$0c,$07,$01
 $8a38 defb $00,$00,$c0,$60,$20,$60,$c0,$00

; Birdcage graphic tiles (32x24)
;
; #HTML[#UDGARRAY4;$8A40-$8A9F-8(level_gfx_birdcage)]
@label=gfx_tile_birdcage
b$8a40 defb $00,$00,$03,$05,$0a,$15,$29,$2a
 $8a48 defb $1f,$e0,$18,$67,$89,$11,$11,$21
 $8a50 defb $f0,$0e,$31,$cc,$22,$11,$11,$08
 $8a58 defb $00,$00,$80,$40,$a0,$50,$28,$a8
 $8a60 defb $52,$52,$52,$52,$72,$5a,$57,$52
 $8a68 defb $21,$21,$21,$21,$21,$21,$21,$df
 $8a70 defb $08,$08,$08,$08,$08,$08,$09,$fe
 $8a78 defb $94,$94,$94,$94,$9c,$b4,$d4,$94
 $8a80 defb $52,$52,$52,$52,$32,$0a,$07,$00
 $8a88 defb $21,$21,$21,$21,$21,$21,$21,$ff
 $8a90 defb $08,$08,$08,$08,$08,$08,$09,$fe
 $8a98 defb $94,$94,$94,$94,$98,$b0,$c0,$00

; Player "lives" icon graphic
;
; #HTML[#UDG$8AA0(level_gfx_lives_counter)]
@label=gfx_icon_lives
b$8aa0 defb $00,$00,$1c,$1c,$7f,$00,$00,$00

; High score table "cursor" icon graphic
;
; #HTML[#UDG$8AA8(level_gfx_highscore_cursor)]
@label=gfx_icon_highscore_cursor
b$8aa8 defb $18,$3c,$3c,$7e,$7e,$7e,$7e,$3c

; "UP" heading graphic for instructions screen (24x8)
;
; #HTML[#UDGARRAY3;$8AB0-$8AC7-8(instructions_heading_up)]
@label=instructions_heading_up
b$8ab0 defb $00,$02,$02,$02,$02,$03,$00,$03
 $8ab8 defb $00,$27,$24,$27,$24,$e4,$00,$ff
 $8ac0 defb $00,$c0,$40,$c0,$00,$00,$00,$c0

; "DOWN" heading graphic for instructions screen (24x8)
;
; #HTML[#UDGARRAY3;$8AC8-$8ADF-8(instructions_heading_down)]
@label=instructions_heading_down
b$8ac8 defb $00,$fd,$45,$45,$45,$fd,$00,$ff
 $8ad0 defb $00,$f4,$14,$15,$15,$f7,$00,$ff
 $8ad8 defb $00,$51,$59,$55,$53,$d1,$00,$ff

; "LEFT" heading graphic for instructions screen (24x8)
;
; #HTML[#UDGARRAY3;$8AE0-$8AF7-8(instructions_heading_left)]
@label=instructions_heading_left
b$8ae0 defb $00,$83,$82,$83,$82,$fb,$00,$ff
 $8ae8 defb $00,$e7,$04,$c7,$04,$e4,$00,$ff
 $8af0 defb $00,$df,$04,$84,$04,$04,$00,$ff

; "RIGHT" heading graphic for instructions screen (24x8)
;
; #HTML[#UDGARRAY3;$8AF8-$8B0F-8(instructions_heading_right)]
@label=instructions_heading_right
b$8af8 defb $00,$f2,$92,$f2,$a2,$92,$00,$ff
 $8b00 defb $00,$7a,$42,$5b,$4a,$7a,$00,$ff
 $8b08 defb $00,$5f,$44,$c4,$44,$44,$00,$ff

; "JUMP" heading graphic for instructions screen (24x8)
;
; #HTML[#UDGARRAY4;$8B10-$8B2F-8(instructions_heading_jump)]
@label=instructions_heading_jump
b$8b10 defb $00,$7e,$08,$08,$48,$78,$00,$ff
 $8b18 defb $00,$42,$42,$42,$42,$7e,$00,$ff
 $8b20 defb $00,$7f,$49,$49,$41,$41,$00,$ff
 $8b28 defb $00,$3f,$21,$3f,$20,$20,$00,$ff

; "TYPE" heading graphic for instructions screen (32x8)
;
; #HTML[#UDGARRAY4;$8B30-$8B4F-8(instructions_heading_type)]
@label=instructions_heading_type
b$8b30 defb $00,$fe,$10,$10,$10,$10,$00,$ff
 $8b38 defb $00,$41,$22,$1c,$08,$08,$00,$ff
 $8b40 defb $00,$3f,$21,$3f,$20,$20,$00,$ff
 $8b48 defb $00,$3f,$20,$3c,$20,$3f,$00,$ff

; Unknown, unused?
s$8b50 defs $02a0

; Farmer sprites animation data: right facing
@label=sprites_farmer_right
b$8df0 defb $00,$00,$03,$80,$03,$c0,$03,$c0
 $8df8 defb $3f,$fc,$03,$40,$03,$c0,$01,$80
 $8e00 defb $03,$e0,$06,$f0,$06,$f0,$06,$e0
 $8e08 defb $03,$c0,$01,$00,$01,$c0,$00,$00
 $8e10 defb $00,$00,$03,$80,$03,$c0,$03,$c0
 $8e18 defb $3f,$fc,$03,$40,$03,$c0,$01,$80
 $8e20 defb $03,$e0,$06,$f0,$05,$f0,$05,$e0
 $8e28 defb $03,$c0,$04,$50,$02,$20,$00,$00
 $8e30 defb $00,$00,$03,$80,$03,$c0,$03,$c0
 $8e38 defb $3f,$fc,$03,$40,$03,$c0,$01,$80
 $8e40 defb $03,$e0,$06,$f0,$06,$f0,$06,$e0
 $8e48 defb $03,$c0,$01,$00,$01,$c0,$00,$00
 $8e50 defb $00,$00,$03,$80,$03,$c0,$03,$c0
 $8e58 defb $3f,$fc,$03,$40,$03,$c0,$01,$80
 $8e60 defb $03,$e0,$06,$f0,$07,$30,$07,$e0
 $8e68 defb $03,$c0,$04,$50,$02,$20,$00,$00

; Farmer sprites animation data: left facing
@label=sprites_farmer_left
b$8e70 defb $00,$00,$01,$c0,$03,$c0,$03,$c0
 $8e78 defb $3f,$fc,$02,$c0,$03,$c0,$01,$80
 $8e80 defb $07,$c0,$0f,$60,$0f,$60,$07,$60
 $8e88 defb $03,$c0,$00,$80,$03,$80,$00,$00
 $8e90 defb $00,$00,$01,$c0,$03,$c0,$03,$c0
 $8e98 defb $3f,$fc,$02,$c0,$03,$c0,$01,$80
 $8ea0 defb $07,$c0,$0f,$60,$0f,$a0,$07,$a0
 $8ea8 defb $03,$c0,$0a,$20,$04,$40,$00,$00
 $8eb0 defb $00,$00,$01,$c0,$03,$c0,$03,$c0
 $8eb8 defb $3f,$fc,$02,$c0,$03,$c0,$01,$80
 $8ec0 defb $07,$c0,$0f,$60,$0f,$60,$07,$60
 $8ec8 defb $03,$c0,$00,$80,$03,$80,$00,$00
 $8ed0 defb $00,$00,$01,$c0,$03,$c0,$03,$c0
 $8ed8 defb $3f,$fc,$02,$c0,$03,$c0,$01,$80
 $8ee0 defb $07,$c0,$0f,$60,$0c,$e0,$07,$e0
 $8ee8 defb $03,$c0,$0a,$20,$04,$40,$00,$00

; Duck sprites animation data: right facing (2 of 16x16)
@label=sprites_duck_right
b$8ef0 defb $00,$79,$00,$ee,$00,$fc,$00,$fa
 $8ef8 defb $00,$71,$00,$70,$00,$30,$00,$38
 $8f00 defb $1e,$1c,$7f,$9c,$ff,$fc,$bf,$7c
 $8f08 defb $4f,$78,$70,$f0,$3f,$e0,$0f,$80
 $8f10 defb $00,$78,$00,$ec,$00,$ff,$00,$f8
 $8f18 defb $00,$70,$00,$70,$00,$30,$00,$38
 $8f20 defb $1e,$1c,$70,$9c,$cf,$7c,$bf,$7c
 $8f28 defb $7f,$f8,$7f,$f0,$3f,$e0,$0f,$80

; Duck sprites animation data: left facing (2 of 16x16)
@label=sprites_duck_left
b$8f30 defb $9e,$00,$77,$00,$3f,$00,$5f,$00
 $8f38 defb $8e,$00,$0e,$00,$0c,$00,$1c,$00
 $8f40 defb $38,$78,$39,$fe,$3f,$ff,$3e,$fd
 $8f48 defb $1e,$f2,$0f,$0e,$07,$fc,$01,$f0
 $8f50 defb $1e,$00,$37,$00,$ff,$00,$1f,$00
 $8f58 defb $0e,$00,$0e,$00,$0c,$00,$1c,$00
 $8f60 defb $38,$78,$39,$0e,$3e,$f3,$3e,$fd
 $8f68 defb $1f,$fe,$0f,$fe,$07,$fc,$01,$f0

; Data here is copied to 72A0
b$8f70 defb $00,$00,$00,$00,$00,$00,$00,$00
 $8f78 defb $00,$00,$00,$00,$00,$00,$00,$00
 $8f80 defb $00,$00,$00,$00,$00,$00,$00,$00
 $8f88 defb $00,$00,$00,$00,$00,$00,$00,$00

; Farmer sprites animation data: climbing stairs
@label=sprites_farmer_climbing
b$8f90 defb $00,$00,$02,$40,$03,$c0,$03,$c0
 $8f98 defb $3f,$fc,$03,$c0,$09,$80,$17,$e0
 $8fa0 defb $1f,$f0,$0f,$f8,$07,$e8,$07,$e8
 $8fa8 defb $02,$70,$02,$00,$0e,$00,$00,$00
 $8fb0 defb $00,$00,$02,$40,$03,$c0,$03,$c0
 $8fb8 defb $3f,$fc,$03,$c0,$01,$80,$07,$e0
 $8fc0 defb $1f,$f8,$0f,$f0,$07,$e0,$07,$e0
 $8fc8 defb $02,$40,$0e,$70,$00,$00,$00,$00
 $8fd0 defb $00,$00,$02,$40,$03,$c0,$03,$c0
 $8fd8 defb $3f,$fc,$03,$c0,$01,$90,$07,$e8
 $8fe0 defb $0f,$f8,$1f,$f0,$17,$e0,$17,$e0
 $8fe8 defb $0e,$40,$00,$40,$00,$70,$00,$00
 $8ff0 defb $00,$00,$02,$40,$03,$c0,$03,$c0
 $8ff8 defb $3f,$fc,$03,$c0,$01,$80,$07,$e0
 $9000 defb $1f,$f8,$0f,$f0,$07,$e0,$07,$e0
 $9008 defb $02,$40,$0e,$70,$00,$00,$00,$00

; Ostrich sprites data: left facing (16x16)
@label=sprites_ostrich_left
b$9010 defb $30,$00,$d0,$00,$30,$00,$20,$00
 $9018 defb $40,$00,$40,$00,$c0,$00,$ce,$00
 $9020 defb $ff,$00,$ff,$00,$7f,$00,$3e,$00
 $9028 defb $08,$00,$08,$00,$08,$00,$18,$00

; Ostrich sprites data: right facing (16x16)
@label=sprites_ostrich_right
b$9030 defb $0c,$00,$0b,$00,$0c,$00,$04,$00
 $9038 defb $02,$00,$02,$00,$03,$00,$73,$00
 $9040 defb $ff,$00,$ff,$00,$fe,$00,$7c,$00
 $9048 defb $10,$00,$10,$00,$10,$00,$18,$00

; Ostrich sprites animation data: climbing (2 of 16x16)
@label=sprites_ostrich_climbing
b$9050 defb $01,$80,$03,$c0,$03,$c0,$01,$80
 $9058 defb $01,$80,$01,$80,$07,$e0,$0f,$f0
 $9060 defb $0f,$f0,$0f,$f0,$07,$e0,$02,$40
 $9068 defb $02,$60,$02,$00,$02,$00,$06,$00
 $9070 defb $01,$80,$03,$c0,$03,$c0,$01,$80
 $9078 defb $01,$80,$01,$80,$07,$e0,$0f,$f0
 $9080 defb $0f,$f0,$0f,$f0,$07,$e0,$02,$40
 $9088 defb $06,$40,$00,$40,$00,$40,$00,$60

; Ostrich sprites data: left walking (16x16)
@label=sprites_ostrich_left_walk
b$9090 defb $0b,$00,$05,$00,$0b,$00,$02,$00
 $9098 defb $04,$00,$04,$00,$0c,$00,$0c,$e0
 $90a0 defb $0f,$f0,$0f,$f0,$07,$f0,$03,$e0
 $90a8 defb $01,$80,$0a,$40,$04,$20,$00,$40

; Ostrich sprites data: right walking (16x16)
@label=sprites_ostrich_right_walk
b$90b0 defb $00,$d0,$00,$a0,$00,$d0,$00,$40
 $90b8 defb $00,$20,$00,$20,$00,$30,$07,$30
 $90c0 defb $0f,$f0,$0f,$f0,$0f,$e0,$07,$c0
 $90c8 defb $01,$80,$02,$50,$04,$20,$02,$00

; Ostrich sprites data: eating left facing (16x16)
@label=sprites_ostrich_eating_left
b$90d0 defb $00,$00,$00,$00,$00,$00,$00,$00
 $90d8 defb $00,$00,$00,$00,$70,$00,$58,$1e
 $90e0 defb $27,$ff,$51,$ff,$00,$7f,$10,$3e
 $90e8 defb $28,$08,$54,$08,$aa,$08,$00,$18

; Ostrich sprites data: eating right facing (16x16)
@label=sprites_ostrich_eating_right
b$90f0 defb $00,$00,$00,$00,$00,$00,$00,$00
 $90f8 defb $00,$00,$00,$00,$00,$0e,$78,$1a
 $9100 defb $ff,$e4,$ff,$8a,$fe,$00,$7c,$08
 $9108 defb $10,$14,$10,$2a,$10,$55,$18,$00

; Some odd graphics/data...unusued?
b$9110 defb $00,$00,$00,$00,$00,$00,$0c,$00
 $9118 defb $0f,$00,$0f,$80,$1f,$c0

; Runs from start of level, after everything has been rendered.
;
; Used by the routine at #R$98e6.
c$911e ld a,($6eeb)  ;
 $9121 cp $08        ;
 $9123 jr c,$9128    ;
 $9125 cp $10        ;
 $9127 ret c         ;
*$9128 ld hl,($736c) ; {Increment value stored @736C, then set its MSB(?) to
 $912b inc hl        ; $00
 $912c ld h,$00      ;
 $912e ld ($736c),hl ; }
 $9131 ld c,$01      ;
 $9133 bit 0,(hl)    ; {Jump if BIT 0 of the byte stored at address #REGhl is
 $9135 jr z,$9138    ; set.}
 $9137 dec c         ;
*$9138 ld hl,$7356   ;
 $913b ld a,(hl)     ;
 $913c inc a         ;
 $913d cp $05        ;
 $913f jr nz,$9142   ;
 $9141 xor a         ;
*$9142 ld (hl),a     ;
 $9143 sla a         ;
 $9145 sla a         ;
 $9147 add a,$57     ;
 $9149 ld h,$73      ;
 $914b ld l,a        ;
 $914c ld e,(hl)     ;
 $914d ld a,e        ;
 $914e xor $ff       ;
 $9150 ret z         ;
 $9151 inc hl        ;
 $9152 ld d,(hl)     ;
 $9153 inc hl        ;
 $9154 ld a,(hl)     ;
 $9155 ex de,hl      ;
 $9156 xor a         ;
 $9157 call $929c    ;
 $915a ex de,hl      ;
 $915b ld a,(hl)     ;
 $915c cp $07        ;
 $915e jr c,$9178    ;
 $9160 ld c,e        ;
 $9161 sub $06       ;
 $9163 ld (hl),a     ;
 $9164 ld b,a        ;
 $9165 cp $02        ;
 $9167 jr z,$916d    ;
 $9169 ld a,e        ;
 $916a sub $08       ;
 $916c ld e,a        ;
*$916d ex de,hl      ;
 $916e xor a         ;
 $916f call $929c    ;
 $9172 ld a,b        ;
 $9173 ld l,c        ;
 $9174 call $929c    ;
 $9177 ret           ;

; Seems to run every loop
;
; Used by the routine at #R$911e.
c$9178 cp $03        ;
 $917a jr nc,$91f3   ;
 $917c bit 2,e       ;
 $917e jr nz,$91a5   ;
 $9180 ld b,a        ;
 $9181 call $9265    ;
 $9184 ld a,e        ;
 $9185 add a,$08     ;
 $9187 jr c,$91a1    ;
 $9189 djnz $918f    ;
 $918b sub $10       ;
 $918d jr c,$91a1    ;
*$918f ld e,a        ;
 $9190 dec d         ;
 $9191 ex de,hl      ;
 $9192 call $9438    ;
 $9195 ex de,hl      ;
 $9196 and a         ;
 $9197 jr z,$91a1    ;
 $9199 cp $03        ;
 $919b jr c,$91a5    ;
 $919d cp $05        ;
 $919f jr z,$91a5    ;
*$91a1 ld a,$03      ;
 $91a3 sub (hl)      ;
 $91a4 ld (hl),a     ;
*$91a5 ld b,(hl)     ;
 $91a6 dec hl        ;
 $91a7 ld d,(hl)     ;
 $91a8 dec hl        ;
 $91a9 ld a,(hl)     ;
 $91aa add a,$04     ;
 $91ac djnz $91b0    ;
 $91ae sub $08       ;
*$91b0 ld (hl),a     ;
 $91b1 inc b         ;
 $91b2 ld e,a        ;
 $91b3 ex de,hl      ;
 $91b4 ld a,b        ;
 $91b5 call $929c    ;
 $91b8 inc de        ;
 $91b9 inc de        ;
 $91ba bit 2,l       ;
 $91bc ret z         ;
 $91bd dec c         ;
 $91be ret nz        ;
 $91bf push hl       ;
 $91c0 ld hl,($736c) ;
 $91c3 ld a,(hl)     ;
 $91c4 pop hl        ;
 $91c5 ld c,$02      ;
 $91c7 bit 1,a       ; {If bit 1 of the value stored @736C is set, do not jump
 $91c9 jr z,$91df    ; to @91DF}

; An alt routine @91DF ?
;
; Used by the routine at #R$91df.
c$91cb push hl       ;
 $91cc ld a,h        ;
 $91cd sub $08       ;
 $91cf ld h,a        ;
 $91d0 call $9438    ;
 $91d3 pop hl        ;
 $91d4 dec a         ;
 $91d5 jr z,$91db    ;
 $91d7 dec c         ;
 $91d8 jr nz,$91df   ;
 $91da ret           ;
*$91db ld a,$03      ;
 $91dd ld (de),a     ;
 $91de ret           ;

; An alt routine @91CB ?
;
; Used by the routines at #R$9178 and #R$91cb.
c$91df push hl       ;
 $91e0 ld a,h        ;
 $91e1 add a,$10     ;
 $91e3 ld h,a        ;
 $91e4 call $9438    ;
 $91e7 pop hl        ;
 $91e8 dec a         ;
 $91e9 jr z,$91ef    ;
 $91eb dec c         ;
 $91ec jr nz,$91cb   ;
 $91ee ret           ;
*$91ef ld a,$04      ;
 $91f1 ld (de),a     ;
 $91f2 ret           ;

; Seems to run every loop
;
; Used by the routine at #R$9178.
c$91f3 bit 2,d       ;
 $91f5 jr nz,$920e   ;
 $91f7 sub $02       ;
 $91f9 ld b,a        ;
 $91fa ld a,d        ;
 $91fb add a,$10     ;
 $91fd djnz $9201    ;
 $91ff sub $18       ;
*$9201 ld d,a        ;
 $9202 ex de,hl      ;
 $9203 call $9438    ;
 $9206 ex de,hl      ;
 $9207 dec a         ;
 $9208 jr z,$920e    ;
 $920a ld a,$07      ;
 $920c sub (hl)      ;
 $920d ld (hl),a     ;
*$920e ld b,(hl)     ;
 $920f dec hl        ;
 $9210 ld a,(hl)     ;
 $9211 dec hl        ;
 $9212 ld e,(hl)     ;
 $9213 add a,$04     ;
 $9215 dec b         ;
 $9216 dec b         ;
 $9217 djnz $921b    ;
 $9219 sub $08       ;
*$921b inc hl        ;
 $921c ld (hl),a     ;
 $921d ld d,a        ;
 $921e ex de,hl      ;
 $921f ld a,b        ;
 $9220 add a,$03     ;
 $9222 call $929c    ;
 $9225 bit 2,h       ;
 $9227 ret nz        ;
 $9228 dec c         ;
 $9229 ret nz        ;
 $922a inc de        ;
 $922b ld a,h        ;
 $922c sub $08       ;
 $922e ld h,a        ;
 $922f push hl       ;
 $9230 ld hl,($736c) ;
 $9233 ld a,(hl)     ;
 $9234 pop hl        ;
 $9235 ld c,$02      ;
 $9237 bit 1,a       ; {If bit 1 of the value stored @736C is set, do not jump
 $9239 jr z,$9250    ; to @9250}

; An alt routine to @9250 ?
;
; Used by the routine at #R$9250.
c$923b push hl       ;
 $923c ld a,l        ;
 $923d sub $08       ;
 $923f ld l,a        ;
 $9240 call $9438    ;
 $9243 pop hl        ;
 $9244 cp $05        ;
 $9246 jr z,$924c    ;
 $9248 dec c         ;
 $9249 ret z         ;
 $924a jr $9250      ;
*$924c ld a,$01      ;
 $924e ld (de),a     ;
 $924f ret           ;

; An alt routine to @923B ?
;
; Used by the routines at #R$91f3 and #R$923b.
c$9250 push hl       ;
 $9251 ld a,l        ;
 $9252 add a,$10     ;
 $9254 ld l,a        ;
 $9255 call $9438    ;
 $9258 pop hl        ;
 $9259 cp $05        ;
 $925b jr z,$9261    ;
 $925d dec c         ;
 $925e ret z         ;
 $925f jr $923b      ;
*$9261 ld a,$02      ;
 $9263 ld (de),a     ;
 $9264 ret           ;

; Routine at 9265
;
; Used by the routine at #R$9178.
c$9265 push bc       ; {Backup registers
 $9266 push hl       ;
 $9267 push de       ; }
 $9268 ld a,e        ;
 $9269 add a,$08     ;
 $926b jr c,$9298    ;
 $926d ld e,a        ;
 $926e ld a,(hl)     ;
 $926f cp $02        ;
 $9271 jr z,$9279    ;
 $9273 ld a,e        ;
 $9274 sub $10       ;
 $9276 jr c,$9298    ;
 $9278 ld e,a        ;
*$9279 ex de,hl      ;
 $927a call $9e34    ;
 $927d cp $04        ;
 $927f jr nz,$9298   ;
 $9281 ld (hl),$00   ;
 $9283 ld a,(de)     ;
 $9284 add a,$06     ;
 $9286 ld (de),a     ;
 $9287 pop hl        ;
 $9288 cp $08        ;
 $928a jr z,$9290    ;
 $928c ld a,l        ;
 $928d sub $08       ;
 $928f ld l,a        ;
*$9290 ld a,(de)     ;
 $9291 call $929c    ;
 $9294 pop hl        ; {Pop all to #REGhl rather than #REGde, #REGhl, #REGbc.
 $9295 pop hl        ;
 $9296 pop hl        ; }
 $9297 ret           ;

; Routine to restore (POP) all #REGde, #REGhl, #REGbc registers
;
; Used by the routine at #R$9265.
@label=Restore16bitRegisters
c$9298 pop de        ;
 $9299 pop hl        ;
 $929a pop bc        ;
 $929b ret           ;

; Update Ostriches?
;
; Used by the routines at #R$911e, #R$9178, #R$91f3 and #R$9265.
c$929c push bc       ; POKE to 201 (`RET`) to vanquish Ostriches
 $929d push de       ;
 $929e push af       ;
 $929f push hl       ;
 $92a0 ex de,hl      ;
 $92a1 ld hl,$72d8   ;
 $92a4 ld a,e        ;
 $92a5 add a,$05     ;
 $92a7 cp (hl)       ;
 $92a8 jr c,$92c2    ;
 $92aa sub $0d       ;
 $92ac jr nc,$92af   ;
 $92ae xor a         ;
*$92af cp (hl)       ;
 $92b0 jr nc,$92c2   ;
 $92b2 inc hl        ;
 $92b3 ld a,d        ;
 $92b4 cp (hl)       ;
 $92b5 jr nc,$92c2   ;
 $92b7 add a,$1c     ;
 $92b9 cp (hl)       ;
 $92ba jr c,$92c2    ;
 $92bc ld b,$06      ;
*$92be pop hl        ;
 $92bf djnz $92be    ;
 $92c1 ret           ;

; Routine at 92c2
;
; Used by the routine at #R$929c.
c$92c2 pop hl        ;
 $92c3 pop af        ;
 $92c4 push af       ;
 $92c5 push hl       ;
 $92c6 and a         ;
 $92c7 jp z,$935f    ;
 $92ca ld ixh,a      ;
 $92cc cp $04        ;
 $92ce jr nz,$92d1   ;
 $92d0 dec a         ;
*$92d1 ex de,hl      ;
 $92d2 cp $07        ;
 $92d4 jr nc,$92e7   ;
 $92d6 cp $03        ;
 $92d8 jr nz,$92e1   ;
 $92da bit 2,d       ;
 $92dc jr z,$92e7    ;
 $92de inc a         ;
 $92df jr $92e7      ;
*$92e1 bit 2,e       ;
 $92e3 jr z,$92e7    ;
 $92e5 add a,$04     ;
*$92e7 ld b,$00      ;
 $92e9 ld c,a        ;
 $92ea sla c         ;
 $92ec sla c         ;
 $92ee sla c         ;
 $92f0 sla c         ;
 $92f2 sla c         ;
 $92f4 rl b          ;
@ssub=ld hl,$8f90+$7e ; Point #REGhl to end of SPRITES_FARMER_WALK
 $92f6 ld hl,$900e   ;
 $92f9 add hl,bc     ;
 $92fa ex de,hl      ;
 $92fb ld c,$02      ;
 $92fd ld a,l        ;
 $92fe cp $f9        ;
 $9300 jr c,$9303    ;
 $9302 dec c         ;
*$9303 call $9404    ;
 $9306 ld b,$10      ;
*$9308 ld a,(de)     ;
 $9309 dec c         ;
 $930a jr z,$9317    ;
 $930c inc de        ;
 $930d or (hl)       ;
 $930e ld (hl),a     ;
 $930f inc hl        ;
 $9310 ld a,(de)     ;
 $9311 or (hl)       ;
 $9312 dec de        ;
 $9313 dec de        ;
 $9314 dec de        ;
 $9315 ld (hl),a     ;
 $9316 dec hl        ;
*$9317 inc c         ;
 $9318 dec h         ;
 $9319 ld a,h        ;
 $931a and $07       ;
 $931c cp $07        ;
 $931e jr nz,$932e   ;
 $9320 ld a,h        ;
 $9321 add a,$08     ;
 $9323 ld h,a        ;
 $9324 ld a,l        ;
 $9325 sub $20       ;
 $9327 ld l,a        ;
 $9328 jr nc,$932e   ;
 $932a ld a,h        ;
 $932b sub $08       ;
 $932d ld h,a        ;
*$932e djnz $9308    ;
 $9330 pop hl        ;
 $9331 push hl       ;
 $9332 ld d,$02      ;
 $9334 ld a,ixh      ;
 $9336 cp $07        ;
 $9338 jr nc,$933f   ;
 $933a bit 2,l       ;
 $933c jr nz,$933f   ;
 $933e dec d         ;
*$933f ld e,$03      ;
 $9341 bit 2,h       ;
 $9343 jr nz,$9346   ;
 $9345 dec e         ;
*$9346 call $93dd    ;
*$9349 ld b,d        ;
 $934a push hl       ;
*$934b ld (hl),$05   ;
 $934d inc hl        ;
 $934e djnz $934b    ;
 $9350 pop hl        ;
 $9351 ld bc,$0020   ;
 $9354 and a         ;
 $9355 sbc hl,bc     ;
 $9357 dec e         ;
 $9358 jr nz,$9349   ;
 $935a pop hl        ;
 $935b pop af        ;
 $935c pop de        ;
 $935d pop bc        ;
 $935e ret           ;

; Routine at 935f
;
; Used by the routine at #R$92c2.
c$935f ld ixl,$02    ;
 $9362 ld a,l        ;
 $9363 cp $f8        ;
 $9365 jr c,$9369    ;
 $9367 dec ixl       ;
*$9369 ld a,h        ;
 $936a and $f8       ;
 $936c ld h,a        ;
 $936d call $9404    ;
 $9370 ex de,hl      ;
 $9371 pop hl        ;
 $9372 push hl       ;
 $9373 call $93fe    ;
 $9376 push hl       ;
 $9377 pop bc        ;
 $9378 pop hl        ;
 $9379 push hl       ;
 $937a call $93dd    ;
 $937d ld ixh,$03    ;
*$9380 push ix       ;
 $9382 push hl       ;
 $9383 push bc       ;
 $9384 push de       ;
*$9385 push hl       ;
 $9386 ld a,(bc)     ;
 $9387 add a,$4f     ;
 $9389 ld h,$98      ;
 $938b ld l,a        ;
 $938c ld a,(hl)     ;
 $938d pop hl        ;
 $938e ld (hl),a     ;
 $938f push hl       ;
 $9390 push bc       ;
 $9391 ld a,(bc)     ;
 $9392 sla a         ;
 $9394 sla a         ;
 $9396 sla a         ;
@ssub=ld hl,$84f0+$07 ; Point #REGhl to last byte of gfx_tile_blank
 $9398 ld hl,$84f7   ;
 $939b ld b,$00      ;
 $939d ld c,a        ;
 $939e add hl,bc     ;
 $939f push de       ;
 $93a0 ld b,$08      ;
*$93a2 ld a,(hl)     ;
 $93a3 ld (de),a     ;
 $93a4 dec d         ;
 $93a5 dec hl        ;
 $93a6 djnz $93a2    ;
 $93a8 pop de        ;
 $93a9 inc de        ;
 $93aa pop bc        ;
 $93ab inc bc        ;
 $93ac pop hl        ;
 $93ad inc hl        ;
 $93ae dec ixl       ;
 $93b0 jr nz,$9385   ;
 $93b2 pop de        ;
 $93b3 pop bc        ;
 $93b4 pop hl        ;
 $93b5 ld a,e        ;
 $93b6 sub $20       ;
 $93b8 ld e,a        ;
 $93b9 jr nc,$93bf   ;
 $93bb ld a,d        ;
 $93bc sub $08       ;
 $93be ld d,a        ;
*$93bf push de       ;
 $93c0 ld de,$0020   ;
 $93c3 and a         ;
 $93c4 sbc hl,de     ;
 $93c6 push hl       ;
 $93c7 push bc       ;
 $93c8 pop hl        ;
 $93c9 add hl,de     ;
 $93ca push hl       ;
 $93cb pop bc        ;
 $93cc pop hl        ;
 $93cd pop de        ;
 $93ce pop ix        ;
 $93d0 dec ixh       ;
 $93d2 jr nz,$9380   ;
 $93d4 pop hl        ;
 $93d5 pop af        ;
 $93d6 pop de        ;
 $93d7 pop bc        ;
 $93d8 ld ix,$72d8   ;
 $93dc ret           ;

; Routine at 93dd
;
; Used by the routines at #R$92c2 and #R$935f.
c$93dd push af       ;
 $93de push de       ;
 $93df ld a,$bf      ;
 $93e1 sub h         ;
 $93e2 ld h,$00      ;
 $93e4 ex de,hl      ;
 $93e5 ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $93e8 srl e         ;
 $93ea srl e         ;
 $93ec srl e         ;
 $93ee add hl,de     ;
 $93ef and $f8       ;
 $93f1 sla a         ;
 $93f3 rl d          ;
 $93f5 sla a         ;
 $93f7 rl d          ;
 $93f9 ld e,a        ;
 $93fa add hl,de     ;
 $93fb pop de        ;
 $93fc pop af        ;
 $93fd ret           ;

; Backup/restore #REGaf, so routine can be called safely.
;
; Used by the routine at #R$935f.
c$93fe push af       ;
 $93ff call $9e34    ;
 $9402 pop af        ;
 $9403 ret           ;

; Routine at 9404
;
; Used by the routines at #R$92c2 and #R$935f.
c$9404 push af       ; {Backup #REGaf, #REGde, #REGbc registers
 $9405 push de       ;
 $9406 push bc       ; }
 $9407 ex de,hl      ;
 $9408 ld hl,$4000   ; Load #REGhl with start of DISPLAY_FILE.
 $940b ld bc,$0800   ; Load #REGbc with value of 2048 (1/3 of screen)
 $940e ld a,d        ;
 $940f cp $80        ;
 $9411 jr nc,$9419   ;
 $9413 cp $40        ;
 $9415 jr nc,$9418   ;
 $9417 add hl,bc     ;
*$9418 add hl,bc     ;
*$9419 and $38       ;
 $941b ld c,a        ;
 $941c ld a,$38      ;
 $941e sub c         ;
 $941f sla a         ;
 $9421 sla a         ;
 $9423 ld b,$00      ;
 $9425 ld c,a        ;
 $9426 add hl,bc     ;
 $9427 ld a,d        ;
 $9428 and $07       ;
 $942a xor $07       ;
 $942c ld d,a        ;
 $942d srl e         ;
 $942f srl e         ;
 $9431 srl e         ;
 $9433 add hl,de     ;
 $9434 pop bc        ; {Restore #REGaf, #REGde, #REGbc registers
 $9435 pop de        ;
 $9436 pop af        ; }
 $9437 ret           ;

; Save/restore #REGhl so routine can be called safely
;
; Used by the routines at #R$9178, #R$91cb, #R$91df, #R$91f3, #R$923b and
; #R$9250.
c$9438 push hl       ;
 $9439 call $9e34    ;
 $943c pop hl        ;
 $943d ret           ;

; Data block at 943e
b$943e defb $f1,$c9,$e5,$cd,$34,$9e,$e1,$c9
 $9446 defb $00,$08,$7a,$fe,$80,$30,$06,$fe
 $944e defb $40,$30,$01,$09,$09,$e6,$38,$4f
 $9456 defb $3e,$38,$91,$cb,$27

; Some of these byte are copied to 7357.
b$945b defb $cb,$27,$06,$00,$4f,$09,$7a,$e6
 $9463 defb $07,$ee,$07,$57,$cb,$3b,$cb,$3b
 $946b defb $cb,$3b,$19,$c1,$d1,$08,$68,$88
 $9473 defb $02,$00,$48,$68,$01,$00,$40,$48
 $947b defb $01,$00,$98,$08,$02,$00,$48,$28
 $9483 defb $01,$00,$0c,$10,$08,$02,$00,$48
 $948b defb $88,$02,$00,$e0,$48,$02,$00,$90
 $9493 defb $48,$01,$00,$a8,$88,$01,$00,$0c
 $949b defb $10,$68,$01,$00,$e8,$20,$01,$00
 $94a3 defb $70,$80,$02,$00,$64,$50,$03,$00
 $94ab defb $0c,$28,$04,$00,$10,$28,$08,$01
 $94b3 defb $00,$d8,$08,$02,$00,$d8,$88,$02
 $94bb defb $00,$78,$88,$02,$00,$58,$08,$01
 $94c3 defb $00,$10,$10,$28,$01,$00,$28,$48
 $94cb defb $02,$00,$28,$68,$01,$00,$a8,$48
 $94d3 defb $02,$00,$e0,$08,$02,$00,$10,$18
 $94db defb $08,$01,$00,$18,$68,$01,$00,$c0
 $94e3 defb $28,$02,$00,$e8,$68,$02,$00,$a0
 $94eb defb $48,$02,$00,$0c,$c8,$88,$01,$00
 $94f3 defb $0c,$58,$04,$00,$bc,$40,$03,$00
 $94fb defb $28,$68,$02,$00,$0c,$18,$04,$00
 $9503 defb $0c,$7c,$70,$04,$00,$7c,$30,$04
 $950b defb $00,$a0,$08,$01,$00,$38,$48,$01
 $9513 defb $00,$c0,$48,$02,$00,$00,$00,$00
 $951b defb $00,$00,$00,$00,$00,$00,$00,$00
 $9523 defb $00,$00,$00,$00,$00,$00,$00,$00
 $952b defb $00,$00,$00,$00,$00,$00,$00,$00
 $9533 defb $00,$00,$00,$00,$00

; Routine at 9538
;
; Used by the routines at #R$98e6, #R$a0c8, #R$a22a and #R$a2b5.
c$9538 push af       ;
 $9539 push bc       ;
 $953a push de       ;
 $953b push hl       ;
 $953c ld b,$03      ;
 $953e ld a,l        ;
 $953f cp $f1        ;
 $9541 jr c,$9544    ;
 $9543 dec b         ;
*$9544 ld c,$03      ;
 $9546 ld a,h        ;
 $9547 cp $11        ;
 $9549 jr nc,$954c   ;
 $954b dec c         ;
*$954c call $9584    ;
 $954f call $95a6    ;
*$9552 push bc       ;
 $9553 push de       ;
 $9554 push hl       ;
*$9555 ld a,(hl)     ;
 $9556 cp $09        ;
 $9558 jr c,$955e    ;
 $955a ld a,$06      ;
 $955c jr $9566      ;
*$955e add a,$4f     ;
 $9560 push bc       ;
 $9561 ld b,$98      ;
 $9563 ld c,a        ;
 $9564 ld a,(bc)     ;
 $9565 pop bc        ;
*$9566 ld (de),a     ;
 $9567 inc de        ;
 $9568 inc hl        ;
 $9569 djnz $9555    ;
 $956b pop hl        ;
 $956c ld de,$0020   ;
 $956f and a         ;
 $9570 sbc hl,de     ;
 $9572 pop de        ;
 $9573 push hl       ;
 $9574 ex de,hl      ;
 $9575 ld de,$0020   ;
 $9578 add hl,de     ;
 $9579 ex de,hl      ;
 $957a pop hl        ;
 $957b pop bc        ;
 $957c dec c         ;
 $957d jr nz,$9552   ;
 $957f pop hl        ;
 $9580 pop de        ;
 $9581 pop bc        ;
 $9582 pop af        ;
 $9583 ret           ;

; Routine at 9584
;
; Used by the routine at #R$9538.
c$9584 push af       ;
 $9585 push hl       ;
 $9586 ld a,$bf      ;
 $9588 sub h         ;
 $9589 ld h,$00      ;
 $958b ex de,hl      ;
 $958c ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $958f srl e         ;
 $9591 srl e         ;
 $9593 srl e         ;
 $9595 add hl,de     ;
 $9596 and $f8       ;
 $9598 sla a         ;
 $959a rl d          ;
 $959c sla a         ;
 $959e rl d          ;
 $95a0 ld e,a        ;
 $95a1 add hl,de     ;
 $95a2 ex de,hl      ;
 $95a3 pop hl        ;
 $95a4 pop af        ;
 $95a5 ret           ;

; Routine at 95a6
;
; Used by the routine at #R$9538.
c$95a6 push af       ;
 $95a7 push de       ;
 $95a8 ex de,hl      ;
 $95a9 ld hl,$61a8   ;
 $95ac ld a,d        ;
 $95ad ld d,$00      ;
 $95af srl e         ;
 $95b1 srl e         ;
 $95b3 srl e         ;
 $95b5 add hl,de     ;
 $95b6 and $f8       ;
 $95b8 ld e,a        ;
 $95b9 sla e         ;
 $95bb rl d          ;
 $95bd sla e         ;
 $95bf rl d          ;
 $95c1 add hl,de     ;
 $95c2 pop de        ;
 $95c3 pop af        ;
 $95c4 ret           ;

; Unused?
s$95c5 defs $6b

; Home screen/high score table text data
;
; As displayed after game load, and game over. Note: the screen is loaded
; bottom to top.
@label=home_screen
b$9630 defb $00,$00,$00,$00,$00,$00,$00,$00
 $9638 defb $00,$00,$00,$00,$00,$00,$00,$00
 $9640 defb $00,$00,$00,$00,$00,$00,$00,$00
 $9648 defb $00,$00,$00,$00
 $964c defm "by",$00,$00,"n.alderton"
 $965a defb $00,$00,$00,$00,$00,$00,$00,$00
 $9662 defb $00,$00,$00,$00,$00,$00
 $9668 defm "1",$00,"to",$00,"4",$00,"players"
 $9676 defb $00,$00,$00,$00,$00,$00,$00,$00
 $967e defb $00,$00,$00,$00,$00,$00,$00
 $9685 defm "of",$00,"skill",$00,"for"
 $9691 defb $00,$00,$00,$00,$00,$00,$00,$00
 $9699 defb $00,$00,$00,$00,$00,$00,$00,$00
 $96a1 defb $00,$00,$00
 $96a4 defm "a",$00,"game"
 $96aa defb $00,$00,$00,$00,$00,$00,$00,$00
 $96b2 defb $00,$00,$00,$00,$00,$00,$00,$00
 $96ba defb $00,$00,$00,$00,$00,$00,$00,$00
 $96c2 defb $00,$00,$00,$00,$00,$00,$00,$00
 $96ca defb $00,$00,$00,$00,$82,$80,$81,$82
 $96d2 defb $00,$82,$80,$00,$00,$00,$00,$00
 $96da defb $00,$00,$86,$00,$84,$8a,$89,$81
 $96e2 defb $84,$00,$00,$00,$00,$00,$00,$00
 $96ea defb $86,$80,$85,$82,$87,$82,$80,$7f
 $96f2 defb $00,$00,$82,$80,$80,$80,$82,$80
 $96fa defb $82,$80,$80,$81,$81,$82,$81,$82
 $9702 defb $84,$00,$86,$84,$84,$84,$84,$00
 $970a defb $86,$83,$00,$84,$89,$82,$86,$80
 $9712 defb $84,$84,$84,$84,$86,$80,$84,$85
 $971a defb $81,$86,$89,$82,$00,$00,$00,$00
 $9722 defb $00,$00,$00,$00,$00,$00,$00,$00
 $972a defb $00,$00,$00,$00,$00,$00,$00,$00
 $9732 defb $00,$00,$00,$00,$00,$00,$00,$00
 $973a defb $00,$00,$00
 $973d defm "presents"
 $9745 defb $00,$00,$00,$00,$00,$00,$00,$00
 $974d defb $00,$00,$00,$00,$00,$00,$00,$00
 $9755 defb $00
 $9756 defm "A",$00,"&",$00,"F",$00,"SOFTWARE"

; Data block at 9764
b$9764 defb $0b,$0c,$0d,$0e,$0f,$10,$11

; Data block at 976b
b$976b defb $9f

; Data block at 976c
b$976c defb $00,$00,$9b,$9c,$9d,$00

; Data block at 9772
b$9772 defb $9e

; Data block at 9773
b$9773 defb $9f

; Data block at 9774
b$9774 defb $00,$00,$1b,$1c,$1d,$00

; Data block at 977a
b$977a defb $9f

; Data block at 977b
b$977b defb $9e

; Data block at 977c
b$977c defb $9e,$9e,$00,$00,$12,$13,$14,$00

; Data block at 9784
b$9784 defb $a7

; Data block at 9785
b$9785 defb $9e,$9e

; Data block at 9787
b$9787 defb $05,$05,$ff,$00,$05,$05,$ff,$00
 $978f defb $05,$05,$ff,$00,$e8,$54,$40,$03
 $9797 defb $f2,$54,$90,$03,$f9,$54,$c8,$03
 $979f defb $ef,$54,$78,$03,$fe,$54,$f0,$03
 $97a7 defb $05,$05,$ff,$00,$6e,$73,$00,$00

; High score table with name/score columns
@label=scoreboard
t$97af defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $97bf defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $97cf defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $97df defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $97ef defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $97ff defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $980f defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $981f defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $982f defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"
 $983f defb " ",$8f,$90,$91,$92,$93,$94,$95,$96," 001000"

; Unknown/unused bytes.
b$984f defb $06,$03,$03,$07,$03,$04,$06,$07
 $9857 defb $07

; Routine at 9858
;
; Used by the routines at #R$99dc and #R$ae9c.
c$9858 ld hl,($5c3d) ; reads SYSVAR_ERR_SP
 $985b dec hl        ;
 $985c ld a,h        ;
 $985d or l          ;
*$985e jr nz,$985e   ;
 $9860 ld hl,$7370   ;
 $9863 ld a,($72dc)  ;
 $9866 and $0f       ;
 $9868 jr nz,$987e   ;
 $986a ld a,(hl)     ;
 $986b and a         ;
 $986c jr z,$987e    ;
 $986e dec (hl)      ;
 $986f and $03       ;
 $9871 jr nz,$987e   ;
 $9873 ld a,(hl)     ;
 $9874 and $1f       ;
 $9876 add a,$06     ;
 $9878 ld h,a        ;
 $9879 ld l,$02      ;
 $987b call $9ca4    ;
*$987e ld a,($7325)  ;
 $9881 and a         ;
 $9882 jr z,$98b7    ;
 $9884 ld a,($72dc)  ;
 $9887 dec a         ;
 $9888 jr nz,$9895   ;
 $988a ld l,$01      ;
 $988c ld a,($72d9)  ;
 $988f xor $ff       ;
 $9891 ld h,a        ;
 $9892 call $9ca4    ;
*$9895 ld a,($7328)  ;
 $9898 push af       ;
 $9899 call $a21c    ;
 $989c pop af        ;
 $989d dec a         ;
 $989e jr nz,$98b7   ;
 $98a0 ld hl,$7357   ;
 $98a3 ld b,$05      ;
*$98a5 ld e,(hl)     ;
 $98a6 ld a,e        ;
 $98a7 xor $ff       ;
 $98a9 jr z,$98b7    ;
 $98ab inc hl        ;
 $98ac ld d,(hl)     ;
 $98ad inc hl        ;
 $98ae inc hl        ;
 $98af inc hl        ;
 $98b0 call $9e66    ;
 $98b3 and a         ;
 $98b4 ret nz        ;
 $98b5 djnz $98a5    ;
*$98b7 ld hl,$72dc   ;
 $98ba dec (hl)      ;
 $98bb jp nz,$99dc   ;
 $98be ld (hl),$82   ;
 $98c0 ld a,$fe      ;
 $98c2 in a,($fe)    ;
 $98c4 bit 0,a       ;
 $98c6 jr nz,$98e6   ;
 $98c8 ld a,$bf      ;
 $98ca in a,($fe)    ;
 $98cc bit 4,a       ;
 $98ce jr nz,$98da   ;
*$98d0 ld a,$fd      ;
 $98d2 in a,($fe)    ;
 $98d4 bit 1,a       ;
 $98d6 jr nz,$98d0   ;
 $98d8 jr $98e6      ;
*$98da ld a,$fd      ;
 $98dc in a,($fe)    ; {Called after pressing `CAPSHIFT`, and waiting for
 $98de bit 0,a       ; keyboard A or H.
 $98e0 jr nz,$98e6   ;
 $98e2 pop hl        ;
 $98e3 jp $a410      ; }

; Routine at 98e6
;
; Used by the routine at #R$9858.
c$98e6 ld a,($7347)    ;
 $98e9 and a           ;
 $98ea jr z,$98f9      ;
 $98ec ld hl,$7345     ;
 $98ef dec (hl)        ; POKE to 0 (`NOP`) to get infinite TIME
 $98f0 jr nz,$98f9     ;
 $98f2 ld (hl),$32     ;
 $98f4 ld b,$00        ;
 $98f6 call $a1b8      ;
*$98f9 ld hl,$734c     ;
 $98fc dec (hl)        ; POKE to 0 (`NOP`) to make giant duck very slow
 $98fd jr nz,$9904     ; POKE to 24 (`JR nnnn`) to vanquish giant duck
 $98ff ld (hl),$0c     ;
 $9901 call $a0c8      ;
*$9904 ld hl,$733c     ;
 $9907 dec (hl)        ;
 $9908 jr nz,$991f     ;
 $990a ld (hl),$02     ;
 $990c call $a014      ;
 $990f ld a,($7355)    ;
 $9912 and a           ;
 $9913 jr z,$991f      ;
 $9915 ld a,($72d9)    ;
 $9918 inc a           ;
 $9919 ld ($72d9),a    ;
 $991c cp $a5          ;
 $991e ret nc          ;
*$991f call $99df      ;
 $9922 ld hl,$7346     ;
 $9925 dec (hl)        ; POKE to 0 (`NOP`) to get infinite BONUS
 $9926 jr nz,$9935     ;
 $9928 ld (hl),$0a     ;
 $992a ld b,$01        ;
 $992c call $a1b8      ;
 $992f ld hl,$0402     ;
 $9932 call $9ca4      ;
*$9935 ld hl,$736b     ;
 $9938 dec (hl)        ; POKE to `0` (NOP) to slow Ostriches
 $9939 jr nz,$9949     ;
 $993b ld c,$03        ;
 $993d ld a,($6eeb)    ;
 $9940 cp $20          ;
 $9942 jr c,$9945      ;
 $9944 dec c           ;
*$9945 ld (hl),c       ;
 $9946 call $911e      ;
*$9949 ld hl,($72d8)   ;
 $994c call $9538      ;
 $994f ld a,($7325)    ;
 $9952 and a           ;
 $9953 jr nz,$99c1     ;
@ssub=ld a,($7336+$01)
 $9955 ld a,($7337)    ; {JUMP keypress
 $9958 in a,($fe)      ;
 $995a and $1f         ;
 $995c ld c,a          ;
 $995d ld a,($7336)    ;
 $9960 or c            ;
 $9961 cp $1f          ;
 $9963 jr nz,$9975     ; }
@ssub=ld a,($7338+$01)
 $9965 ld a,($7339)    ; {key_jump_2 keypress
 $9968 in a,($fe)      ;
 $996a and $1f         ;
 $996c ld c,a          ;
 $996d ld a,($7338)    ;
 $9970 or c            ;
 $9971 cp $1f          ;
 $9973 jr z,$99c1      ; }
*$9975 ld ix,$72d8     ; {Load bytes into @72D8 + 77, 78, 79, 80, 82, and 125.
 $9979 ld (ix+$4d),$02 ;
 $997d ld (ix+$4f),$8c ;
 $9981 ld (ix+$50),$00 ;
 $9985 ld (ix+$52),$01 ;
 $9989 ld (ix+$7d),$00 ; }
 $998d ld d,$01        ;
 $998f ld e,$00        ;
@ssub=ld a,($7334+$01)
 $9991 ld a,($7335)    ; {RIGHT keypress
 $9994 in a,($fe)      ;
 $9996 and $1f         ;
 $9998 ld c,a          ;
 $9999 ld a,($7334)    ;
 $999c or c            ;
 $999d cp $1f          ;
 $999f jr nz,$99b9     ; }
 $99a1 ld d,$ff        ;
 $99a3 ld e,$04        ;
@ssub=ld a,($7332+$01)
 $99a5 ld a,($7333)    ; {LEFT keypress
 $99a8 in a,($fe)      ;
 $99aa and $1f         ;
 $99ac ld c,a          ;
 $99ad ld a,($7332)    ;
 $99b0 or c            ;
 $99b1 cp $1f          ;
 $99b3 jr nz,$99b9     ; }
 $99b5 inc d           ;
 $99b6 ld e,(ix+$03)   ;
*$99b9 ld (ix+$4e),d   ;
 $99bc ld (ix+$03),e   ;
 $99bf jr $99dc        ;
*$99c1 ld a,($7325)    ;
 $99c4 and a           ;
 $99c5 jr nz,$99d9     ;
 $99c7 call $9f60      ;
 $99ca ld a,($72db)    ;
 $99cd cp $0d          ;
 $99cf call nz,$9d08   ;
 $99d2 ld a,($7355)    ;
 $99d5 and a           ;
 $99d6 call z,$b34c    ;
*$99d9 call $9e98      ;

; Jump point
;
; Used by the routines at #R$9858 and #R$98e6.
c$99dc jp $9858      ;

; Routine at 99df
;
; Used by the routine at #R$98e6.
c$99df ld hl,($72d8) ;
 $99e2 ld a,h        ;
 $99e3 sub $08       ;
 $99e5 ld h,a        ;
 $99e6 ld a,l        ;
 $99e7 add a,$08     ;
 $99e9 ld l,a        ;
 $99ea call $9e34    ;
 $99ed cp $03        ;
 $99ef jr nz,$9a17   ;
 $99f1 ld (hl),$00   ;
 $99f3 ld a,($6eeb)  ;
 $99f6 srl a         ;
 $99f8 srl a         ;
 $99fa cp $09        ;
 $99fc jr c,$9a00    ;
 $99fe ld a,$09      ;
*$9a00 ld b,a        ;
 $9a01 inc b         ;
 $9a02 xor a         ;
*$9a03 add a,$0a     ;
 $9a05 djnz $9a03    ;
 $9a07 ld b,a        ;
 $9a08 call $a3a7    ;
 $9a0b ld a,$ff      ;
 $9a0d ld ($7370),a  ;
 $9a10 ld hl,$6ee6   ;
 $9a13 dec (hl)      ;
 $9a14 ret nz        ;
 $9a15 pop hl        ;
 $9a16 ret           ;

; Routine at 9a17
;
; Used by the routine at #R$99df.
c$9a17 cp $04        ;
 $9a19 ret nz        ;
 $9a1a ld (hl),$00   ;
 $9a1c ld b,$05      ;
 $9a1e call $a3a7    ;
 $9a21 ld hl,$ffff   ;
 $9a24 ld ($7345),hl ;
 $9a27 ld a,l        ;
 $9a28 ld ($7370),a  ;
 $9a2b ret           ;

; Unused code?
c$9a2c and e         ;
 $9a2d ld hl,$ffff   ;
 $9a30 ld ($7345),hl ;
 $9a33 ld a,l        ;
 $9a34 ld ($7370),a  ;
 $9a37 ret           ;

; Unused code?
c$9a38 dec b         ;
 $9a39 call $a3a7    ;
 $9a3c ld hl,$ffff   ;
 $9a3f ld ($7345),hl ;
 $9a42 ld a,l        ;
 $9a43 ld ($7370),a  ;
 $9a46 ret           ;

; Unused?
b$9a47 defb $00,$00,$00,$00,$00

; Fetches and draws a sprite
;
; Used by the routines at #R$9d08, #R$9e98, #R$a0c8, #R$a278 and #R$a37f.
c$9a4c push af       ;
 $9a4d push bc       ;
 $9a4e push de       ;
 $9a4f push ix       ;
 $9a51 push hl       ;
 $9a52 ld c,l        ;
 $9a53 ld hl,$8df0   ; Point #REGhl to the start of the sprites data
 $9a56 ld e,a        ;
 $9a57 xor a         ;
 $9a58 rl e          ;
 $9a5a rla           ;
 $9a5b rl e          ;
 $9a5d rla           ;
 $9a5e rl e          ;
 $9a60 rla           ;
 $9a61 rl e          ;
 $9a63 rla           ;
 $9a64 rl e          ;
 $9a66 rla           ;
 $9a67 ld d,a        ;
 $9a68 add hl,de     ;
 $9a69 ld de,$72a0   ; {Copy current sprite to the sprite_buffer
 $9a6c ld b,$10      ;
 $9a6e xor a         ;
*$9a6f ldi           ;
 $9a71 ldi           ;
 $9a73 inc bc        ;
 $9a74 inc bc        ;
 $9a75 ld (de),a     ;
 $9a76 inc de        ;
 $9a77 djnz $9a6f    ; }
 $9a79 ld a,$07      ;
 $9a7b and c         ;
 $9a7c cp $00        ;
 $9a7e jr z,$9a93    ;
*$9a80 ld b,$10      ; {Rotate bytes in the sprite_buffer...why?
 $9a82 ld hl,$72a0   ;
*$9a85 srl (hl)      ;
 $9a87 inc hl        ;
 $9a88 rr (hl)       ;
 $9a8a inc hl        ;
 $9a8b rr (hl)       ;
 $9a8d inc hl        ;
 $9a8e djnz $9a85    ;
 $9a90 dec a         ;
 $9a91 jr nz,$9a80   ; }
*$9a93 pop hl        ;
 $9a94 push hl       ;
 $9a95 ld ix,$72dd   ; Point #REGix to beginning of screen_buffer
 $9a99 ex de,hl      ;
 $9a9a ld hl,$61a8   ; Point #REGhl to beginning of level_buffer
 $9a9d ld a,d        ;
 $9a9e and $f8       ;
 $9aa0 ld b,$00      ;
 $9aa2 sla a         ;
 $9aa4 rl b          ;
 $9aa6 sla a         ;
 $9aa8 rl b          ;
 $9aaa ld c,a        ;
 $9aab add hl,bc     ;
 $9aac ld b,$00      ;
 $9aae ld c,e        ;
 $9aaf srl c         ;
 $9ab1 srl c         ;
 $9ab3 srl c         ;
 $9ab5 add hl,bc     ;
 $9ab6 ex de,hl      ;
 $9ab7 ld bc,$0303   ;
*$9aba push bc       ;
 $9abb ld hl,$84f0   ; {Point #REGhl to one of the GFX tiles (offset from
 $9abe ld a,(de)     ; gfx_tile_blank)
 $9abf ld b,$00      ;
 $9ac1 sla a         ;
 $9ac3 rl b          ;
 $9ac5 sla a         ;
 $9ac7 rl b          ;
 $9ac9 sla a         ;
 $9acb rl b          ;
 $9acd ld c,a        ;
 $9ace add hl,bc     ;
 $9acf ld b,$08      ; }
*$9ad1 ld a,(hl)     ; {Copy GFX tile data to the screen_buffer
 $9ad2 ld (ix+$00),a ;
 $9ad5 inc ix        ;
 $9ad7 inc ix        ;
 $9ad9 inc ix        ;
 $9adb inc hl        ;
 $9adc djnz $9ad1    ; }
 $9ade ld b,$17      ;
*$9ae0 dec ix        ;
 $9ae2 djnz $9ae0    ;
 $9ae4 pop bc        ;
 $9ae5 inc de        ;
 $9ae6 djnz $9aba    ;
 $9ae8 ex de,hl      ;
 $9ae9 ld de,$0023   ;
 $9aec and a         ;
 $9aed sbc hl,de     ;
 $9aef ld de,$0015   ;
 $9af2 add ix,de     ;
 $9af4 ex de,hl      ;
 $9af5 ld b,$03      ;
 $9af7 dec c         ;
 $9af8 jr nz,$9aba   ; Jump back until screen_buffer is holds all tile data.
 $9afa pop hl        ;
 $9afb push hl       ;
 $9afc ld a,h        ;
 $9afd and $07       ;
 $9aff xor $07       ;
 $9b01 ld h,a        ;
 $9b02 sla a         ;
 $9b04 add a,h       ;
 $9b05 ld c,a        ; {Copy the 48 bytes of screen_buffer to sprite_buffer,
 $9b06 ld b,$00      ; merging with the current sprite data there.
 $9b08 ld hl,$72dd   ;
 $9b0b ld de,$72a0   ;
 $9b0e add hl,bc     ;
 $9b0f ld b,$30      ;
*$9b11 ld a,(de)     ;
 $9b12 or (hl)       ;
 $9b13 ld (de),a     ;
 $9b14 inc de        ;
 $9b15 inc hl        ;
 $9b16 djnz $9b11    ; }
 $9b18 pop de        ;
 $9b19 push de       ;
 $9b1a ld hl,$4000   ; Load #REGhl with start of DISPLAY_FILE.
 $9b1d ld bc,$0800   ; Load #REGbc with value of 2048 (1/3 of screen)
 $9b20 ld a,d        ;
 $9b21 cp $80        ;
 $9b23 jr nc,$9b2b   ;
 $9b25 cp $40        ;
 $9b27 jr nc,$9b2a   ;
 $9b29 add hl,bc     ;
*$9b2a add hl,bc     ;
*$9b2b and $38       ;
 $9b2d ld c,a        ;
 $9b2e ld a,$38      ;
 $9b30 sub c         ;
 $9b31 sla a         ;
 $9b33 sla a         ;
 $9b35 ld c,a        ;
 $9b36 ld b,$00      ;
 $9b38 add hl,bc     ;
 $9b39 ld a,d        ;
 $9b3a and $07       ;
 $9b3c ld c,a        ;
 $9b3d ld a,$07      ;
 $9b3f sub c         ;
 $9b40 ld d,a        ;
 $9b41 srl e         ;
 $9b43 srl e         ;
 $9b45 srl e         ;
 $9b47 add hl,de     ;
 $9b48 ex de,hl      ;
 $9b49 ld b,$10      ;
 $9b4b ld hl,$72a0   ;
*$9b4e ld a,(hl)     ; {Draw sprite to screen
 $9b4f ld (de),a     ;
 $9b50 inc hl        ;
 $9b51 inc e         ;
 $9b52 ld a,(hl)     ;
 $9b53 ld (de),a     ;
 $9b54 inc hl        ;
 $9b55 inc e         ;
 $9b56 ld a,(hl)     ;
 $9b57 ld (de),a     ;
 $9b58 inc hl        ;
 $9b59 dec e         ;
 $9b5a dec e         ;
 $9b5b inc d         ;
 $9b5c ld a,d        ;
 $9b5d and $07       ;
 $9b5f jr nz,$9b6f   ;
 $9b61 ld a,d        ;
 $9b62 sub $08       ;
 $9b64 ld d,a        ;
 $9b65 ld a,e        ;
 $9b66 add a,$20     ;
 $9b68 ld e,a        ;
 $9b69 jr nc,$9b6f   ;
 $9b6b ld a,d        ;
 $9b6c add a,$08     ;
 $9b6e ld d,a        ;
*$9b6f djnz $9b4e    ; }
 $9b71 pop hl        ;
 $9b72 push hl       ;
 $9b73 ld c,$03      ;
 $9b75 ld a,l        ;
 $9b76 cp $f1        ;
 $9b78 jr c,$9b7b    ;
 $9b7a dec c         ;
*$9b7b ld b,$03      ;
 $9b7d ld a,h        ;
 $9b7e and $07       ;
 $9b80 xor $07       ;
 $9b82 jr z,$9b89    ;
 $9b84 ld a,h        ;
 $9b85 cp $11        ;
 $9b87 jr nc,$9b8a   ;
*$9b89 dec b         ;
*$9b8a call $9bde    ;
 $9b8d ld de,$0020   ;
*$9b90 ld ixl,c      ; {Update sprite colours to $06: INK=yellow, PAPER=black,
 $9b92 push hl       ; BRIGHT=0.
*$9b93 ld (hl),$06   ;
 $9b95 inc hl        ;
 $9b96 dec ixl       ;
 $9b98 jr nz,$9b93   ;
 $9b9a pop hl        ;
 $9b9b add hl,de     ;
 $9b9c djnz $9b90    ; }
 $9b9e ld hl,$7348   ;
 $9ba1 ld a,($72d8)  ;
 $9ba4 add a,$08     ;
 $9ba6 jr nc,$9baa   ;
 $9ba8 ld a,$ff      ;
*$9baa cp (hl)       ;
 $9bab jr c,$9bd7    ;
 $9bad sub $10       ;
 $9baf jr nc,$9bb2   ;
 $9bb1 xor a         ;
*$9bb2 cp (hl)       ;
 $9bb3 jr nc,$9bd7   ;
 $9bb5 inc hl        ;
 $9bb6 ld a,($72d9)  ;
 $9bb9 add a,$09     ;
 $9bbb cp (hl)       ;
 $9bbc jr c,$9bd7    ;
 $9bbe sub $12       ;
 $9bc0 jr nc,$9bc3   ;
 $9bc2 xor a         ;
*$9bc3 cp (hl)       ;
 $9bc4 jr nc,$9bd7   ;
 $9bc6 ld b,$05      ;
*$9bc8 pop hl        ;
 $9bc9 djnz $9bc8    ;
@keep
 $9bcb ld bc,$a410   ;
*$9bce pop hl        ;
 $9bcf push hl       ;
 $9bd0 and a         ;
 $9bd1 sbc hl,bc     ;
 $9bd3 ret nc        ;
 $9bd4 pop hl        ;
 $9bd5 jr $9bce      ;
*$9bd7 pop hl        ;
 $9bd8 pop ix        ;
 $9bda pop de        ;
 $9bdb pop bc        ;
 $9bdc pop af        ;
 $9bdd ret           ;

; Calculates current position of sprite in ATTRIBUTE_FILE.
;
; Used by the routine at #R$9a4c.
@label=SpritePositionInAttrFile
c$9bde push af       ;
 $9bdf push de       ;
 $9be0 ld a,$bf      ;
 $9be2 sub h         ;
 $9be3 ld h,$00      ;
 $9be5 ex de,hl      ;
 $9be6 ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $9be9 srl e         ;
 $9beb srl e         ;
 $9bed srl e         ;
 $9bef add hl,de     ;
 $9bf0 and $f8       ;
 $9bf2 sla a         ;
 $9bf4 rl d          ;
 $9bf6 sla a         ;
 $9bf8 rl d          ;
 $9bfa ld e,a        ;
 $9bfb add hl,de     ;
 $9bfc pop de        ;
 $9bfd pop af        ;
 $9bfe ret           ;

; Unused
s$9bff defs $41

; Called when needing to draw a level...works on 1/3 of screen at a time?
;
; Used by the routines at #R$a3a7, #R$a420, #R$a47d, #R$a4c8, #R$a515, #R$a59d,
; #R$a828, #R$a9ce, #R$aa49, #R$ab19, #R$abad and #R$ae9c.
@label=UpdateScreenGfx
c$9c40 nop           ; {Why are these NOPs? Are they ever changed?
 $9c41 nop           ;
 $9c42 nop           ;
 $9c43 nop           ; }
 $9c44 push hl       ; {Backup 16-bit registers.
 $9c45 push bc       ;
 $9c46 push de       ;
 $9c47 push af       ; }
 $9c48 ld a,h        ; #REGa=screen section: $08=2/3, $10=3/3, else 1/3.
 $9c49 ex de,hl      ; Backup #REGhl to #REGde#REGhl
 $9c4a ld hl,$4000   ; point #REGhl to start of DISPLAY
 $9c4d ld bc,$0800   ; load #REGbc with 2048 - one third of a screen
 $9c50 cp $10        ; {Update 1/3 of screen?
 $9c52 jr nc,$9c5a   ; }
 $9c54 cp $08        ; {Update 2/3 of screen?
 $9c56 jr nc,$9c59   ; }
 $9c58 add hl,bc     ; Update 3/3 of screen.
*$9c59 add hl,bc     ;
*$9c5a and $07       ;
 $9c5c xor $07       ;
 $9c5e sla a         ;
 $9c60 sla a         ;
 $9c62 sla a         ;
 $9c64 sla a         ;
 $9c66 sla a         ;
 $9c68 ld c,a        ;
 $9c69 ld b,$00      ;
 $9c6b add hl,bc     ;
 $9c6c ld c,e        ;
 $9c6d add hl,bc     ;
 $9c6e pop af        ;
 $9c6f push af       ;
 $9c70 ld c,a        ;
 $9c71 xor a         ;
 $9c72 sla c         ;
 $9c74 rla           ;
 $9c75 sla c         ;
 $9c77 rla           ;
 $9c78 sla c         ;
 $9c7a rla           ;
 $9c7b ld b,a        ;
 $9c7c ex de,hl      ; Restore #REGhl with value in #REGde
 $9c7d ld hl,$84f0   ; {set #REGhl to gfx_tile_blank, then update this section
 $9c80 add hl,bc     ; of the screen (address of #REGde) with all GFX tiles.
 $9c81 ld b,$08      ;
*$9c83 ld a,(hl)     ;
 $9c84 ld (de),a     ;
 $9c85 inc hl        ;
 $9c86 inc d         ;
 $9c87 djnz $9c83    ; }
 $9c89 pop af        ; {Restore 16-bit registers and RETurn
 $9c8a pop de        ;
 $9c8b pop bc        ;
 $9c8c pop hl        ; }
 $9c8d ret           ;

; Unused code? Same as last 3 instructions of previous routine, at 9C8B.
c$9c8e pop bc        ;
 $9c8f pop hl        ;
 $9c90 ret           ;

; Unused
s$9c91 defs $0b

; INTERUPT jump point
c$9c9c jp $9cc2      ;

; Unused
s$9c9f defs $05

; This routine produces a sound, formed of a square wave.
;
; Used by the routines at #R$9858, #R$98e6, #R$9d08, #R$9e98 and #R$a62c.
@label=SoundSquareWave
c$9ca4 ld a,$10      ;
 $9ca6 out ($fe),a   ;
 $9ca8 ld b,h        ;
*$9ca9 djnz $9ca9    ;
 $9cab xor a         ;
 $9cac out ($fe),a   ;
 $9cae ld b,h        ;
*$9caf djnz $9caf    ;
 $9cb1 dec l         ;
 $9cb2 jr nz,$9ca4   ;
 $9cb4 ret           ;

; Unused
s$9cb5 defs $0d

; Called from an INTERUPT, and basically every game loop?
;
; Used by the routine at #R$9c9c.
c$9cc2 push af       ;
 $9cc3 push hl       ;
 $9cc4 ld a,($7373)  ;
 $9cc7 cp $ff        ;
 $9cc9 jr z,$9ce6    ;
 $9ccb dec a         ;
 $9ccc jr z,$9cd3    ;
 $9cce ld ($7373),a  ;
 $9cd1 jr $9ce6      ;
*$9cd3 ld hl,($7374) ;
 $9cd6 ld a,(hl)     ;
 $9cd7 ld ($7373),a  ;
 $9cda cp $ff        ;
 $9cdc jr z,$9ce6    ;
 $9cde inc hl        ;
 $9cdf ld a,(hl)     ;
 $9ce0 out ($9f),a   ;
 $9ce2 inc hl        ;
 $9ce3 ld ($7374),hl ;
*$9ce6 pop hl        ;
 $9ce7 ei            ;
 $9ce8 pop af        ;
 $9ce9 reti          ;

; Get address value from the address_lookup_table
;
; Used by the routines at #R$a389, #R$a420, #R$a4c8, #R$a62c, #R$a828, #R$aae4
; and #R$b14f.
@label=GetLookupTableAddress
c$9ceb ld b,a        ; Current known values for #REGa are between $01 and $21.
 $9cec ld a,($7373)  ;
 $9cef cp $ff        ;
 $9cf1 ret nz        ;
@ssub=ld hl,$c8c8-$02 ; Point #REGhl to address_lookup_table - 2 bytes
 $9cf2 ld hl,$c8c6   ;
*$9cf5 inc hl        ; {Increment #REGhl until we get the desired address.
 $9cf6 inc hl        ;
 $9cf7 djnz $9cf5    ; }
 $9cf9 ld e,(hl)     ; {Load #REGde with address from lookup table
 $9cfa inc hl        ;
 $9cfb ld d,(hl)     ; }
 $9cfc ld ($7374),de ; Save address to 7374
 $9d00 ld a,$01      ;
 $9d02 ld ($7373),a  ; Set 7373 to $01
 $9d05 ret           ;

; Unused
s$9d06 defs $02

; Routine at 9d08
;
; Used by the routine at #R$98e6.
c$9d08 ld ix,$72d8     ;
 $9d0c ld hl,($72d8)   ;
 $9d0f ld a,($72db)    ;
 $9d12 and a           ;
 $9d13 jr nz,$9d16     ;
 $9d15 dec l           ;
*$9d16 ex de,hl        ;
 $9d17 ld hl,$61a8     ;
 $9d1a ld a,d          ;
 $9d1b and $f8         ;
 $9d1d ld b,$00        ;
 $9d1f sla a           ;
 $9d21 rl b            ;
 $9d23 sla a           ;
 $9d25 rl b            ;
 $9d27 ld c,a          ;
 $9d28 add hl,bc       ;
 $9d29 ld b,$00        ;
 $9d2b ld c,e          ;
 $9d2c srl c           ;
 $9d2e srl c           ;
 $9d30 srl c           ;
 $9d32 add hl,bc       ;
 $9d33 ld bc,$0020     ;
@ssub=ld a,($7332+$01)
 $9d36 ld a,($7333)    ; {LEFT keypress
 $9d39 in a,($fe)      ;
 $9d3b and $1f         ;
 $9d3d ld d,a          ;
 $9d3e ld a,($7332)    ;
 $9d41 or d            ;
 $9d42 cp $1f          ;
 $9d44 jr z,$9d6f      ; }
 $9d46 ld a,($72d8)    ;
 $9d49 dec a           ;
 $9d4a jr z,$9dab      ;
 $9d4c ld a,(hl)       ;
 $9d4d cp $05          ;
 $9d4f jr nc,$9dab     ;
 $9d51 and a           ;
 $9d52 sbc hl,bc       ;
 $9d54 ld a,(hl)       ;
 $9d55 cp $05          ;
 $9d57 jr nc,$9dab     ;
 $9d59 dec (ix+$00)    ;
 $9d5c ld (ix+$03),$04 ;
 $9d60 ld a,($72d8)    ;
 $9d63 and $03         ;
 $9d65 jr nz,$9d6d     ;
 $9d67 ld hl,$2805     ;
 $9d6a call $9ca4      ;
*$9d6d jr $9daf        ;
@ssub=ld a,($7334+$01)
*$9d6f ld a,($7335)    ; {RIGHT keypress
 $9d72 in a,($fe)      ;
 $9d74 and $1f         ;
 $9d76 ld d,a          ;
 $9d77 ld a,($7334)    ;
 $9d7a or d            ;
 $9d7b cp $1f          ;
 $9d7d jr z,$9dab      ; }
 $9d7f ld a,($72d8)    ;
 $9d82 cp $ee          ;
 $9d84 jr nc,$9dab     ;
 $9d86 inc hl          ;
 $9d87 inc hl          ;
 $9d88 ld a,(hl)       ;
 $9d89 cp $05          ;
 $9d8b jr nc,$9dab     ;
 $9d8d and a           ;
 $9d8e sbc hl,bc       ;
 $9d90 ld a,(hl)       ;
 $9d91 cp $05          ;
 $9d93 jr nc,$9dab     ;
 $9d95 inc (ix+$00)    ;
 $9d98 ld (ix+$03),$00 ;
 $9d9c ld a,($72d8)    ;
 $9d9f and $03         ;
 $9da1 jr nz,$9da9     ;
 $9da3 ld hl,$2806     ;
 $9da6 call $9ca4      ;
*$9da9 jr $9daf        ;
*$9dab ld (ix+$02),$03 ;
*$9daf ld hl,($72d8)   ;
 $9db2 ld a,($72da)    ;
 $9db5 inc a           ;
 $9db6 and $03         ;
 $9db8 ld ($72da),a    ;
 $9dbb add a,(ix+$03)  ;
 $9dbe call $9a4c      ;
 $9dc1 ld a,($7355)    ;
 $9dc4 and a           ;
 $9dc5 ret z           ;
 $9dc6 ld a,($7350)    ;
 $9dc9 xor $ff         ;
 $9dcb ret z           ;
 $9dcc xor $ff         ;
 $9dce sub $09         ;
 $9dd0 ld b,a          ;
 $9dd1 ld a,($72d8)    ;
 $9dd4 cp b            ;
 $9dd5 jr c,$9ddb      ;
 $9dd7 sub $13         ;
 $9dd9 cp b            ;
 $9dda ret c           ;
*$9ddb ld (ix+$4d),$01 ;
 $9ddf ld d,$ff        ;
 $9de1 ld a,($72db)    ;
 $9de4 and a           ;
 $9de5 jr nz,$9de9     ;
 $9de7 ld d,$01        ;
*$9de9 ld (ix+$4e),d   ;
 $9dec ld (ix+$4f),$04 ;
 $9df0 ret             ;

; Unused
s$9df1 defs $43

; Routine at 9e34
;
; Used by the routines at #R$9265, #R$93fe, #R$9438, #R$99df, #R$a30c and
; #R$b34c.
c$9e34 push de       ;
 $9e35 push bc       ;
 $9e36 ex de,hl      ;
 $9e37 ld hl,$61a8   ;
 $9e3a ld a,d        ;
 $9e3b and $f8       ;
 $9e3d ld b,$00      ;
 $9e3f sla a         ;
 $9e41 rl b          ;
 $9e43 sla a         ;
 $9e45 rl b          ;
 $9e47 ld c,a        ;
 $9e48 add hl,bc     ;
 $9e49 ld b,$00      ;
 $9e4b ld c,e        ;
 $9e4c srl c         ;
 $9e4e srl c         ;
 $9e50 srl c         ;
 $9e52 add hl,bc     ;
 $9e53 ld a,(hl)     ;
 $9e54 pop bc        ;
 $9e55 pop de        ;
 $9e56 ret           ;

; Unused code?
c$9e57 pop hl        ;
 $9e58 ret           ;

; Unused
s$9e59 defs $0d

; Farmer jumping/falling routine
;
; Used by the routine at #R$9858.
@label=FarmerVerticalMovement
c$9e66 push hl       ;
 $9e67 ld hl,$72d8   ;
 $9e6a ld a,e        ;
 $9e6b add a,$01     ;
 $9e6d jr c,$9e8a    ;
 $9e6f add a,$04     ;
 $9e71 cp (hl)       ;
 $9e72 jr c,$9e8a    ;
 $9e74 sub $0d       ;
 $9e76 jr nc,$9e79   ;
 $9e78 xor a         ;
*$9e79 cp (hl)       ;
 $9e7a jr nc,$9e8a   ;
 $9e7c inc hl        ;
 $9e7d ld a,d        ;
 $9e7e cp (hl)       ;
 $9e7f jr nc,$9e8a   ;
 $9e81 add a,$1c     ;
 $9e83 cp (hl)       ;
 $9e84 jr c,$9e8a    ;
 $9e86 ld a,$01      ;
 $9e88 pop hl        ;
 $9e89 ret           ;

; Reset mid-air farmer routine
;
; Used by the routine at #R$9e66.
c$9e8a xor a         ;
 $9e8b pop hl        ;
 $9e8c ret           ;

; Unused
s$9e8d defs $0b

; Routine at 9e98
;
; Used by the routine at #R$98e6.
c$9e98 ld ix,$72d8     ;
 $9e9c ld a,(ix+$00)   ;
 $9e9f and $07         ;
 $9ea1 ret nz          ;
 $9ea2 ld hl,($72d8)   ;
 $9ea5 inc h           ;
 $9ea6 ex de,hl        ;
 $9ea7 ld hl,$61a8     ;
 $9eaa ld b,$00        ;
 $9eac ld a,d          ;
 $9ead and $f8         ;
 $9eaf sla a           ;
 $9eb1 rl b            ;
 $9eb3 sla a           ;
 $9eb5 rl b            ;
 $9eb7 ld c,a          ;
 $9eb8 add hl,bc       ;
 $9eb9 ld b,$00        ;
 $9ebb ld c,e          ;
 $9ebc srl c           ;
 $9ebe srl c           ;
 $9ec0 srl c           ;
 $9ec2 add hl,bc       ;
 $9ec3 ld a,(hl)       ;
 $9ec4 dec a           ;
 $9ec5 jr nz,$9eed     ;
@ssub=ld a,($732e+$01)
 $9ec7 ld a,($732f)    ; {UP keypress
 $9eca in a,($fe)      ;
 $9ecc and $1f         ;
 $9ece ld c,a          ;
 $9ecf ld a,($732e)    ;
 $9ed2 or c            ;
 $9ed3 cp $1f          ;
 $9ed5 jr z,$9eed      ;
 $9ed7 ld (ix+$03),$0d ;
 $9edb inc (ix+$01)    ;
 $9ede ld a,($72d9)    ;
 $9ee1 and $03         ;
 $9ee3 jr nz,$9eeb     ;
 $9ee5 ld hl,$1e14     ;
 $9ee8 call $9ca4      ;
*$9eeb jr $9f25        ;
*$9eed ld bc,$0040     ;
 $9ef0 and a           ;
 $9ef1 sbc hl,bc       ;
 $9ef3 ld bc,$0020     ;
 $9ef6 ld a,d          ;
 $9ef7 and $07         ;
 $9ef9 jr nz,$9efd     ;
 $9efb sbc hl,bc       ;
*$9efd ld a,(hl)       ;
 $9efe dec a           ;
 $9eff jr nz,$9f32     ; }
@ssub=ld a,($7330+$01)
 $9f01 ld a,($7331)    ; {DOWN keypress
 $9f04 in a,($fe)      ;
 $9f06 and $1f         ;
 $9f08 ld c,a          ;
 $9f09 ld a,($7330)    ;
 $9f0c or c            ;
 $9f0d cp $1f          ;
 $9f0f jr z,$9f32      ;
 $9f11 ld (ix+$03),$0d ;
 $9f15 dec (ix+$01)    ;
 $9f18 ld a,($72d9)    ;
 $9f1b and $03         ;
 $9f1d jr nz,$9f25     ;
 $9f1f ld hl,$1e15     ;
 $9f22 call $9ca4      ;
*$9f25 ld a,(ix+$02)   ;
 $9f28 inc a           ;
 $9f29 and $03         ;
 $9f2b ld (ix+$02),a   ;
 $9f2e ld (ix+$4d),$00 ;
*$9f32 ld hl,($72d8)   ;
 $9f35 ld a,(ix+$02)   ;
 $9f38 add a,(ix+$03)  ;
 $9f3b call $9a4c      ;
 $9f3e ret             ; }

; Unused
s$9f3f defs $21

; Routine at 9f60
;
; Used by the routine at #R$98e6.
c$9f60 ld a,($72d9)  ;
 $9f63 inc a         ;
 $9f64 and $07       ;
 $9f66 ret nz        ;
 $9f67 ld hl,($72d8) ;
 $9f6a ex de,hl      ;
 $9f6b ld hl,$61a8   ;
 $9f6e ld a,d        ;
 $9f6f and $f8       ;
 $9f71 ld b,$00      ;
 $9f73 sla a         ;
 $9f75 rl b          ;
 $9f77 sla a         ;
 $9f79 rl b          ;
 $9f7b ld c,a        ;
 $9f7c add hl,bc     ;
 $9f7d ld b,$00      ;
 $9f7f ld c,e        ;
 $9f80 srl c         ;
 $9f82 srl c         ;
 $9f84 srl c         ;
 $9f86 add hl,bc     ;
 $9f87 ld bc,$0020   ;
@ssub=ld a,($7332+$01)
 $9f8a ld a,($7333)  ; {LEFT keypress
 $9f8d in a,($fe)    ;
 $9f8f and $1f       ;
 $9f91 ld d,a        ;
 $9f92 ld a,($7332)  ;
 $9f95 or d          ;
 $9f96 cp $1f        ;
 $9f98 jr z,$9fb5    ;
 $9f9a dec hl        ;
 $9f9b ld a,(hl)     ;
 $9f9c cp $05        ;
 $9f9e ret nc        ; }
 $9f9f and a         ;
 $9fa0 sbc hl,bc     ;
 $9fa2 ld a,(hl)     ;
 $9fa3 cp $05        ;
 $9fa5 ret nc        ;
 $9fa6 and a         ;
 $9fa7 sbc hl,bc     ;
 $9fa9 ld a,(hl)     ;
 $9faa and a         ;
 $9fab ret z         ;
 $9fac cp $09        ;
 $9fae ret nc        ;
 $9faf ld a,$04      ;
 $9fb1 ld ($72db),a  ;
 $9fb4 ret           ;

; Routine at 9fb5
;
; Used by the routine at #R$9f60.
@ssub=ld a,($7334+$01)
c$9fb5 ld a,($7335)  ; {RIGHT keypress
 $9fb8 in a,($fe)    ;
 $9fba and $1f       ;
 $9fbc ld d,a        ;
 $9fbd ld a,($7334)  ;
 $9fc0 or d          ;
 $9fc1 cp $1f        ;
 $9fc3 ret z         ; }
 $9fc4 inc hl        ;
 $9fc5 inc hl        ;
 $9fc6 ld a,(hl)     ;
 $9fc7 cp $05        ;
 $9fc9 ret nc        ;
 $9fca and a         ;
 $9fcb sbc hl,bc     ;
 $9fcd ld a,(hl)     ;
 $9fce cp $05        ;
 $9fd0 ret nc        ;
 $9fd1 and a         ;
 $9fd2 sbc hl,bc     ;
 $9fd4 ld a,(hl)     ;
 $9fd5 and a         ;
 $9fd6 ret z         ;
 $9fd7 cp $09        ;
 $9fd9 ret nc        ;
 $9fda xor a         ;
 $9fdb ld ($72db),a  ;
 $9fde ret           ;

; Unused
s$9fdf defs $35

; Routine at a014
;
; Used by the routine at #R$98e6.
c$a014 ld a,($7350)  ;
 $a017 xor $ff       ;
 $a019 ret z         ;
 $a01a ld ix,$72d8   ;
 $a01e ld hl,($734e) ;
 $a021 ld c,$00      ;
 $a023 call $a07b    ;
 $a026 ld a,($7351)  ;
 $a029 inc a         ;
 $a02a cp $a6        ;
 $a02c jr c,$a03b    ;
 $a02e ld hl,$9787   ;
 $a031 ld bc,$0004   ;
 $a034 ld de,$734e   ;
 $a037 ldir          ;
 $a039 ld a,$03      ;
*$a03b ld ($7351),a  ;
 $a03e ld hl,($734e) ;
 $a041 call $a0a9    ;
 $a044 ld ($734e),hl ;
 $a047 ld c,$ff      ;
 $a049 call $a07b    ;
 $a04c ld hl,($7352) ;
 $a04f ld c,$00      ;
 $a051 call $a07b    ;
 $a054 ld a,($7354)  ;
 $a057 inc a         ;
 $a058 cp $a6        ;
 $a05a jr c,$a069    ;
 $a05c ld hl,$9787   ;
 $a05f ld bc,$0003   ;
 $a062 ld de,$7352   ;
 $a065 ldir          ;
 $a067 ld a,$03      ;
*$a069 ld ($7354),a  ;
 $a06c ld hl,($7352) ;
 $a06f call $a0a9    ;
 $a072 ld ($7352),hl ;
 $a075 ld c,$ff      ;
 $a077 call $a07b    ;
 $a07a ret           ;

; Draw the elevator platforms?
;
; Used by the routine at #R$a014.
@label=ElevatorPlatformDraw
c$a07b push hl       ;
 $a07c dec hl        ;
 $a07d ld (hl),$00   ;
 $a07f inc hl        ;
 $a080 inc hl        ;
 $a081 inc hl        ;
 $a082 ld a,l        ;
 $a083 and $1f       ;
 $a085 jr z,$a089    ;
 $a087 ld (hl),$00   ;
*$a089 pop hl        ;
 $a08a ld b,$04      ;
*$a08c ld (hl),c     ;
 $a08d inc l         ;
 $a08e ld (hl),c     ;
 $a08f dec l         ;
 $a090 call $a096    ;
 $a093 djnz $a08c    ;
 $a095 ret           ;

; Calculate position of next platform?
;
; Used by the routine at #R$a07b.
@label=ElevatorPlatformCalculatePos
c$a096 inc h         ;
 $a097 ld a,h        ;
 $a098 and $07       ;
 $a09a ret nz        ;
 $a09b ld a,h        ;
 $a09c sub $08       ;
 $a09e ld h,a        ;
 $a09f ld a,l        ;
 $a0a0 add a,$20     ;
 $a0a2 ld l,a        ;
 $a0a3 ret nc        ;
 $a0a4 ld a,h        ;
 $a0a5 add a,$08     ;
 $a0a7 ld h,a        ;
 $a0a8 ret           ;

; Calculations related to elevator position?
;
; Used by the routine at #R$a014.
@label=ElevatorCalculatePos
c$a0a9 dec h         ;
 $a0aa ld a,h        ;
 $a0ab and $07       ;
 $a0ad cp $07        ;
 $a0af jr nz,$a0bf   ;
 $a0b1 ld a,h        ;
 $a0b2 add a,$08     ;
 $a0b4 ld h,a        ;
 $a0b5 ld a,l        ;
 $a0b6 sub $20       ;
 $a0b8 ld l,a        ;
 $a0b9 jr nc,$a0bf   ;
 $a0bb ld a,h        ;
 $a0bc sub $08       ;
 $a0be ld h,a        ;
*$a0bf ret           ;

; Unused code?
;
; Note same as last instructions of previous routine
c$a0c0 ld a,h        ;
 $a0c1 sub $08       ;
 $a0c3 ld h,a        ;
 $a0c4 ret           ;

; Unused bytes/code?
b$a0c5 defb $73,$21,$ce

; Could be giant duck code or another elevator related routine, called after
; bigger movement of platform.
;
; Used by the routine at #R$98e6.
c$a0c8 ld ix,$72d8     ;
 $a0cc ld a,($7348)    ;
 $a0cf cp (ix+$00)     ;
 $a0d2 jr z,$a0ed      ;
 $a0d4 jr c,$a0e1      ;
 $a0d6 ld a,($734a)    ;
 $a0d9 dec a           ;
 $a0da cp $fa          ;
 $a0dc jr nz,$a0df     ;
 $a0de inc a           ;
*$a0df jr $a0ea        ;
*$a0e1 ld a,($734a)    ;
 $a0e4 inc a           ;
 $a0e5 cp $06          ;
 $a0e7 jr nz,$a0ea     ;
 $a0e9 dec a           ;
*$a0ea ld ($734a),a    ;
*$a0ed ld a,($7349)    ;
 $a0f0 cp (ix+$01)     ;
 $a0f3 jr z,$a10e      ;
 $a0f5 jr c,$a102      ;
 $a0f7 ld a,($734b)    ;
 $a0fa dec a           ;
 $a0fb cp $fa          ;
 $a0fd jr nz,$a100     ;
 $a0ff inc a           ;
*$a100 jr $a10b        ;
*$a102 ld a,($734b)    ;
 $a105 inc a           ;
 $a106 cp $06          ;
 $a108 jr nz,$a10b     ;
 $a10a dec a           ;
*$a10b ld ($734b),a    ;
*$a10e ld hl,($7348)   ;
 $a111 ld a,$0c        ;
 $a113 call $9a4c      ;
 $a116 call $9538      ;
 $a119 ld a,($7348)    ;
 $a11c bit 7,(ix+$72)  ;
 $a120 jr nz,$a135     ;
 $a122 add a,(ix+$72)  ;
 $a125 cp $ee          ;
 $a127 jr c,$a144      ;
 $a129 sub (ix+$72)    ;
 $a12c sub (ix+$72)    ;
 $a12f ld (ix+$72),$fb ;
 $a133 jr $a144        ;
*$a135 add a,(ix+$72)  ;
 $a138 jr c,$a144      ;
 $a13a sub (ix+$72)    ;
 $a13d sub (ix+$72)    ;
 $a140 ld (ix+$72),$05 ;
*$a144 ld ($7348),a    ;
 $a147 ld a,($7349)    ;
 $a14a add a,(ix+$73)  ;
 $a14d cp $a6          ;
 $a14f jr c,$a15d      ;
 $a151 sub (ix+$73)    ;
 $a154 sub (ix+$73)    ;
 $a157 ld (ix+$73),$fb ;
 $a15b jr $a16b        ;
*$a15d cp $14          ;
 $a15f jr nc,$a16b     ;
 $a161 sub (ix+$73)    ;
 $a164 sub (ix+$73)    ;
 $a167 ld (ix+$73),$05 ;
*$a16b ld ($7349),a    ;
 $a16e ld a,($6eeb)    ;
 $a171 cp $08          ;
 $a173 jr nc,$a17b     ;
 $a175 ld hl,$9808     ;
 $a178 ld ($7348),hl   ;
*$a17b ld hl,($7348)   ;
 $a17e ld c,$08        ;
 $a180 ld a,($72d8)    ;
 $a183 cp (ix+$70)     ;
 $a186 jr nc,$a18a     ;
 $a188 ld c,$0a        ;
*$a18a ld a,c          ;
 $a18b add a,(ix+$75)  ;
 $a18e call $9a4c      ;
 $a191 ld a,($734d)    ;
 $a194 xor $01         ;
 $a196 ld ($734d),a    ;
 $a199 ret             ;

; Unused
s$a19a defs $1e

; Routine at a1b8
;
; Used by the routines at #R$98e6 and #R$a62c.
c$a1b8 ld hl,$7341   ;
 $a1bb ld de,$0003   ;
 $a1be inc b         ;
 $a1bf dec b         ;
 $a1c0 jr z,$a1c3    ;
 $a1c2 add hl,de     ;
*$a1c3 ld a,$ff      ;
 $a1c5 ld d,$03      ;
; This entry point is used by the routine at #R$a1d9.
*$a1c7 dec (hl)      ;
 $a1c8 cp (hl)       ;
 $a1c9 jr nz,$a1de   ;
 $a1cb dec d         ;
 $a1cc jr nz,$a1d9   ;
 $a1ce pop hl        ;
 $a1cf inc b         ;
 $a1d0 dec b         ;
 $a1d1 ret nz        ;
 $a1d2 push hl       ;
 $a1d3 ld hl,$7347   ;
 $a1d6 ld (hl),$00   ;
 $a1d8 ret           ;

; Routine at a1d9
;
; Used by the routine at #R$a1b8.
c$a1d9 ld (hl),$09   ;
 $a1db dec hl        ;
 $a1dc jr $a1c7      ;
; This entry point is used by the routine at #R$a1b8.
*$a1de ld de,$000a   ;
 $a1e1 ld hl,$4053   ;
 $a1e4 inc b         ;
 $a1e5 dec b         ;
 $a1e6 jr z,$a1e9    ;
 $a1e8 add hl,de     ;
*$a1e9 ex de,hl      ;
 $a1ea ld hl,$733f   ;
 $a1ed inc b         ;
 $a1ee dec b         ;
 $a1ef jr z,$a1f4    ;
 $a1f1 inc hl        ;
 $a1f2 inc hl        ;
 $a1f3 inc hl        ;
*$a1f4 push hl       ;
 $a1f5 pop bc        ;
 $a1f6 ld ixl,$03    ;
*$a1f9 push de       ;
 $a1fa ld a,(bc)     ;
 $a1fb sla a         ;
 $a1fd sla a         ;
 $a1ff sla a         ;
 $a201 ld hl,$89e0   ; {Display a number from font_numbers_bold
 $a204 push bc       ;
 $a205 ld b,$00      ;
 $a207 ld c,a        ;
 $a208 add hl,bc     ;
 $a209 ld b,$08      ;
*$a20b ld a,(hl)     ;
 $a20c ld (de),a     ;
 $a20d inc d         ;
 $a20e inc l         ;
 $a20f djnz $a20b    ; }
 $a211 pop bc        ;
 $a212 pop de        ;
 $a213 inc de        ;
 $a214 inc bc        ;
 $a215 dec ixl       ;
 $a217 jr nz,$a1f9   ;
 $a219 ret           ;

; Unused code/bytes? (code would be a RET)
b$a21a defb $c9,$00

; Farmer jumping/falling related routine.
;
; Used by the routine at #R$9858.
c$a21c ld a,($72dc)  ;
 $a21f dec a         ;
 $a220 jr z,$a22a    ;
 $a222 ld a,($7325)  ;
 $a225 dec a         ;
 $a226 jp nz,$a2b5   ;
 $a229 ret           ;

; Farmer jumping/falling related routine.
;
; Used by the routine at #R$a21c.
c$a22a ld hl,($72d8)   ;
 $a22d call $9538      ;
 $a230 ld a,l          ;
 $a231 add a,(ix+$4e)  ;
 $a234 ld ($72d8),a    ;
 $a237 and a           ;
 $a238 jr nz,$a240     ;
 $a23a ld (ix+$4e),$01 ;
 $a23e jr $a248        ;
*$a240 cp $ee          ;
 $a242 jr c,$a248      ;
 $a244 ld (ix+$4e),$ff ;
*$a248 ld hl,$7351     ;
 $a24b call $a256      ;
 $a24e ld hl,$7354     ;
 $a251 call $a256      ;
 $a254 jr $a294        ;

; Farmer jumping/falling related routine.
;
; Used by the routine at #R$a22a.
c$a256 ld a,($7350)  ;
 $a259 xor $ff       ;
 $a25b ret z         ;
 $a25c xor $ff       ;
 $a25e sub $09       ;
 $a260 ld b,a        ;
 $a261 ld a,($72d8)  ;
 $a264 cp b          ;
 $a265 ret c         ;
 $a266 sub $13       ;
 $a268 cp b          ;
 $a269 ret nc        ;
 $a26a ld b,$06      ;
 $a26c ld a,(hl)     ;
 $a26d add a,$10     ;
*$a26f dec a         ;
 $a270 cp (ix+$01)   ;
 $a273 jr z,$a278    ;
 $a275 djnz $a26f    ;
 $a277 ret           ;

; Farmer lands on a platform?
;
; Used by the routine at #R$a256.
c$a278 ld (ix+$7d),$01 ;
 $a27c ld (ix+$4d),$00 ;
 $a280 ex de,hl        ;
 $a281 ld hl,($72d8)   ;
 $a284 ld a,$0c        ;
 $a286 call $9a4c      ;
 $a289 ld a,(de)       ;
 $a28a add a,$11       ;
 $a28c ld ($72d9),a    ;
 $a28f pop hl          ;
 $a290 call $a389      ;
 $a293 ret             ;

; Farmer jumping/falling related routine.
;
; Used by the routine at #R$a22a.
c$a294 ld a,($7325)    ;
 $a297 dec a           ;
 $a298 jr nz,$a2b5     ;
 $a29a dec (ix+$4f)    ;
 $a29d jr nz,$a30f     ;
 $a29f ld hl,$7325     ;
 $a2a2 ld (hl),$02     ;
 $a2a4 inc hl          ;
 $a2a5 ld (hl),$00     ;
 $a2a7 inc hl          ;
 $a2a8 ld (hl),$fa     ;
 $a2aa ld (ix+$52),$ff ;
 $a2ae ld a,($72da)    ;
 $a2b1 call $a37f      ;
 $a2b4 ret             ;

; Routine at a2b5
;
; Used by the routines at #R$a21c and #R$a294.
c$a2b5 ld hl,$7328     ;
 $a2b8 dec (hl)        ;
 $a2b9 ret nz          ;
 $a2ba push hl         ;
 $a2bb ld hl,($72d8)   ;
 $a2be call $9538      ;
 $a2c1 pop hl          ;
 $a2c2 ld a,($732a)    ;
 $a2c5 dec a           ;
 $a2c6 jr z,$a2e1      ;
 $a2c8 inc a           ;
 $a2c9 and a           ;
 $a2ca jr nz,$a2d4     ;
*$a2cc ld (ix+$52),$ff ;
 $a2d0 ld a,$fa        ;
 $a2d2 jr $a2fb        ;
*$a2d4 ld a,($7327)    ;
 $a2d7 sub $0a         ;
 $a2d9 cp $28          ;
 $a2db jr nc,$a2df     ;
 $a2dd ld a,$28        ;
*$a2df jr $a2fb        ;
*$a2e1 ld a,($72d9)    ;
 $a2e4 cp $a7          ;
 $a2e6 jr c,$a2ed      ;
 $a2e8 inc (ix+$01)    ;
 $a2eb jr $a2cc        ;
*$a2ed ld a,($7327)    ;
 $a2f0 add a,$0a       ;
 $a2f2 cp $04          ;
 $a2f4 jr nz,$a2fb     ;
 $a2f6 ld (ix+$52),$00 ;
 $a2fa xor a           ;
*$a2fb ld ($7327),a    ;
 $a2fe ld (hl),a       ;
 $a2ff ld a,($72d9)    ;
 $a302 add a,(ix+$52)  ;
 $a305 cp $10          ;
 $a307 jr nc,$a30c     ;
 $a309 pop hl          ;
 $a30a pop hl          ;
 $a30b ret             ;

; Farmer jumping/falling related routine.
;
; Used by the routine at #R$a2b5.
c$a30c ld ($72d9),a    ;
; This entry point is used by the routine at #R$a294.
*$a30f ld a,$01        ;
 $a311 call $a37f      ;
 $a314 call $9e34      ;
 $a317 ld bc,$003f     ;
 $a31a and a           ;
 $a31b sbc hl,bc       ;
 $a31d ld a,($732a)    ;
 $a320 dec a           ;
 $a321 jr z,$a356      ;
 $a323 ld a,($7326)    ;
 $a326 and a           ;
 $a327 jr z,$a356      ;
 $a329 dec a           ;
 $a32a jr z,$a33e      ;
 $a32c ld a,($72d8)    ;
 $a32f and $07         ;
 $a331 cp $04          ;
 $a333 jr nc,$a356     ;
 $a335 dec hl          ;
 $a336 ld a,(hl)       ;
 $a337 inc hl          ;
 $a338 cp $05          ;
 $a33a jr nz,$a356     ;
 $a33c jr $a34e        ;
*$a33e ld a,($72d8)    ;
 $a341 and $07         ;
 $a343 cp $03          ;
 $a345 jr c,$a356      ;
 $a347 inc hl          ;
 $a348 ld a,(hl)       ;
 $a349 dec hl          ;
 $a34a cp $05          ;
 $a34c jr nz,$a356     ;
*$a34e ld a,($7326)    ;
 $a351 xor $fe         ;
 $a353 ld ($7326),a    ;
*$a356 ld a,(hl)       ;
 $a357 and a           ;
 $a358 ret z           ;
 $a359 cp $05          ;
 $a35b jr z,$a36a      ;
 $a35d cp $03          ;
 $a35f ret nc          ;
 $a360 dec hl          ;
 $a361 dec a           ;
 $a362 jr z,$a366      ;
 $a364 inc hl          ;
 $a365 inc hl          ;
*$a366 ld a,(hl)       ;
 $a367 cp $05          ;
 $a369 ret nz          ;
*$a36a ld a,($72d9)    ;
 $a36d inc a           ;
 $a36e and $07         ;
 $a370 ret nz          ;
 $a371 ld (ix+$4d),$00 ;
 $a375 ld hl,$72db     ;
 $a378 ld a,(hl)       ;
 $a379 cp $0d          ;
 $a37b ret nz          ;
 $a37c ld (hl),$00     ;
 $a37e ret             ;

; Routine at a37f
;
; Used by the routines at #R$a294 and #R$a30c.
c$a37f ld hl,($72d8)  ;
 $a382 add a,(ix+$03) ;
 $a385 call $9a4c     ;
 $a388 ret            ;

; Farmer lands on a platform?
;
; Note: exactly same as #R$AAE4, #R$B14F, except for #REGhl address.
c$a389 ld a,r        ; {Load #REGb with #REGr (related to memory refresh), then
 $a38b and $07       ; after processing #REGb will have a value between 1-8.
 $a38d inc a         ;
 $a38e ld b,a        ;
@ssub=ld hl,$a399-$01
 $a38f ld hl,$a398   ; }
*$a392 inc hl        ; {Increment #REGhl to required address, and assign #REGa.
 $a393 djnz $a392    ;
 $a395 ld a,(hl)     ; }
 $a396 jp $9ceb      ; GetLookupTableAddress

; Small lookup table used by #R$A389 to assign #REGa, for use with
; GetLookupTableAddress
b$a399 defb $04,$06,$09,$0d,$12,$16,$04,$0d

; Data block at a3a1
b$a3a1 defb $c9,$4f,$04,$c9,$00,$00

; Farmer collects an egg/corn...also at start of level.
;
; Used by the routines at #R$99df, #R$9a17, #R$9a38, #R$a62c and #R$ae9c.
c$a3a7 ld a,b        ;
 $a3a8 and a         ;
 $a3a9 jr z,$a3e6    ;
 $a3ab ld a,$0a      ;
*$a3ad ld hl,$6ecc   ;
*$a3b0 inc (hl)      ;
 $a3b1 cp (hl)       ;
 $a3b2 jr nz,$a3b9   ;
 $a3b4 ld (hl),$00   ;
 $a3b6 dec hl        ;
 $a3b7 jr $a3b0      ;
*$a3b9 djnz $a3ad    ;
 $a3bb ld hl,$736e   ;
 $a3be ld a,($6ec9)  ;
 $a3c1 cp (hl)       ;
 $a3c2 jr z,$a3e6    ;
 $a3c4 ld (hl),a     ;
 $a3c5 ld a,($733b)  ; Get current_player
 $a3c8 add a,$ef     ;
 $a3ca ld h,$6e      ;
 $a3cc ld l,a        ;
 $a3cd ld c,(hl)     ;
 $a3ce inc (hl)      ;
 $a3cf sub $ef       ;
 $a3d1 ld b,a        ;
 $a3d2 ld a,c        ;
 $a3d3 cp $06        ;
 $a3d5 jr nc,$a3e6   ;
 $a3d7 ld a,$fd      ;
*$a3d9 add a,$07     ;
 $a3db djnz $a3d9    ;
 $a3dd add a,c       ;
 $a3de ld l,a        ;
 $a3df ld h,$16      ;
 $a3e1 ld a,$b6      ;
 $a3e3 call $9c40    ; UpdateScreenGfx
*$a3e6 ld de,($733d) ;
 $a3ea ld bc,$6ec8   ;
 $a3ed ld ixl,$06    ;
*$a3f0 push de       ;
 $a3f1 ld a,(bc)     ;
 $a3f2 sla a         ;
 $a3f4 sla a         ;
 $a3f6 sla a         ;
 $a3f8 push bc       ;
 $a3f9 add a,$70     ;
 $a3fb ld h,$86      ;
 $a3fd ld l,a        ;
 $a3fe ld b,$08      ;
*$a400 ld a,(hl)     ;
 $a401 ld (de),a     ;
 $a402 inc d         ;
 $a403 inc l         ;
 $a404 djnz $a400    ;
 $a406 pop bc        ;
 $a407 pop de        ;
 $a408 inc de        ;
 $a409 inc bc        ;
 $a40a dec ixl       ;
 $a40c jr nz,$a3f0   ;
 $a40e ret           ;

; Unused?
b$a40f defb $00

; The game has just loaded
;
; Used by the routine at #R$9858.
@label=GameStart
c$a410 ld hl,$732d   ; {Set game_state to "Play Tune" -- POKE @A411 (the
 $a413 ld (hl),$06   ; address value) to `003` to mute music notes (on game
                     ; start only)}
 $a415 ld hl,$736f   ; {Set music_play_state to "play"
 $a418 ld (hl),$00   ; }
 $a41a ld a,$b2      ;
 $a41c ld i,a        ;
 $a41e im 2          ; Interupt Mode: determine when and what an interrupt does

; Display the home screen, which includes the scoreboard
;
; Note: this routine is very similar to the DisplayInstructionsScreen routine.
@label=DisplayHomeScreen
c$a420 call $ab9e    ; ClearScreen
 $a423 ld h,$02      ;
 $a425 ld bc,$9630   ;
*$a428 ld l,$00      ;
*$a42a ld a,(bc)     ;
 $a42b call $9c40    ; UpdateScreenGfx
 $a42e inc bc        ;
 $a42f inc l         ;
 $a430 ld a,l        ;
 $a431 cp $0e        ;
 $a433 jr nz,$a42a   ;
 $a435 inc h         ;
 $a436 ld a,h        ;
 $a437 cp $18        ;
 $a439 jr nz,$a428   ;
 $a43b call $abad    ; DisplayScoreboard
 $a43e ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $a441 ld b,$0e      ;
 $a443 ld c,$04      ; {Print "A & F SOFTWARE" text graphic
 $a445 ld a,$03      ;
 $a447 call $aa37    ; }
 $a44a ld c,$07      ; {Print "CHUCKIE EGG (c)" text graphic
 $a44c ld a,$06      ;
 $a44e call $aa37    ; }
 $a451 ld c,$0a      ; {Print "a game of skill..." text graphic
 $a453 ld a,$04      ;
 $a455 call $aa37    ; }
 $a458 ld hl,$ae0c   ; Point #REGhl to theme_tune data
 $a45b ld a,($736f)  ; {If music_play_state is "stopped" then Jump
 $a45e and a         ;
 $a45f jr nz,$a46e   ; }
 $a461 call $ab60    ; else PlayTune
 $a464 ld a,$14      ;
 $a466 call $9ceb    ; GetLookupTableAddress
 $a469 ld a,$01      ; {Set music_play_state to "stopped"
 $a46b ld ($736f),a  ; }
; This entry point is used by the routine at #R$aa49.
@label=SetTickerTextColour
*$a46e ld hl,$5ae0   ; Point #REGhl to last line of ATTRIBUTE_FILE.
 $a471 ld b,$20      ;
*$a473 ld (hl),$05   ; Set foreground colour to Cyan, background remains black.
 $a475 inc hl        ;
 $a476 djnz $a473    ;
 $a478 ld hl,$732c   ; {Sets 732C to $4E ...whatever that is.
 $a47b ld (hl),$4e   ; }

; Scroll ticker text for home screen
;
; Note: this routine is very similar to the first half of ScrollText2 routine.
@label=ScrollText1
c$a47d ld hl,$50e1   ;
 $a480 call $ab7b    ;
 $a483 ld bc,$01f4   ;
 $a486 call $a921    ;
 $a489 ld hl,$732b   ;
 $a48c dec (hl)      ;
 $a48d jr nz,$a4ab   ;
 $a48f ld (hl),$08   ;
 $a491 ld hl,$ac7c   ; Point #REGhl to home_screen_ticker_text
 $a494 ld a,($732c)  ;
 $a497 inc a         ;
 $a498 cp $4e        ;
 $a49a jr c,$a49d    ;
 $a49c xor a         ; {Set 732C to `$00`
*$a49d ld ($732c),a  ; }
 $a4a0 ld e,a        ;
 $a4a1 ld d,$00      ;
 $a4a3 add hl,de     ;
 $a4a4 ld a,(hl)     ;
 $a4a5 ld hl,$001e   ;
 $a4a8 call $9c40    ; UpdateScreenGfx
*$a4ab ld a,$fd      ; {Read keyboard and check keypress `S`
 $a4ad in a,($fe)    ;
 $a4af bit 1,a       ;
 $a4b1 jp z,$a59d    ; }
 $a4b4 ld a,$fb      ; {Read keyboard and check keypress `R`
 $a4b6 in a,($fe)    ;
 $a4b8 bit 3,a       ;
 $a4ba jp z,$aa49    ; }
 $a4bd ld a,$df      ; {Read keyboard and check keypress `I`
 $a4bf in a,($fe)    ;
 $a4c1 bit 2,a       ;
 $a4c3 jr z,$a4c8    ;
 $a4c5 jp $a47d      ; }

; Display the instructions screen
;
; Note: this routine is very similar to the DisplayHomeScreen routine.
@label=DisplayInstructionsScreen
c$a4c8 call $ab9e    ; ClearScreen
 $a4cb ld h,$03      ;
 $a4cd ld bc,$8390   ;
*$a4d0 ld l,$00      ;
*$a4d2 ld a,(bc)     ;
 $a4d3 call $9c40    ; UpdateScreenGfx
 $a4d6 inc bc        ;
 $a4d7 inc l         ;
 $a4d8 ld a,l        ;
 $a4d9 cp $20        ;
 $a4db jr nz,$a4d2   ;
 $a4dd inc h         ;
 $a4de inc h         ;
 $a4df ld a,h        ;
 $a4e0 cp $19        ;
 $a4e2 jr nz,$a4d0   ;
 $a4e4 ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $a4e7 ld b,$20      ;
 $a4e9 ld c,$06      ; {Print instructions headings
 $a4eb ld a,$05      ;
 $a4ed call $aa37    ; }
 $a4f0 ld c,$09      ; {Print "KEYS" box
 $a4f2 ld a,$17      ;
 $a4f4 call $aa37    ; }
 $a4f7 ld c,$06      ; {Print "KEY TYPES" text
 $a4f9 ld a,$05      ;
 $a4fb call $aa37    ; }
 $a4fe ld c,$03      ; {I saw nothing change visually on the screen.
 $a500 ld a,$04      ;
 $a502 call $aa37    ; }
 $a505 ld hl,$732c   ; {Set 732C to `$57`
 $a508 ld (hl),$57   ; }
 $a50a inc hl        ; {Set game_state to $0A - Instructions screen?
 $a50b ld (hl),$0a   ; }
 $a50d call $a960    ;
 $a510 ld a,$18      ;
 $a512 call $9ceb    ; GetLookupTableAddress

; Scroll ticker text for instructions screen
;
; Note: first half of this routine is very similar ScrollText1 routine.
@label=ScrollText2
c$a515 ld hl,$50e1   ;
 $a518 call $ab7b    ;
 $a51b ld bc,$01f4   ;
 $a51e call $a921    ;
 $a521 ld hl,$732b   ;
 $a524 dec (hl)      ;
 $a525 jr nz,$a543   ;
 $a527 ld (hl),$08   ;
 $a529 ld hl,$acca   ; Point #REGhl to instructions_screen_ticker_text
 $a52c ld a,($732c)  ;
 $a52f inc a         ;
 $a530 cp $57        ;
 $a532 jr c,$a535    ;
 $a534 xor a         ; {Set 732C to `$00`
*$a535 ld ($732c),a  ; }
 $a538 ld e,a        ;
 $a539 ld d,$00      ;
 $a53b add hl,de     ;
 $a53c ld a,(hl)     ;
 $a53d ld hl,$001e   ;
 $a540 call $9c40    ; UpdateScreenGfx
*$a543 ld a,($7373)  ;
 $a546 xor $ff       ;
 $a548 jr nz,$a553   ;
 $a54a ld a,$fd      ; {Read keyboard and check keypress (for what?)
 $a54c in a,($fe)    ;
 $a54e bit 1,a       ;
 $a550 jp z,$a59d    ; }
*$a553 ld a,$fb      ; {Read keyboard and check keypress (for what?)
 $a555 in a,($fe)    ;
 $a557 bit 3,a       ;
 $a559 jp z,$aa49    ; }
 $a55c ld a,$f7      ; {Read keyboard row 1..5 (on instructions screen?)
 $a55e in a,($fe)    ;
 $a560 and $07       ;
 $a562 cp $07        ;
 $a564 jr z,$a59a    ; }

; Highlight the "input type" line # 1, 2, or 3.
c$a566 ld b,a        ; #REGb also saved to game_state later, at A57D
 $a567 ld a,($732d)  ; {Check the current game_state.
 $a56a cp b          ;
 $a56b jr z,$a59a    ; }
 $a56d ld hl,$5980   ; Input type #2.
 $a570 cp $05        ;
 $a572 jr z,$a57c    ;
 $a574 ld hl,$59c0   ; Input type #3.
 $a577 jr c,$a57c    ;
 $a579 ld hl,$5940   ; Input type #1 (default).
*$a57c ld a,b        ;
 $a57d ld ($732d),a  ; Update game_state value.
 $a580 cp $05        ;
 $a582 ld de,$5980   ; Input type #2.
 $a585 jr z,$a58f    ;
 $a587 ld de,$59c0   ; Input type #3.
 $a58a jr c,$a58f    ;
 $a58c ld de,$5940   ; Input type #1 (default).
*$a58f ld b,$20      ;
 $a591 ld a,$97      ;
*$a593 ld (hl),$17   ;
 $a595 ld (de),a     ;
 $a596 inc hl        ;
 $a597 inc de        ;
 $a598 djnz $a593    ;
; This entry point is used by the routine at #R$a515.
*$a59a jp $a515      ;

; Initialize a new game
;
; Routine to start a new game, first asking for number of players!
@label=InitializeGame
c$a59d ld ixh,$02    ;
 $a5a0 call $a929    ;
 $a5a3 ld hl,$4000   ; {Clear the entire DISPLAY_FILE
 $a5a6 ld bc,$1800   ;
*$a5a9 ld (hl),$00   ;
 $a5ab inc hl        ;
 $a5ac dec bc        ;
 $a5ad ld a,b        ;
 $a5ae or c          ;
 $a5af jr nz,$a5a9   ; }
 $a5b1 ld ixh,$01    ;
 $a5b4 call $a929    ;
 $a5b7 ld c,$e8      ;
 $a5b9 ld de,$ad21   ; Point #REGde to choose_number_of_players_text
 $a5bc ld b,$01      ;
*$a5be djnz $a5ca    ; {Scroll text onto screen? vertical-middle of
 $a5c0 ld a,(de)     ; DISPLAY_FILE
 $a5c1 inc de        ;
 $a5c2 ld hl,$0c1e   ;
 $a5c5 call $9c40    ;
 $a5c8 ld b,$08      ;
*$a5ca ld hl,$4861   ;
 $a5cd call $ab7b    ;
 $a5d0 dec c         ;
 $a5d1 jr nz,$a5be   ; }
*$a5d3 ld a,$f7      ; {Input to get number_of_players for this game
 $a5d5 in a,($fe)    ;
 $a5d7 and $0f       ;
 $a5d9 cp $0f        ;
 $a5db jr z,$a5d3    ; }
 $a5dd ld b,$00      ; {INCrement #REGb until it equals #REGa; the
*$a5df inc b         ; number_of_players
 $a5e0 srl a         ;
 $a5e2 jr c,$a5df    ; }
 $a5e4 ld l,b        ; number_of_players (#REGl) = #REGb
 $a5e5 ld h,$01      ; current_player (#REGh) = $01
 $a5e7 ld ($733a),hl ; Set total number_of_players and current_player
 $a5ea ld b,$f0      ; {scroll text off screen
*$a5ec ld hl,$4861   ;
 $a5ef call $ab7b    ;
 $a5f2 djnz $a5ec    ; }
 $a5f4 ld a,$05      ;
 $a5f6 ld de,$61a8   ; Load #REGde with level_buffer address.
*$a5f9 ld bc,$02a0   ; Load #REGbc with size of level data.
 $a5fc ld hl,$b3b0   ; Point #REGh; to level_1 address.
 $a5ff ldir          ; Copy level data.
 $a601 dec a         ; {Why repeat the copy 5 times?
 $a602 jr nz,$a5f9   ; }
 $a604 ld hl,$6ec8   ; {Reset anim buffer data at 6EC8 (6 bytes) + ANIMBUF1 (24
 $a607 ld b,$1e      ; bytes)
*$a609 ld (hl),$00   ;
 $a60b inc hl        ;
 $a60c djnz $a609    ; }
 $a60e ld b,$05      ; {Reset all egg counters to $0C (12...why?): from address
*$a610 ld (hl),$0c   ; 6EE6 for 5 bytes
 $a612 inc hl        ;
 $a613 djnz $a610    ; }
 $a615 ld b,$05      ; {Reset all cleared levels counters: from address 6EEB
*$a617 ld (hl),$00   ; for 5 bytes
 $a619 inc hl        ;
 $a61a djnz $a617    ; }
 $a61c ld b,$04      ; {Reset all player lives to 5: from address 6EF0 for 4
*$a61e ld (hl),$05   ; bytes
 $a620 inc hl        ;
 $a621 djnz $a61e    ; }
@ssub=ld hl,$9f60+$3e ; Address is toward the end of a routine, so we need a big offset.
 $a623 ld hl,$9f9e   ;
 $a626 ld ($ad58),hl ;
 $a629 call $a960    ;

; Routine at a62c
;
; Used by the routine at #R$a6fe.
c$a62c ld a,($733a)  ; Get number_of_players
 $a62f dec a         ;
 $a630 jr z,$a653    ;
 $a632 ld a,($733b)  ; Get current_player
 $a635 add a,$19     ;
 $a637 call $9ceb    ; GetLookupTableAddress
@ssub=ld bc,$ad3f+$0a ; Point #REGbc to the address of "p" from "player 1"
 $a63a ld bc,$ad49   ;
 $a63d ld a,($733b)  ; Get current_player
 $a640 add a,$30     ;
@ssub=ld ($ad3f+$11),a ; Replace player number in game_over_text with #REGa.
 $a642 ld ($ad50),a  ;
 $a645 ld c,$08      ;
@ssub=ld de,$ad3f+$0a ; Point #REGde to the address of "p" from "player 1"
 $a647 ld de,$ad49   ;
 $a64a call $a9ce    ;
 $a64d ld bc,$0000   ;
 $a650 call $a921    ;
*$a653 call $ae9c    ;
 $a656 call $a960    ;
 $a659 ld bc,$0006   ;
 $a65c ld hl,$6ec8   ;
 $a65f ld a,($733b)  ; Get current_player
*$a662 add hl,bc     ;
 $a663 dec a         ;
 $a664 jr nz,$a662   ;
 $a666 ex de,hl      ;
 $a667 ld hl,$6ec8   ;
 $a66a ldir          ;
 $a66c im 2          ;
 $a66e ld a,($6ee6)  ;
 $a671 and a         ;
 $a672 jp nz,$a6fe   ; POKE @A672 to 202 (`JP Z`) to jump to next level on
                     ; death
*$a675 ld a,($7347)  ;
 $a678 and a         ;
 $a679 jr z,$a68d    ;
 $a67b ld b,$00      ;
 $a67d call $a1b8    ;
 $a680 ld b,$01      ;
 $a682 call $a3a7    ;
 $a685 ld hl,$1e04   ;
 $a688 call $9ca4    ;
 $a68b jr $a675      ;
*$a68d ld d,$02      ;
*$a68f ld bc,$0000   ;
 $a692 call $a921    ;
 $a695 dec d         ;
 $a696 jr nz,$a68f   ;
 $a698 call $a968    ;
 $a69b ld bc,$0006   ;
 $a69e ld hl,$6ec8   ;
 $a6a1 ld a,($733b)  ; Get current_player
*$a6a4 add hl,bc     ;
 $a6a5 dec a         ;
 $a6a6 jr nz,$a6a4   ;
 $a6a8 ex de,hl      ;
 $a6a9 ld hl,$6ec8   ;
 $a6ac ldir          ;
 $a6ae ld hl,$6eeb   ;
 $a6b1 inc (hl)      ;
 $a6b2 ld a,(hl)     ;
 $a6b3 inc a         ;
 $a6b4 cp $c8        ;
 $a6b6 jr c,$a6bc    ;
 $a6b8 sub $c8       ;
 $a6ba jr $a6c2      ;
*$a6bc cp $64        ;
 $a6be jr c,$a6c2    ;
 $a6c0 sub $64       ;
*$a6c2 ld b,$00      ;
*$a6c4 sub $0a       ;
 $a6c6 jr c,$a6cb    ;
 $a6c8 inc b         ;
 $a6c9 jr $a6c4      ;
*$a6cb add a,$a8     ;
@ssub=ld ($ad58+$01),a ; Update LSB of address.
 $a6cd ld ($ad59),a  ;
 $a6d0 ld a,b        ;
 $a6d1 and a         ;
 $a6d2 jr z,$a6d6    ;
 $a6d4 add a,$9e     ;
*$a6d6 ld ($ad58),a  ;
 $a6d9 ld de,$ad52   ; #REGde is loaded with "level " text
 $a6dc ld c,$08      ;
 $a6de call $a9ce    ;
 $a6e1 ld de,$61a8   ; Load #REGde with level_buffer address
 $a6e4 ld bc,$02a0   ; Load #REGbc with value of 672 (size of level data)
@ssub=ld hl,$b3b0-$02a0 ; Point #REGhl to level_1-$02A0 (672 bytes).
 $a6e7 ld hl,$b110   ;
 $a6ea ld a,($6eeb)  ;
 $a6ed and $07       ;
 $a6ef inc a         ;
*$a6f0 add hl,bc     ; Add $02A0 (672) to #REGhl, to start read from level_1
                     ; address.
 $a6f1 dec a         ;
 $a6f2 jr nz,$a6f0   ;
 $a6f4 ldir          ;
 $a6f6 ld a,$0c      ;
 $a6f8 ld ($6ee6),a  ;
 $a6fb jp $a653      ;

; Farmer has died!
;
; Used by the routine at #R$a62c.
@label=FarmerKill
c$a6fe ld hl,$ae6a   ;
 $a701 call $ab60    ; PlayTune
 $a704 call $aae4    ;
 $a707 call $a960    ;
 $a70a ld bc,$0000   ;
 $a70d call $a921    ;
 $a710 call $ab9e    ; ClearScreen
 $a713 ld hl,$7342   ;
 $a716 ld a,(hl)     ;
 $a717 cp $ff        ;
 $a719 jr nz,$a72d   ;
 $a71b inc hl        ;
 $a71c ld a,$09      ;
 $a71e cp (hl)       ;
 $a71f jr nz,$a72d   ;
 $a721 inc hl        ;
 $a722 cp (hl)       ;
 $a723 jr nz,$a72d   ;
 $a725 ld de,$ad5a   ; Point #REGde to out_of_time_text
 $a728 ld c,$0d      ;
 $a72a call $a9ce    ;
*$a72d ld hl,$61a8   ; {copy LEVEL data to level_buffer
 $a730 ld bc,$02a0   ;
 $a733 push hl       ;
 $a734 pop de        ; }
 $a735 ld a,($733b)  ; Get current_player
*$a738 add hl,bc     ;
 $a739 dec a         ;
 $a73a jr nz,$a738   ;
 $a73c ex de,hl      ;
 $a73d ldir          ;
 $a73f ld a,($733b)  ; Get current_player
 $a742 ld e,a        ;
 $a743 ld d,$00      ;
 $a745 ld hl,$6ee6   ;
 $a748 ld a,(hl)     ;
 $a749 add hl,de     ;
 $a74a ld (hl),a     ;
 $a74b ld hl,$6eeb   ;
 $a74e ld a,(hl)     ;
 $a74f add hl,de     ;
 $a750 ld (hl),a     ;
 $a751 ld hl,$6eef   ;
 $a754 add hl,de     ;
 $a755 dec (hl)      ; POKE to 182 (`OR (HL)`) to get infinite LIVES
 $a756 jr nz,$a768   ;
 $a758 ld c,$12      ;
 $a75a ld a,($733a)  ; Get number_of_players
 $a75d dec a         ;
 $a75e jr nz,$a762   ;
 $a760 ld c,$09      ;
*$a762 ld de,$ad3f   ; Point #REGde to game_over_text
 $a765 call $a9ce    ;
*$a768 ld b,$05      ;
*$a76a ld hl,($733a) ; Load #REGhl to number_of_players and current_player
 $a76d ld a,h        ;
 $a76e cp l          ;
 $a76f jr nz,$a772   ;
 $a771 xor a         ;
*$a772 inc a         ;
 $a773 ld ($733b),a  ; Set current_player
 $a776 ld hl,$6eef   ;
 $a779 ld e,a        ;
 $a77a ld d,$00      ;
 $a77c add hl,de     ;
 $a77d ld a,(hl)     ;
 $a77e and a         ;
 $a77f jr nz,$a785   ;
 $a781 djnz $a76a    ;
 $a783 jr $a7bc      ;
*$a785 ld bc,$0004   ;
 $a788 and a         ;
 $a789 sbc hl,bc     ;
 $a78b ld a,(hl)     ;
 $a78c ld ($6eeb),a  ;
 $a78f inc bc        ;
 $a790 and a         ;
 $a791 sbc hl,bc     ;
 $a793 ld a,(hl)     ;
 $a794 ld ($6ee6),a  ;
 $a797 ld a,($733b)  ; Get current_player
 $a79a inc bc        ;
 $a79b ld hl,$6ec8   ;
*$a79e add hl,bc     ;
 $a79f dec a         ;
 $a7a0 jr nz,$a79e   ;
 $a7a2 ld de,$6ec8   ;
 $a7a5 ldir          ;
 $a7a7 ld a,($733b)  ; Get current_player
 $a7aa ld hl,$61a8   ; {copy LEVEL data to level_buffer
 $a7ad ld bc,$02a0   ;
*$a7b0 add hl,bc     ;
 $a7b1 dec a         ;
 $a7b2 jr nz,$a7b0   ;
 $a7b4 ld de,$61a8   ;
 $a7b7 ldir          ; }
 $a7b9 jp $a62c      ;

; Related to animation #1
;
; Used by the routine at #R$a6fe.
c$a7bc ld ixh,$02    ;
 $a7bf call $a929    ;
 $a7c2 ld hl,$4000   ; {Point #REGhl to DISPLAY_FILE and reset first 18 bytes
 $a7c5 ld bc,$0018   ;
*$a7c8 ld (hl),$00   ;
 $a7ca inc hl        ;
 $a7cb djnz $a7c8    ; }
 $a7cd dec c         ;
 $a7ce jr nz,$a7c8   ;
 $a7d0 ld ixh,$01    ;
 $a7d3 call $a929    ;
 $a7d6 ld hl,$6ece   ; #REGhl=player 1 score
 $a7d9 ld b,$18      ; {Increment value in (#REGhl) by $30 for 24 bytes.
*$a7db ld a,(hl)     ;
 $a7dc add a,$30     ;
 $a7de ld (hl),a     ;
 $a7df inc hl        ;
 $a7e0 djnz $a7db    ; }
 $a7e2 ld a,$01      ;
 $a7e4 ld hl,$6ece   ; #REGhl=player 1 score
*$a7e7 add a,$30     ;
@ssub=ld ($ad67+$0b),a ; Change player number in high score text.
 $a7e9 ld ($ad72),a  ;
 $a7ec sub $30       ;
 $a7ee call $a80c    ;
 $a7f1 dec d         ;
 $a7f2 jr z,$a7fb    ;
 $a7f4 push af       ;
 $a7f5 push hl       ;
 $a7f6 call $a968    ;
 $a7f9 pop hl        ;
 $a7fa pop af        ;
*$a7fb ld de,$0006   ;
 $a7fe add hl,de     ;
 $a7ff ld ix,$72d8   ; {check if a score has been entered on scoreboard?
 $a803 cp (ix+$62)   ;
 $a806 jp z,$a420    ; }
 $a809 inc a         ;
 $a80a jr $a7e7      ;

; Called before loading main screen or highscores?
;
; Used by the routine at #R$a7bc.
c$a80c push bc       ;
 $a80d push af       ;
 $a80e push hl       ;
 $a80f ld b,$0a      ;
@ssub=ld de,$97af+$0a ; Point #REGde to first score value ("001000") on scoreboard.
 $a811 ld de,$97b9   ;
*$a814 call $aa0c    ;
 $a817 dec a         ;
 $a818 jr z,$a828    ;
 $a81a ld c,$10      ;
*$a81c inc de        ;
 $a81d dec c         ;
 $a81e jr nz,$a81c   ;
 $a820 djnz $a814    ;
 $a822 pop hl        ;
 $a823 pop af        ;
 $a824 pop bc        ;
 $a825 ld d,$01      ;
 $a827 ret           ;

; Player enters their name on the highscore table?
;
; Used by the routine at #R$a80c.
@label=HighScoreEnterName
c$a828 ld ixh,b      ;
@ssub=ld hl,$97af+$90 ; Point #REGhl to last score entry (-1 byte) on scoreboard.
 $a82a ld hl,$983f   ;
 $a82d dec b         ;
 $a82e jr z,$a844    ;
 $a830 ld hl,$0000   ;
 $a833 ld de,$0010   ;
*$a836 add hl,de     ;
 $a837 djnz $a836    ;
 $a839 push hl       ;
 $a83a pop bc        ;
@ssub=ld de,$97af+$9f
 $a83b ld de,$984e   ;
@ssub=ld hl,$97af+$8f
 $a83e ld hl,$983e   ;
 $a841 lddr          ; LDDR decrements HL/DE, unlike LDIR, which increments.
 $a843 inc hl        ;
*$a844 ld b,$0a      ; {Does this clear the name for the selected highscore?
*$a846 ld (hl),$00   ;
 $a848 inc hl        ;
 $a849 djnz $a846    ; }
 $a84b ld bc,$0006   ;
 $a84e push hl       ;
 $a84f pop de        ;
 $a850 pop hl        ;
 $a851 push hl       ;
 $a852 push de       ;
 $a853 ldir          ;
 $a855 ld c,$0b      ;
 $a857 ld h,$17      ;
 $a859 ld de,$ad67   ; Point #REGde to new_high_score_text
*$a85c ld l,$00      ;
 $a85e ld b,$0f      ;
*$a860 ld a,(de)     ;
 $a861 inc de        ;
 $a862 call $9c40    ; UpdateScreenGfx
 $a865 inc l         ;
 $a866 djnz $a860    ;
 $a868 dec h         ;
 $a869 dec h         ;
 $a86a dec c         ;
 $a86b jr nz,$a85c   ;
 $a86d call $abad    ; DisplayScoreboard
 $a870 ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $a873 ld a,$03      ; {Highlight the "Player 1" text in magenta ($03)
 $a875 ld b,$0f      ;
 $a877 ld c,$04      ;
 $a879 call $aa37    ; }
 $a87c inc a         ; {Highlight the "well done..." message in green (INC A =
 $a87d ld c,$09      ; $04)
 $a87f call $aa37    ; }
 $a882 ld a,$02      ; {Highlight the "enter initials..." message in red ($02)
 $a884 call $aa37    ; }
 $a887 call $a960    ;
 $a88a ld a,$07      ;
 $a88c call $9ceb    ; GetLookupTableAddress
 $a88f call $a960    ;
 $a892 pop hl        ;
 $a893 ld bc,$000a   ;
 $a896 and a         ;
 $a897 sbc hl,bc     ;
 $a899 ex de,hl      ;
 $a89a ld a,ixh      ;
 $a89c sla a         ;
 $a89e inc a         ;
 $a89f ld h,a        ;
 $a8a0 im 1          ;
 $a8a2 ld l,$10      ;
*$a8a4 ld a,$b7      ;
 $a8a6 call $9c40    ; UpdateScreenGfx
*$a8a9 ld a,($5c04)  ; reads SYSVAR_KSTATE_4
 $a8ac xor $ff       ;
 $a8ae jr nz,$a8a9   ;
*$a8b0 halt          ;
 $a8b1 ld a,($5c04)  ; reads SYSVAR_KSTATE_4
 $a8b4 xor $ff       ;
 $a8b6 jr z,$a8b0    ;
 $a8b8 ld a,($5c08)  ; reads SYSVAR_LAST_K (newly pressed key)
 $a8bb cp $0d        ;
 $a8bd jr z,$a8e4    ;
 $a8bf cp $0c        ;
 $a8c1 jr nz,$a8d1   ;
 $a8c3 ld a,l        ;
 $a8c4 cp $10        ;
 $a8c6 jr z,$a8b0    ;
 $a8c8 xor a         ;
 $a8c9 dec de        ;
 $a8ca ld (de),a     ;
 $a8cb call $9c40    ; UpdateScreenGfx
 $a8ce dec l         ;
 $a8cf jr $a8a4      ;
*$a8d1 cp $20        ;
 $a8d3 jr c,$a8b0    ;
 $a8d5 ld b,a        ;
 $a8d6 ld a,l        ;
 $a8d7 cp $19        ;
 $a8d9 jr z,$a8b0    ;
 $a8db ld a,b        ;
 $a8dc ld (de),a     ;
 $a8dd call $9c40    ; UpdateScreenGfx
 $a8e0 inc l         ;
 $a8e1 inc de        ;
 $a8e2 jr $a8a4      ;
*$a8e4 pop hl        ;
 $a8e5 pop af        ;
 $a8e6 pop bc        ;
 $a8e7 ld d,$02      ;
 $a8e9 im 2          ;
 $a8eb ret           ;

; Animated transition
;
; Used by the routines at #R$a929, #R$a968 and #R$a9fa.
@label=TransitionAnimation
c$a8ec push af       ;
 $a8ed push hl       ;
 $a8ee push bc       ;
 $a8ef push de       ;
 $a8f0 push hl       ;
 $a8f1 pop bc        ;
 $a8f2 call $aa23    ;
 $a8f5 ex de,hl      ;
 $a8f6 ld a,b        ;
 $a8f7 sub h         ;
 $a8f8 ld b,h        ;
 $a8f9 ld h,a        ;
 $a8fa ld a,c        ;
 $a8fb add a,l       ;
 $a8fc ld c,l        ;
 $a8fd ld l,a        ;
 $a8fe call $aa23    ;
 $a901 ld a,($732c)  ;
*$a904 ld (de),a     ;
 $a905 ld (hl),a     ;
 $a906 inc de        ;
 $a907 dec hl        ;
 $a908 dec c         ;
 $a909 jr nz,$a904   ;
 $a90b ld ixl,b      ;
 $a90d ld bc,$0020   ;
*$a910 ld (de),a     ;
 $a911 ld (hl),a     ;
 $a912 and a         ;
 $a913 sbc hl,bc     ;
 $a915 ex de,hl      ;
 $a916 add hl,bc     ;
 $a917 ex de,hl      ;
 $a918 dec ixl       ;
 $a91a jr nz,$a910   ;
 $a91c pop de        ;
 $a91d pop bc        ;
 $a91e pop hl        ;
 $a91f pop af        ;
 $a920 ret           ;

; Possible pause routine
;
; Used by the routines at #R$a47d, #R$a515, #R$a62c, #R$a6fe, #R$a929 and
; #R$a968.
@label=PauseRoutine
c$a921 push af       ;
*$a922 dec bc        ;
 $a923 ld a,b        ;
 $a924 or c          ;
 $a925 jr nz,$a922   ;
 $a927 pop af        ;
 $a928 ret           ;

; Animated transition #1 (1 square)
;
; Used by the routines at #R$a59d and #R$a7bc.
c$a929 ld hl,$0c0b   ;
 $a92c ld de,$0109   ;
 $a92f ld a,$12      ;
 $a931 dec ixh       ;
 $a933 jr nz,$a937   ;
 $a935 ld a,$03      ;
*$a937 inc ixh       ;
 $a939 ld b,$0c      ;
*$a93b ld ($732c),a  ; Set 732C to `$03`
 $a93e call $a8ec    ;
 $a941 push bc       ;
 $a942 ld bc,$1388   ;
 $a945 call $a921    ;
 $a948 pop bc        ;
 $a949 inc h         ;
 $a94a dec l         ;
 $a94b inc d         ;
 $a94c inc d         ;
 $a94d inc e         ;
 $a94e inc e         ;
 $a94f dec ixh       ;
 $a951 jr z,$a95b    ;
 $a953 add a,$09     ;
 $a955 cp $30        ;
 $a957 jr c,$a95b    ;
 $a959 ld a,$12      ;
*$a95b inc ixh       ;
 $a95d djnz $a93b    ;
 $a95f ret           ;

; Called when farmer dies
;
; Used by the routines at #R$a4c8, #R$a59d, #R$a62c, #R$a6fe and #R$a828.
c$a960 ld a,($7373)  ;
 $a963 xor $ff       ;
 $a965 jr nz,$a960   ;
 $a967 ret           ;

; Animated transition #2 (4 squares)
;
; Used by the routines at #R$a62c and #R$a7bc.
c$a968 ld ixh,$00    ;
 $a96b ld hl,$732c   ; {Set 732C to `$09`
 $a96e ld (hl),$09   ; }
*$a970 ld hl,$0605   ;
 $a973 ld d,$01      ;
*$a975 push hl       ;
 $a976 push de       ;
 $a977 ld e,d        ;
 $a978 call $a8ec    ;
 $a97b ld a,$14      ;
 $a97d add a,l       ;
 $a97e ld l,a        ;
 $a97f ld a,$0c      ;
 $a981 add a,h       ;
 $a982 ld h,a        ;
 $a983 call $a8ec    ;
 $a986 ld a,$08      ;
 $a988 add a,e       ;
 $a989 ld e,a        ;
 $a98a ld a,l        ;
 $a98b sub $14       ;
 $a98d ld l,a        ;
 $a98e ld a,$08      ;
 $a990 add a,e       ;
 $a991 call $a8ec    ;
 $a994 ld a,h        ;
 $a995 sub $0c       ;
 $a997 ld h,a        ;
 $a998 ld a,$0c      ;
 $a99a add a,l       ;
 $a99b ld l,a        ;
 $a99c call $a9fa    ;
 $a99f pop de        ;
 $a9a0 pop hl        ;
 $a9a1 inc e         ;
 $a9a2 inc e         ;
 $a9a3 inc d         ;
 $a9a4 inc d         ;
 $a9a5 inc h         ;
 $a9a6 dec l         ;
 $a9a7 ld bc,$2710   ;
 $a9aa call $a921    ;
 $a9ad ld a,l        ;
 $a9ae cp $ff        ;
 $a9b0 jr nz,$a975   ;
 $a9b2 ld bc,$1800   ;
 $a9b5 ld hl,$4000   ;
*$a9b8 ld (hl),$00   ;
 $a9ba inc hl        ;
 $a9bb dec bc        ;
 $a9bc ld a,b        ;
 $a9bd or c          ;
 $a9be jr nz,$a9b8   ;
 $a9c0 ld a,ixh      ;
 $a9c2 ld ixh,$01    ;
 $a9c5 ld hl,$732c   ; {Set 732C to `$04`
 $a9c8 ld (hl),$04   ; }
 $a9ca and a         ;
 $a9cb jr z,$a970    ;
 $a9cd ret           ;

; Prepare to scroll GAME OVER message
;
; Used by the routines at #R$a62c and #R$a6fe.
c$a9ce ld hl,$5960   ; {Update some attribute colours to $04
 $a9d1 ld b,$80      ;
*$a9d3 ld (hl),$04   ;
 $a9d5 inc hl        ;
 $a9d6 djnz $a9d3    ; }
 $a9d8 ld b,$01      ;
*$a9da ld hl,$4861   ; Point #REGhl to vertical middle of screen
 $a9dd call $ab7b    ; ScrollTickerText
 $a9e0 djnz $a9da    ;
 $a9e2 ld a,(de)     ;
 $a9e3 ld hl,$0c1e   ;
 $a9e6 inc de        ;
 $a9e7 call $9c40    ; UpdateScreenGfx
 $a9ea ld b,$08      ;
 $a9ec dec c         ;
 $a9ed jr nz,$a9da   ;
 $a9ef ld b,$00      ;
*$a9f1 ld hl,$4861   ; Point #REGhl to vertical middle of screen
 $a9f4 call $ab7b    ; ScrollTickerText
 $a9f7 djnz $a9f1    ;
 $a9f9 ret           ;

; Animated transition after death...related to animation #1
;
; Used by the routine at #R$a968.
c$a9fa inc ixh       ;
 $a9fc dec ixh       ;
 $a9fe jr nz,$aa08   ;
 $aa00 ld a,($732c)  ; {Increment value at 732C by `$09`.
 $aa03 add a,$09     ;
 $aa05 ld ($732c),a  ; }
*$aa08 call $a8ec    ;
 $aa0b ret           ;

; Routine at aa0c
;
; Used by the routine at #R$a80c.
c$aa0c push bc       ;
 $aa0d push de       ;
 $aa0e push hl       ;
 $aa0f ld c,$01      ;
 $aa11 ld b,$06      ;
*$aa13 ld a,(de)     ;
 $aa14 inc de        ;
 $aa15 cp (hl)       ;
 $aa16 inc hl        ;
 $aa17 jr c,$aa1e    ;
 $aa19 jr nz,$aa1d   ;
 $aa1b djnz $aa13    ;
*$aa1d dec c         ;
*$aa1e ld a,c        ;
 $aa1f pop hl        ;
 $aa20 pop de        ;
 $aa21 pop bc        ;
 $aa22 ret           ;

; Called during animation #1
;
; Used by the routine at #R$a8ec.
c$aa23 push de       ;
 $aa24 push bc       ;
 $aa25 ex de,hl      ;
 $aa26 ld hl,$5b00   ; Point #REGhl to start of PRINTER_BUFFER...why?
 $aa29 ld bc,$0020   ;
 $aa2c inc d         ;
*$aa2d and a         ;
 $aa2e sbc hl,bc     ;
 $aa30 dec d         ;
 $aa31 jr nz,$aa2d   ;
 $aa33 add hl,de     ;
 $aa34 pop bc        ;
 $aa35 pop de        ;
 $aa36 ret           ;

; Prints a text block to the screen.
;
; Used by the routines at #R$a420, #R$a4c8 and #R$a828.
@label=PrintTextBlock
c$aa37 push bc       ;
 $aa38 ld de,$0020   ;
*$aa3b push bc       ;
 $aa3c push hl       ;
*$aa3d ld (hl),a     ;
 $aa3e inc hl        ;
 $aa3f djnz $aa3d    ;
 $aa41 pop hl        ;
 $aa42 add hl,de     ;
 $aa43 pop bc        ;
 $aa44 dec c         ;
 $aa45 jr nz,$aa3b   ;
 $aa47 pop bc        ;
 $aa48 ret           ;

; Redefine keys wizard - read new keys
;
; Used by the routines at #R$a47d and #R$a515.
@label=RedefineKeysWizard
c$aa49 call $ab9e    ; ClearScreen
 $aa4c ld hl,$732d   ; {Set game_state to $03 (redefine keys)
 $aa4f ld (hl),$03   ; }
 $aa51 ld hl,$8268   ; {Clear 10 of the 12 bytes at this address
 $aa54 ld b,$0a      ;
*$aa56 ld (hl),$00   ;
 $aa58 inc hl        ;
 $aa59 djnz $aa56    ; }
 $aa5b ld hl,$1100   ;
 $aa5e ld b,$20      ;
 $aa60 ld de,$ac02   ; Point #REGde to redefine_keys_wizard_text
*$aa63 ld a,(de)     ;
 $aa64 call $9c40    ; UpdateScreenGfx
 $aa67 inc l         ;
 $aa68 inc de        ;
 $aa69 djnz $aa63    ;
 $aa6b ld h,$0e      ;
 $aa6d ld c,$05      ;
*$aa6f ld b,$0a      ;
 $aa71 ld l,$0a      ;
*$aa73 ld a,(de)     ;
 $aa74 call $9c40    ; UpdateScreenGfx
 $aa77 inc de        ;
 $aa78 inc l         ;
 $aa79 djnz $aa73    ;
 $aa7b dec h         ;
 $aa7c dec h         ;
 $aa7d dec c         ;
 $aa7e jr nz,$aa6f   ;
 $aa80 ld hl,$58c0   ; {Update colour attributes to $04
 $aa83 ld b,$20      ;
*$aa85 ld (hl),$04   ;
 $aa87 inc hl        ;
 $aa88 djnz $aa85    ; }
*$aa8a call $aaf4    ;
 $aa8d ld a,l        ;
 $aa8e and a         ;
 $aa8f jr nz,$aa8a   ;
 $aa91 ld a,$05      ;
 $aa93 ld ix,$8268   ;
 $aa97 ld hl,$592a   ;
@ssub=ld bc,$83f0+$06 ; Point #REGbc to "q" character in msg_key_types
 $aa9a ld bc,$83f6   ;
 $aa9d ld de,$0e16   ;
*$aaa0 call $ab19    ;
 $aaa3 push bc       ;
 $aaa4 ld bc,$0040   ;
 $aaa7 add hl,bc     ;
 $aaa8 pop bc        ;
 $aaa9 dec d         ;
 $aaaa dec d         ;
 $aaab inc ix        ;
 $aaad inc ix        ;
 $aaaf inc bc        ;
 $aab0 inc bc        ;
 $aab1 inc bc        ;
 $aab2 inc bc        ;
 $aab3 inc bc        ;
 $aab4 dec a         ;
 $aab5 jr nz,$aaa0   ;
 $aab7 jp $a46e      ;

; Routine at aaba
;
; Used by the routine at #R$ab19.
@ssub=ld hl,$8268-$01 ; Point #REGhl to key_input_type_3 - 1 byte
c$aaba ld hl,$8267   ;
 $aabd ld b,$00      ;
*$aabf inc hl        ;
 $aac0 inc hl        ;
 $aac1 inc b         ;
 $aac2 ld a,b        ;
 $aac3 cp $06        ;
 $aac5 jr z,$aacb    ;
 $aac7 ld a,(hl)     ;
 $aac8 and a         ;
 $aac9 jr nz,$aabf   ;
*$aacb dec hl        ;
 $aacc dec hl        ;
 $aacd dec b         ;
 $aace inc b         ;
 $aacf ld d,(hl)     ;
 $aad0 dec hl        ;
 $aad1 ld e,(hl)     ;
; This entry point is used by the routine at #R$aadf.
*$aad2 dec hl        ;
 $aad3 ld a,(hl)     ;
 $aad4 dec hl        ;
 $aad5 cp d          ;
 $aad6 jr nz,$aadf   ;
 $aad8 ld a,(hl)     ;
 $aad9 cp e          ;
 $aada jr nz,$aadf   ;
 $aadc ld b,$01      ;
 $aade ret           ;

; Some kind of pause routine?
;
; Used by the routine at #R$aaba.
c$aadf djnz $aad2    ;
 $aae1 ld b,$00      ;
 $aae3 ret           ;

; Called after death tune
;
; Note: exactly same as #R$A389, #R$B14F, except for #REGhl address.
c$aae4 ld a,r        ; {Load #REGb with #REGr (related to memory refresh), then
@ssub=ld hl,$abea-$01
 $aae6 ld hl,$abe9   ; after processing #REGb will have a value between 1-8.
 $aae9 and $07       ;
 $aaeb inc a         ;
 $aaec ld b,a        ; }
*$aaed inc hl        ; {Increment #REGhl to required address, and assign #REGa.
 $aaee djnz $aaed    ;
 $aaf0 ld a,(hl)     ; }
 $aaf1 jp $9ceb      ; GetLookupTableAddress

; Redefine keys: get key
;
; Used by the routines at #R$aa49 and #R$ab19.
@label=RedefineKeysGetKey
c$aaf4 ld d,$00      ;
 $aaf6 ld hl,$0000   ;
 $aaf9 ld b,$08      ;
 $aafb ld c,$fe      ;
; This entry point is used by the routine at #R$ab0d.
*$aafd ld a,c        ;
 $aafe in a,($fe)    ; {Read keyboard
 $ab00 and $1f       ;
 $ab02 cp $1f        ;
 $ab04 jr z,$ab12    ;
 $ab06 dec d         ;
 $ab07 jr nz,$ab0d   ;
 $ab09 ld hl,$0000   ;
 $ab0c ret           ; }

; Redefine keys: print the key you just pressed?
;
; Used by the routine at #R$aaf4.
@label=RedefineKeysPrintKey
c$ab0d ld d,$01      ;
 $ab0f ld l,a        ;
 $ab10 ld h,c        ;
 $ab11 ld e,b        ;
; This entry point is used by the routine at #R$aaf4.
*$ab12 sla c         ;
 $ab14 set 0,c       ;
 $ab16 djnz $aafd    ;
 $ab18 ret           ;

; Print redefine key direction label?
;
; Used by the routine at #R$aa49.
@label=RedefineKeysPrintDirection
c$ab19 push af       ;
 $ab1a push hl       ;
 $ab1b push de       ;
 $ab1c push bc       ;
 $ab1d ld b,$0d      ;
*$ab1f ld (hl),$03   ;
 $ab21 inc hl        ;
 $ab22 djnz $ab1f    ;
*$ab24 call $aaf4    ;
 $ab27 ld a,l        ;
 $ab28 and a         ;
 $ab29 jr z,$ab24    ;
 $ab2b ld c,l        ;
 $ab2c ld b,e        ;
 $ab2d ld (ix+$00),l ;
 $ab30 ld (ix+$01),h ;
@ssub=ld hl,$ac02+$4c ; Point #REGhl to first address after "jump" in redefine_keys_wizard_text
 $ab33 ld hl,$ac4e   ;
 $ab36 ld de,$0005   ;
*$ab39 add hl,de     ;
 $ab3a djnz $ab39    ;
*$ab3c inc hl        ;
 $ab3d srl c         ;
 $ab3f jr c,$ab3c    ;
 $ab41 ld a,(hl)     ;
 $ab42 pop bc        ;
 $ab43 push bc       ;
 $ab44 ld (bc),a     ;
 $ab45 push af       ;
 $ab46 call $aaba    ;
 $ab49 pop af        ;
 $ab4a dec b         ;
 $ab4b jr z,$ab24    ;
 $ab4d pop bc        ;
 $ab4e pop hl        ;
 $ab4f push hl       ;
 $ab50 push bc       ;
 $ab51 call $9c40    ; UpdateScreenGfx
*$ab54 call $aaf4    ;
 $ab57 ld a,l        ;
 $ab58 and a         ;
 $ab59 jr nz,$ab54   ;
 $ab5b pop bc        ;
 $ab5c pop de        ;
 $ab5d pop hl        ;
 $ab5e pop af        ;
 $ab5f ret           ;

; Play the theme tune.
;
; Used by the routines at #R$a420, #R$a6fe and #R$ab70.
@label=PlayTune
c$ab60 ld c,(hl)     ;
 $ab61 inc hl        ;
 $ab62 ld b,(hl)     ;
 $ab63 inc hl        ;
 $ab64 ld a,c        ;
 $ab65 and a         ;
 $ab66 ret z         ;
 $ab67 push hl       ;
 $ab68 push bc       ;
 $ab69 call $2d28    ;
 $ab6c rst $28       ; RST $28 can jump back to AB70

; Probably unused. Looks like code but the RST $28 means it's never reached!
b$ab6d defb $a4,$05,$38

; The above RST $28 returns here!
c$ab70 pop bc        ;
 $ab71 ld a,b        ;
 $ab72 call $2d28    ;
 $ab75 call $03f8    ;
 $ab78 pop hl        ;
 $ab79 jr $ab60      ; PlayTune

; Scroll the ticket text across the screen
;
; Used by the routines at #R$a47d, #R$a515, #R$a59d and #R$a9ce.
@label=ScrollTickerText
c$ab7b push de       ;
 $ab7c push bc       ;
 $ab7d push af       ;
 $ab7e ld d,$08      ;
*$ab80 push hl       ;
 $ab81 pop bc        ;
 $ab82 inc bc        ;
 $ab83 ld e,$1e      ;
*$ab85 sla (hl)      ;
 $ab87 ld a,(bc)     ;
 $ab88 bit 7,a       ;
 $ab8a jr z,$ab8e    ;
 $ab8c set 0,(hl)    ;
*$ab8e inc hl        ;
 $ab8f inc bc        ;
 $ab90 dec e         ;
 $ab91 jr nz,$ab85   ;
 $ab93 ld bc,$00e2   ;
 $ab96 add hl,bc     ;
 $ab97 dec d         ;
 $ab98 jr nz,$ab80   ;
 $ab9a pop af        ;
 $ab9b pop bc        ;
 $ab9c pop de        ;
 $ab9d ret           ;

; Clears the entire screen to black: from bottom to top.
;
; Used by the routines at #R$a420, #R$a4c8, #R$a6fe and #R$aa49.
@label=ClearScreen
c$ab9e ld hl,$5aff   ;
 $aba1 ld bc,$1b00   ;
*$aba4 ld (hl),$00   ;
 $aba6 dec bc        ;
 $aba7 dec hl        ;
 $aba8 ld a,c        ;
 $aba9 or b          ;
 $abaa jr nz,$aba4   ;
 $abac ret           ;

; Displays scoreboard with heading and names/scores list
;
; Used by the routines at #R$a420 and #R$a828.
@label=DisplayScoreboard
c$abad ld de,$abf2   ; Point #REGde to high_score_heading_text
 $abb0 ld h,$17      ;
 $abb2 ld l,$10      ;
 $abb4 ld b,$10      ;
*$abb6 ld a,(de)     ;
 $abb7 call $9c40    ; UpdateScreenGfx
 $abba inc l         ;
 $abbb inc de        ;
 $abbc djnz $abb6    ;
 $abbe ld h,$15      ;
 $abc0 ld de,$97af   ; set #REGde to high score table
*$abc3 ld l,$10      ;
 $abc5 ld b,$10      ;
*$abc7 ld a,(de)     ;
 $abc8 call $9c40    ; UpdateScreenGfx
 $abcb inc l         ;
 $abcc inc de        ;
 $abcd djnz $abc7    ;
 $abcf dec h         ;
 $abd0 dec h         ;
 $abd1 ld a,h        ;
 $abd2 cp $02        ;
 $abd4 jr nc,$abc3   ;
 $abd6 ld hl,$5810   ; {update screen colours
 $abd9 ld de,$0010   ;
 $abdc ld c,$15      ;
*$abde ld b,$10      ;
*$abe0 ld (hl),$17   ;
 $abe2 inc hl        ;
 $abe3 djnz $abe0    ;
 $abe5 add hl,de     ;
 $abe6 dec c         ;
 $abe7 jr nz,$abde   ; }
 $abe9 ret           ;

; Small lookup table used by #R$AAE4 to assign #REGa, for use with
; GetLookupTableAddress
b$abea defb $01,$10,$13,$17,$1e,$20,$21,$01

; High score table heading text data
@label=high_score_heading_text
t$abf2 defm "high score table"

; Wizard instructions for redefining the keys
@label=redefine_keys_wizard_text
t$ac02 defm "press the key you wish to use to"
 $ac22 defm "move up   "
 $ac2c defm "move down "
 $ac36 defm "move left "
 $ac40 defm "move right"
 $ac4a defm "jump      "

; Alphabet characters, but out of order
t$ac54 defb $97,$99,"mnb",$9a,"lkjhpoiuy0987612345qwertasdfg",$98,"zxcv"

; Home screen ticker text
@label=home_screen_ticker_text
t$ac7c defm "{",$00,"press S to start game "
; Redefine keys text
 $ac94 defm "{",$00,"press R to redefine keys "
; Instructions text
 $acaf defm "{",$00,"press I for instructions "

; Instructions screen ticker text
@label=instructions_screen_ticker_text
t$acca defm "{",$00,"press S to start game "
; Redefine keys text
 $ace2 defm "{",$00,"press R to redefine keys "
; Select key type
 $acfd defm "{",$00,"press 1,2 or 3 to select key type "

; "1,2,3 or 4 players ?" - choose number of players text data
@label=choose_number_of_players_text
t$ad21 defm "1,2,3 or 4 players ?          "

; "game over player 1 " text data
@label=game_over_text
t$ad3f defm "game over player 1 "

; "level" text (for current level?)
@label=level_text
t$ad52 defm "level "

; Used as an address.
w$ad58 defw $9f9e

; "OUT OF TIME !" text data
@label=out_of_time_text
t$ad5a defm "OUT OF TIME !"

; Congratulate player on new high score, and instructions.
@label=new_high_score_text
t$ad67 defm "   PLAYER  1   "
 $ad76 defm "               "
 $ad85 defm "  well  done!  "
 $ad94 defm "you have beaten"
 $ada3 defm " one of todays "
 $adb2 defm "highest scores."
 $adc1 defm "               "
 $add0 defm "  please type  "
 $addf defm "in your name or"
 $adee defm " initials then "
 $adfd defm " press  ENTER. "

; Chuckie Egg theme tune
;
; Notes for the tune; byte 0: length, byte 1: pitch
@label=theme_tune
b$ae0c defb $01,$10
 $ae0e defb $01,$10
 $ae10 defb $01,$12
 $ae12 defb $01,$12
 $ae14 defb $01,$0d
 $ae16 defb $01,$0d
 $ae18 defb $02,$10
 $ae1a defb $01,$10
 $ae1c defb $01,$10
 $ae1e defb $01,$12
 $ae20 defb $01,$12
 $ae22 defb $01,$0d
 $ae24 defb $01,$0d
 $ae26 defb $02,$10
 $ae28 defb $01,$10
 $ae2a defb $01,$10
 $ae2c defb $02,$12
 $ae2e defb $02,$15
 $ae30 defb $02,$14
 $ae32 defb $02,$14
 $ae34 defb $02,$12
 $ae36 defb $02,$10
 $ae38 defb $02,$0e
 $ae3a defb $01,$0e
 $ae3c defb $01,$0e
 $ae3e defb $01,$10
 $ae40 defb $01,$10
 $ae42 defb $01,$0b
 $ae44 defb $01,$0b
 $ae46 defb $02,$0e
 $ae48 defb $01,$0e
 $ae4a defb $01,$0e
 $ae4c defb $01,$10
 $ae4e defb $01,$10
 $ae50 defb $01,$0b
 $ae52 defb $01,$0b
 $ae54 defb $02,$0e
 $ae56 defb $01,$0e
 $ae58 defb $01,$0e
 $ae5a defb $02,$10
 $ae5c defb $02,$12
 $ae5e defb $02,$13
 $ae60 defb $02,$10
 $ae62 defb $02,$0e
 $ae64 defb $02,$0b
 $ae66 defb $02,$07
 $ae68 defb $00,$00

; Death tune, played when the farmer, well, dies.
;
; Notes for the tune; byte 0: length, byte 1: pitch
@label=death_tune
b$ae6a defb $02,$08
 $ae6c defb $02,$08
 $ae6e defb $02,$08
 $ae70 defb $02,$08
 $ae72 defb $02,$06
 $ae74 defb $02,$04
 $ae76 defb $02,$04
 $ae78 defb $02,$03
 $ae7a defb $02,$01
 $ae7c defb $02,$01
 $ae7e defb $02,$04
 $ae80 defb $02,$08
 $ae82 defb $02,$0d
 $ae84 defb $02,$0d
 $ae86 defb $02,$0d
 $ae88 defb $02,$0d
 $ae8a defb $02,$0b
 $ae8c defb $02,$09
 $ae8e defb $02,$09
 $ae90 defb $02,$08
 $ae92 defb $02,$06
 $ae94 defb $02,$06
 $ae96 defb $02,$08
 $ae98 defb $02,$09
 $ae9a defb $00,$00

; Called just before showing new level
;
; Used by the routine at #R$a62c.
c$ae9c ld hl,$5aff     ; {Point #REGhl to "end" of ATTRIBUTE_FILE, then blank
 $ae9f ld bc,$1b00     ; some or all of the screen
*$aea2 ld (hl),$00     ;
 $aea4 dec hl          ;
 $aea5 dec bc          ;
 $aea6 ld a,b          ;
 $aea7 or c            ;
 $aea8 jr nz,$aea2     ; }
 $aeaa ld bc,$61a8     ;
 $aead ld h,$00        ;
*$aeaf ld l,$00        ;
*$aeb1 ld a,(bc)       ;
 $aeb2 call $9c40      ; UpdateScreenGfx
 $aeb5 inc bc          ;
 $aeb6 inc l           ;
 $aeb7 ld a,l          ;
 $aeb8 cp $20          ;
 $aeba jr nz,$aeb1     ;
 $aebc inc h           ;
 $aebd ld a,h          ;
 $aebe cp $15          ;
 $aec0 jr nz,$aeaf     ;
 $aec2 ld a,($6eeb)    ;
 $aec5 ld b,a          ;
 $aec6 inc b           ;
 $aec7 xor a           ;
*$aec8 add a,$01       ;
 $aeca daa             ; WARNING! opcode: DAA
 $aecb djnz $aec8      ;
 $aecd ld d,a          ;
 $aece and $0f         ;
 $aed0 add a,$9e       ;
 $aed2 ld ($9773),a    ;
 $aed5 ld a,d          ;
 $aed6 ld b,$04        ;
*$aed8 srl a           ;
 $aeda djnz $aed8      ;
 $aedc add a,$9e       ;
 $aede ld ($9772),a    ;
 $aee1 ld a,($6eeb)    ;
 $aee4 inc a           ;
 $aee5 cp $0a          ;
 $aee7 jr c,$aeeb      ;
 $aee9 ld a,$09        ;
*$aeeb ld ($733f),a    ;
 $aeee add a,$9e       ;
 $aef0 ld ($977a),a    ;
 $aef3 ld a,($6eeb)    ;
 $aef6 srl a           ;
 $aef8 srl a           ;
 $aefa srl a           ;
 $aefc srl a           ;
 $aefe cp $05          ;
 $af00 jr c,$af04      ;
 $af02 ld a,$05        ;
*$af04 ld c,a          ;
 $af05 ld a,$09        ;
 $af07 sub c           ;
 $af08 ld ($7342),a    ;
 $af0b add a,$9e       ;
 $af0d ld ($9784),a    ;
 $af10 ld a,($733b)    ; Get current_player
 $af13 add a,$9e       ;
 $af15 ld ($976b),a    ;
 $af18 ld hl,$1700     ;
 $af1b ld de,$9764     ;
 $af1e ld b,$03        ;
*$af20 ld a,(de)       ;
 $af21 call $9c40      ; UpdateScreenGfx
 $af24 inc l           ;
 $af25 inc de          ;
 $af26 djnz $af20      ;
 $af28 ld hl,$1500     ;
 $af2b ld b,$20        ;
*$af2d ld a,(de)       ;
 $af2e call $9c40      ; UpdateScreenGfx
 $af31 inc l           ;
 $af32 inc de          ;
 $af33 djnz $af2d      ;
 $af35 ld hl,$3ffe     ;
 $af38 ld ($733d),hl   ;
 $af3b ld a,($733a)    ; Get number_of_players
 $af3e ld hl,$6ece     ; {Copy current score to player 1 score
*$af41 ld de,$6ec8     ;
 $af44 ld bc,$0006     ;
 $af47 ldir            ; }
 $af49 push hl         ;
 $af4a ld bc,$0007     ;
 $af4d ld hl,($733d)   ;
 $af50 add hl,bc       ;
 $af51 ld ($733d),hl   ;
 $af54 ld b,$00        ;
 $af56 push af         ;
 $af57 call $a3a7      ;
 $af5a pop af          ;
 $af5b pop hl          ;
 $af5c dec a           ;
 $af5d jr nz,$af41     ;
 $af5f ld bc,$0006     ;
 $af62 ld hl,$6ec8     ;
 $af65 ld a,($733b)    ; Get current_player
*$af68 add hl,bc       ;
 $af69 dec a           ;
 $af6a jr nz,$af68     ;
 $af6c ld de,$6ec8     ;
 $af6f ldir            ;
 $af71 ld a,($6ec9)    ;
 $af74 ld ($736e),a    ;
 $af77 ld b,$14        ;
 $af79 ld hl,$7357     ;
*$af7c ld (hl),$ff     ;
 $af7e inc hl          ;
 $af7f djnz $af7c      ;
 $af81 ld a,($6eeb)    ;
 $af84 cp $08          ;
 $af86 jr c,$af8c      ;
 $af88 cp $10          ;
 $af8a jr c,$afad      ;
*$af8c and $07         ;
 $af8e ld hl,$945b     ;
 $af91 ld bc,$0015     ;
 $af94 inc a           ;
*$af95 add hl,bc       ;
 $af96 dec a           ;
 $af97 jr nz,$af95     ;
 $af99 ld b,(hl)       ;
 $af9a inc hl          ;
 $af9b ld a,($6eeb)    ;
 $af9e cp $18          ;
 $afa0 jr c,$afa4      ;
 $afa2 ld b,$14        ;
*$afa4 ld de,$7357     ;
*$afa7 ld a,(hl)       ;
 $afa8 ld (de),a       ;
 $afa9 inc de          ;
 $afaa inc hl          ;
 $afab djnz $afa7      ;
*$afad ld hl,$0001     ;
 $afb0 ld ($736b),hl   ;
 $afb3 ld h,$16        ;
 $afb5 ld l,$05        ;
 $afb7 ld a,($733a)    ; Get number_of_players
 $afba ld b,a          ;
 $afbb ld de,$6ef0     ;
*$afbe push hl         ;
 $afbf ld a,(de)       ;
 $afc0 cp $07          ;
 $afc2 jr c,$afc6      ;
 $afc4 ld a,$06        ;
*$afc6 inc de          ;
 $afc7 and a           ;
 $afc8 jr z,$afd4      ;
 $afca ld c,a          ;
 $afcb ld a,$b6        ;
*$afcd call $9c40      ; UpdateScreenGfx
 $afd0 inc l           ;
 $afd1 dec c           ;
 $afd2 jr nz,$afcd     ;
*$afd4 pop hl          ;
 $afd5 ld a,l          ;
 $afd6 add a,$07       ;
 $afd8 ld l,a          ;
 $afd9 djnz $afbe      ;
 $afdb ld hl,$0000     ;
 $afde ld b,$03        ;
 $afe0 ld a,$17        ;
 $afe2 call $b130      ;
 $afe5 inc h           ;
 $afe6 ld b,$20        ;
 $afe8 ld a,$06        ;
 $afea call $b130      ;
 $afed inc h           ;
 $afee ld b,$05        ;
 $aff0 ld a,$17        ;
 $aff2 call $b130      ;
 $aff5 ld l,$07        ;
 $aff7 inc b           ;
 $aff8 call $b130      ;
 $affb ld b,$08        ;
 $affd ld l,$0f        ;
 $afff call $b130      ;
 $b002 dec b           ;
 $b003 ld l,$19        ;
 $b005 call $b130      ;
 $b008 ld hl,$0005     ;
 $b00b ld bc,$0601     ;
*$b00e ld d,$0f        ;
 $b010 ld a,($733b)    ; Get current_player
 $b013 cp c            ;
 $b014 jr nz,$b018     ;
 $b016 ld d,$17        ;
*$b018 ld a,d          ;
 $b019 call $b130      ;
 $b01c ld a,l          ;
 $b01d add a,$07       ;
 $b01f ld l,a          ;
 $b020 inc c           ;
 $b021 ld a,($733a)    ; Get number_of_players
 $b024 cp c            ;
 $b025 jr nc,$b00e     ;
 $b027 ld hl,$61a8     ;
 $b02a ld de,$5ae0     ;
 $b02d ld c,$15        ;
*$b02f ld b,$20        ;
 $b031 push de         ;
*$b032 push bc         ;
 $b033 ld a,(hl)       ;
 $b034 cp $09          ;
 $b036 jr c,$b03c      ;
 $b038 ld a,$06        ;
 $b03a jr $b042        ;
*$b03c add a,$4f       ;
 $b03e ld b,$98        ;
 $b040 ld c,a          ;
 $b041 ld a,(bc)       ;
*$b042 ld (de),a       ;
 $b043 inc de          ;
 $b044 inc hl          ;
 $b045 pop bc          ;
 $b046 djnz $b032      ;
 $b048 pop de          ;
 $b049 ex de,hl        ;
 $b04a push de         ;
 $b04b ld de,$0020     ;
 $b04e and a           ;
 $b04f sbc hl,de       ;
 $b051 pop de          ;
 $b052 ex de,hl        ;
 $b053 dec c           ;
 $b054 jr nz,$b02f     ;
 $b056 ld ix,$72d8     ;
 $b05a ld (ix+$00),$64 ;
 $b05e ld (ix+$01),$17 ;
 $b062 ld (ix+$70),$08 ;
 $b066 ld (ix+$71),$98 ;
 $b06a ld (ix+$64),$05 ;
 $b06e xor a           ;
 $b06f ld (ix+$68),a   ;
 $b072 ld (ix+$69),a   ;
 $b075 ld (ix+$6b),a   ;
 $b078 ld (ix+$6c),a   ;
 $b07b ld (ix+$72),a   ;
 $b07e ld (ix+$73),a   ;
 $b081 ld (ix+$75),a   ;
 $b084 ld (ix+$7d),a   ;
 $b087 ld (ix+$02),a   ;
 $b08a ld (ix+$03),a   ;
 $b08d ld (ix+$4d),a   ;
 $b090 ld ($7356),a    ;
 $b093 ld ($7370),a    ;
 $b096 inc a           ;
 $b097 ld (ix+$6f),a   ;
 $b09a ld (ix+$6d),a   ;
 $b09d ld (ix+$6e),a   ;
 $b0a0 ld (ix+$74),a   ;
 $b0a3 ld (ix+$04),a   ;
 $b0a6 ld a,($732d)    ; Set #REGa to current game_state.
 $b0a9 cp $05          ; Is it set to input type selection?
 $b0ab ld hl,$825c     ; {Point #REGhl to input type #2.
 $b0ae jr z,$b0b8      ; }
 $b0b0 ld hl,$8268     ; {Point #REGhl to input type #3.
 $b0b3 jr c,$b0b8      ; }
 $b0b5 ld hl,$8250     ; Point #REGhl to input type #1 (default).
*$b0b8 ld bc,$000c     ; {Update the game input control keys with selected
 $b0bb ld de,$732e     ; input type stored in #REGhl.
 $b0be ldir            ; }
 $b0c0 ld bc,$0007     ;
 $b0c3 ld hl,$3ffe     ;
 $b0c6 ld a,($733b)    ; Get current_player
*$b0c9 add hl,bc       ;
 $b0ca dec a           ;
 $b0cb jr nz,$b0c9     ;
 $b0cd ld ($733d),hl   ;
 $b0d0 ld bc,$0004     ;
 $b0d3 ld hl,$9787     ;
 $b0d6 push hl         ;
 $b0d7 pop de          ;
 $b0d8 ld a,($6eeb)    ;
 $b0db and $07         ;
 $b0dd inc a           ;
*$b0de add hl,bc       ;
 $b0df dec a           ;
 $b0e0 jr nz,$b0de     ;
 $b0e2 ldir            ;
 $b0e4 ld bc,$0004     ;
 $b0e7 and a           ;
 $b0e8 sbc hl,bc       ;
 $b0ea ld de,$734e     ;
 $b0ed ldir            ;
 $b0ef ld (ix+$7c),$43 ;
 $b0f3 ld hl,($734e)   ;
 $b0f6 ld bc,$0800     ;
 $b0f9 and a           ;
 $b0fa sbc hl,bc       ;
 $b0fc ld ($7352),hl   ;
 $b0ff call $b14f      ;
 $b102 ld d,$1e        ; {Players score is a multiple of 10,000 points?
*$b104 ld bc,$2710     ;
*$b107 dec bc          ;
 $b108 ld a,b          ;
 $b109 or c            ;
 $b10a jr nz,$b107     ; }
 $b10c dec d           ;
 $b10d jr nz,$b104     ;
 $b10f ld a,($733b)    ; Get current_player
 $b112 ld l,a          ; {Calculate address of lives variable for current
 $b113 ld h,$00        ; player, and assign to #REGhl
 $b115 ld de,$6eef     ;
 $b118 add hl,de       ; }
 $b119 ld c,a          ;
 $b11a ld a,(hl)       ; Load #REGa with remaining lives of current player
 $b11b cp $07          ;
 $b11d jr nc,$b12d     ;
 $b11f sub $03         ;
*$b121 add a,$07       ;
 $b123 dec c           ;
 $b124 jr nz,$b121     ;
 $b126 ld h,$16        ;
 $b128 ld l,a          ;
 $b129 xor a           ;
 $b12a call $9c40      ; UpdateScreenGfx
*$b12d jp $9858        ;

; Update colours?
;
; Used by the routine at #R$ae9c.
c$b130 push hl       ;
 $b131 push bc       ;
 $b132 push af       ;
 $b133 ld e,l        ;
 $b134 ld a,h        ;
 $b135 ld hl,$5800   ; Point #REGhl to start of ATTRIBUTE_FILE.
 $b138 and a         ;
 $b139 jr z,$b144    ;
 $b13b ld hl,$5820   ;
 $b13e dec a         ;
 $b13f jr z,$b144    ;
 $b141 ld hl,$5840   ;
*$b144 ld d,$00      ;
 $b146 add hl,de     ;
 $b147 pop af        ;
*$b148 ld (hl),a     ;
 $b149 inc hl        ;
 $b14a djnz $b148    ;
 $b14c pop bc        ;
 $b14d pop hl        ;
 $b14e ret           ;

; After death, screen is redrawn, before ostriches/farmer displayed
;
; Note: exactly same as #R$A389, #R$AAE4, except for #REGhl address.
;
; .
;
; Does accessing #REGhl instruction before the #REGr have any importance? (see
; "R Register" https://www.worldofspectrum.org/faq/reference/z80reference.htm)
@ssub=ld hl,$b15f-$01
c$b14f ld hl,$b15e   ;
 $b152 ld a,r        ; {Load #REGb with #REGr (related to memory refresh), then
 $b154 and $07       ; after processing #REGb will have a value between 1-8.
 $b156 inc a         ;
 $b157 ld b,a        ; }
*$b158 inc hl        ; {Increment #REGhl to required address, and assign #REGa.
 $b159 djnz $b158    ;
 $b15b ld a,(hl)     ; }
 $b15c jp $9ceb      ; GetLookupTableAddress

; Small lookup table used by #R$B14F to assign #REGa, for use with
; GetLookupTableAddress
b$b15f defb $02,$08,$0a,$0b,$0c,$11,$11,$02

; Source code remnants
;
; The source code here corresponds to the code at end of #R$A566...maybe!
b$b167 defb $20,$4a,$52,$20,$43,$2c,$43,$31
 $b16f defb $30,$0d,$22,$90,$20,$20,$4c,$44
 $b177 defb $20,$44,$45,$2c,$32,$32,$38,$34
 $b17f defb $39,$0d,$23,$00,$20,$43,$31,$30
 $b187 defb $20,$4c,$44,$20,$42,$2c,$33,$0d
 $b18f defb $23,$10,$20,$20,$4c,$44,$20,$41
 $b197 defb $2c,$31,$35,$31,$0d,$23,$20,$20
 $b19f defb $20,$4c,$44,$20,$28,$48,$4c,$29
 $b1a7 defb $2c,$32,$33,$0d,$23,$30,$20,$20
 $b1af defb $4c,$44,$20,$28,$44,$45,$29,$2c
 $b1b7 defb $41,$0d,$23,$40,$20,$20,$49,$4e
 $b1bf defb $43,$20,$48,$4c,$0d,$23,$50,$20
 $b1c7 defb $20,$49,$4e,$43,$20,$44,$45,$0d
 $b1cf defb $23,$60,$20,$20,$44,$4a,$4e,$5a
 $b1d7 defb $20,$2d,$37,$0d,$23,$70,$20,$3b
 $b1df defb $20,$20,$0d,$23,$80,$20,$43,$38
 $b1e7 defb $20,$4a,$50,$20,$53,$43,$52,$4c
 $b1ef defb $32,$0d,$23,$90,$20,$3b,$20,$20
 $b1f7 defb $0d,$25,$00,$20,$49,$4e,$49,$54
 $b1ff defb $47

; Data block at b200
b$b200 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b208 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b210 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b218 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b220 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b228 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b230 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b238 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b240 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b248 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b250 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b258 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b260 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b268 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b270 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b278 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b280 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b288 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b290 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b298 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2a0 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2a8 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2b0 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2b8 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2c0 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2c8 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2d0 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2d8 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2e0 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2e8 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2f0 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b2f8 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c,$9c
 $b300 defb $9c,$9c,$9c,$9c,$9c,$9c,$9c

; Source code remnants
;
; The source code here corresponds to the code in middle of #R$A59D.
b$b307 defb $20,$43,$41,$4c,$4c,$20,$34,$30
 $b30f defb $30,$30,$30,$0d,$27,$00,$20,$20
 $b317 defb $4c,$44,$20,$42,$2c,$38,$0d,$27
 $b31f defb $10,$20,$43,$31,$35,$20,$4c,$44
 $b327 defb $20,$48,$4c,$2c,$31,$38,$35,$32
 $b32f defb $39,$0d,$27,$20,$20,$20,$43,$41
 $b337 defb $4c,$4c,$20,$53,$43,$52,$4f,$4c
 $b33f defb $0d,$27,$30,$20,$20,$44,$45,$43
 $b347 defb $20,$43,$0d,$27,$40

; Note, label added because Pasmo was complaining.
;
; Used by the routine at #R$98e6.
@label=LB34C
c$b34c ld a,($72d8)  ;
 $b34f and $07       ;
 $b351 ret z         ;
 $b352 ld hl,($72d8) ;
 $b355 call $9e34    ;
 $b358 ld bc,$003f   ;
 $b35b and a         ;
 $b35c sbc hl,bc     ;
 $b35e ld a,(hl)     ;
 $b35f cp $05        ;
 $b361 ret nc        ;
 $b362 cp $01        ;
 $b364 ret z         ;
 $b365 cp $02        ;
 $b367 ret z         ;
 $b368 ld a,$01      ;
 $b36a ld ($7325),a  ;
 $b36d ld d,$ff      ;
 $b36f ld a,($72db)  ;
 $b372 and a         ;
 $b373 jr nz,$b377   ;
 $b375 ld d,$01      ;
*$b377 ld a,d        ;
 $b378 ld ($7326),a  ;
 $b37b ld a,$04      ;
 $b37d ld ($7327),a  ;
 $b380 ret           ;

; Source code remnants
;
; The source code here corresponds to the code in middle of #R$A59D.
b$b381 defb $20,$41,$4e,$44,$20,$31,$35,$0d
 $b389 defb $27,$90,$20,$20,$43,$50,$20,$31
 $b391 defb $35,$0d,$28,$00,$20,$20,$4a,$52
 $b399 defb $20,$5a,$2c,$4c,$34,$31,$0d,$28
 $b3a1 defb $10,$20,$20,$4c,$44,$20,$42,$2c
 $b3a9 defb $30,$0d,$28,$20,$20,$4c,$34

; Level 1 layout data - see level_buffer for byte map
@label=level_1
b$b3b0 defb $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $b3c0 defb $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $b3d0 defb $00,$00,$00,$00,$04,$00,$03,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b3e0 defb $01,$02,$00,$00,$00,$04,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b3f0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b400 defb $01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b410 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b420 defb $01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b430 defb $00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$01,$02,$05,$05,$05,$05
 $b440 defb $01,$02,$05,$05,$05,$05,$05,$05,$05,$05,$01,$02,$05,$05,$00,$00
 $b450 defb $00,$00,$00,$03,$00,$01,$02,$00,$04,$00,$01,$02,$00,$00,$00,$00
 $b460 defb $01,$02,$00,$00,$03,$00,$00,$04,$00,$00,$01,$02,$00,$03,$00,$00
 $b470 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b480 defb $01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b490 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b4a0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b4b0 defb $00,$00,$00,$00,$05,$01,$02,$05,$05,$05,$01,$02,$05,$05,$05,$00
 $b4c0 defb $00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$00
 $b4d0 defb $00,$00,$00,$00,$03,$01,$02,$00,$04,$00,$01,$02,$00,$00,$00,$05
 $b4e0 defb $05,$05,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$03,$00,$00,$00
 $b4f0 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b500 defb $03,$00,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b510 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b520 defb $00,$00,$00,$00,$00,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00
 $b530 defb $00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$01,$02,$00,$00,$00,$00
 $b540 defb $00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$00,$00,$00,$00,$00
 $b550 defb $00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$01,$02,$00,$00,$00,$05
 $b560 defb $05,$05,$05,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00
 $b570 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b580 defb $03,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b590 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b5a0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b5b0 defb $b2,$b3,$b4,$b5,$00,$00,$00,$00,$05,$05,$01,$02,$05,$05,$05,$05
 $b5c0 defb $00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05
 $b5d0 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$03,$01,$02,$00,$00,$00,$04
 $b5e0 defb $00,$00,$00,$00,$03,$00,$04,$00,$00,$00,$00,$00,$00,$00,$03,$00
 $b5f0 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00
 $b600 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b610 defb $aa,$ab,$ac,$ad,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b620 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b630 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b640 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 2 layout data - see level_buffer for byte map
@label=level_2
b$b650 defb $05,$05,$05,$05,$05,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05
 $b660 defb $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $b670 defb $00,$04,$00,$01,$02,$04,$00,$00,$03,$00,$00,$00,$00,$00,$00,$01
 $b680 defb $02,$00,$00,$00,$03,$00,$00,$00,$00,$04,$00,$01,$02,$00,$00,$00
 $b690 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $b6a0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b6b0 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $b6c0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b6d0 defb $05,$05,$05,$01,$02,$05,$05,$05,$05,$05,$05,$05,$00,$00,$05,$01
 $b6e0 defb $02,$05,$00,$00,$05,$05,$05,$05,$00,$00,$05,$01,$02,$05,$05,$05
 $b6f0 defb $00,$03,$00,$01,$02,$00,$03,$00,$00,$01,$02,$00,$00,$00,$00,$01
 $b700 defb $02,$00,$00,$00,$00,$03,$00,$00,$00,$00,$04,$01,$02,$00,$00,$00
 $b710 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01
 $b720 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b730 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00
 $b740 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b750 defb $05,$05,$05,$01,$02,$05,$00,$00,$05,$01,$02,$05,$05,$05,$05,$05
 $b760 defb $05,$05,$05,$05,$05,$05,$05,$05,$00,$00,$05,$01,$02,$05,$05,$05
 $b770 defb $00,$03,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$03,$00,$00,$01
 $b780 defb $02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$03,$00
 $b790 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01
 $b7a0 defb $02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b7b0 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01
 $b7c0 defb $02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b7d0 defb $05,$05,$05,$01,$02,$05,$05,$05,$05,$01,$02,$05,$05,$05,$05,$01
 $b7e0 defb $02,$05,$00,$00,$05,$01,$02,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $b7f0 defb $00,$04,$00,$01,$02,$00,$01,$02,$00,$01,$02,$00,$03,$00,$00,$01
 $b800 defb $02,$04,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b810 defb $00,$00,$00,$01,$02,$00,$01,$02,$00,$01,$02,$00,$00,$00,$00,$01
 $b820 defb $02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b830 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$01
 $b840 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b850 defb $b2,$b3,$b4,$b5,$00,$00,$01,$02,$05,$05,$05,$05,$05,$05,$05,$01
 $b860 defb $02,$05,$00,$00,$05,$05,$05,$05,$05,$05,$05,$01,$02,$05,$05,$05
 $b870 defb $ae,$af,$b0,$b1,$00,$00,$01,$02,$00,$00,$00,$00,$03,$00,$00,$01
 $b880 defb $02,$00,$00,$00,$04,$00,$00,$00,$03,$00,$00,$01,$02,$00,$03,$00
 $b890 defb $ae,$af,$b0,$b1,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$01
 $b8a0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $b8b0 defb $aa,$ab,$ac,$ad,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b8c0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b8d0 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b8e0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 3 layout data - see level_buffer for byte map
@label=level_3
b$b8f0 defb $05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05
 $b900 defb $00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $b910 defb $00,$01,$02,$04,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b920 defb $00,$00,$00,$00,$00,$00,$04,$00,$00,$03,$00,$00,$00,$01,$02,$00
 $b930 defb $00,$01,$02,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b940 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00
 $b950 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $b960 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$01,$02,$00
 $b970 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05
 $b980 defb $05,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00,$03,$00,$01,$02,$00
 $b990 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$04,$01,$02,$03,$01
 $b9a0 defb $02,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$01,$02,$00
 $b9b0 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $b9c0 defb $02,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00
 $b9d0 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $b9e0 defb $02,$00,$00,$00,$00,$00,$00,$00,$03,$00,$05,$05,$00,$00,$00,$00
 $b9f0 defb $05,$01,$02,$05,$05,$05,$05,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $ba00 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$00
 $ba10 defb $00,$01,$02,$04,$01,$02,$03,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $ba20 defb $02,$00,$05,$05,$05,$00,$05,$05,$00,$00,$00,$00,$00,$01,$02,$00
 $ba30 defb $00,$01,$02,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $ba40 defb $02,$00,$00,$00,$04,$00,$00,$03,$00,$00,$00,$00,$00,$01,$02,$00
 $ba50 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $ba60 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$01,$02,$00
 $ba70 defb $05,$05,$05,$05,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $ba80 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$01,$02,$00
 $ba90 defb $00,$04,$03,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $baa0 defb $02,$00,$00,$00,$00,$00,$05,$05,$00,$00,$03,$00,$00,$01,$02,$00
 $bab0 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $bac0 defb $02,$00,$05,$05,$05,$00,$04,$00,$00,$00,$00,$00,$00,$03,$00,$00
 $bad0 defb $00,$00,$00,$00,$01,$02,$05,$00,$00,$00,$00,$05,$01,$02,$05,$01
 $bae0 defb $02,$05,$04,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $baf0 defb $b2,$b3,$b4,$b5,$01,$02,$03,$00,$00,$00,$00,$04,$01,$02,$00,$01
 $bb00 defb $02,$00,$00,$01,$02,$00,$00,$00,$00,$00,$05,$00,$00,$05,$05,$05
 $bb10 defb $ae,$af,$b0,$b1,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$01
 $bb20 defb $02,$00,$00,$01,$02,$05,$05,$05,$05,$05,$00,$00,$00,$04,$03,$00
 $bb30 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bb40 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bb50 defb $aa,$ab,$ac,$ad,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bb60 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bb70 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bb80 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 4 layout data - see level_buffer for byte map
@label=level_4
b$bb90 defb $05,$05,$05,$05,$05,$05,$05,$05,$00,$05,$05,$05,$05,$05,$05,$05
 $bba0 defb $05,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $bbb0 defb $00,$03,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bbc0 defb $04,$00,$00,$00,$00,$03,$00,$00,$01,$02,$00,$00,$00,$04,$00,$00
 $bbd0 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bbe0 defb $00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00
 $bbf0 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bc00 defb $00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$05,$05
 $bc10 defb $05,$05,$05,$05,$01,$02,$05,$05,$00,$00,$05,$05,$01,$02,$05,$05
 $bc20 defb $05,$00,$00,$00,$00,$05,$05,$05,$01,$02,$05,$05,$00,$00,$00,$00
 $bc30 defb $00,$04,$00,$00,$01,$02,$00,$00,$00,$00,$03,$00,$01,$02,$00,$00
 $bc40 defb $00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$03,$00,$00,$00,$00
 $bc50 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bc60 defb $00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00
 $bc70 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bc80 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05
 $bc90 defb $05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$02,$00,$00
 $bca0 defb $00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$00,$03,$00
 $bcb0 defb $00,$03,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bcc0 defb $00,$00,$00,$00,$00,$03,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $bcd0 defb $00,$00,$00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$01,$02,$00,$00
 $bce0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $bcf0 defb $00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$05,$05,$01,$02,$00,$00
 $bd00 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $bd10 defb $05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$05,$05
 $bd20 defb $05,$00,$00,$00,$00,$05,$01,$02,$00,$05,$05,$03,$05,$01,$02,$05
 $bd30 defb $00,$03,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$01,$02,$00,$03
 $bd40 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00
 $bd50 defb $00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bd60 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00
 $bd70 defb $00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$01,$02,$00,$00
 $bd80 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00
 $bd90 defb $b2,$b3,$b4,$b5,$00,$00,$00,$00,$05,$05,$00,$05,$01,$02,$05,$05
 $bda0 defb $05,$00,$00,$00,$00,$05,$01,$02,$05,$05,$03,$05,$05,$01,$02,$05
 $bdb0 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$04,$00
 $bdc0 defb $00,$00,$00,$00,$00,$04,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00
 $bdd0 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00
 $bde0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00
 $bdf0 defb $aa,$ab,$ac,$ad,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $be00 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00
 $be10 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $be20 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 5 layout data - see level_buffer for byte map
@label=level_5
b$be30 defb $05,$05,$05,$00,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $be40 defb $05,$05,$00,$00,$05,$05,$05,$05,$00,$00,$00,$00,$05,$05,$05,$05
 $be50 defb $00,$03,$00,$00,$01,$02,$00,$04,$04,$04,$00,$01,$02,$00,$00,$01
 $be60 defb $02,$00,$00,$00,$04,$01,$02,$04,$00,$00,$00,$00,$04,$00,$00,$00
 $be70 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00,$00,$01
 $be80 defb $02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $be90 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$01,$02,$00,$00,$01
 $bea0 defb $02,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $beb0 defb $05,$05,$05,$05,$01,$02,$05,$05,$05,$05,$00,$01,$02,$00,$05,$01
 $bec0 defb $02,$05,$05,$05,$03,$01,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00
 $bed0 defb $00,$03,$00,$00,$01,$02,$00,$00,$03,$00,$00,$01,$02,$00,$00,$01
 $bee0 defb $02,$00,$01,$02,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bef0 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $bf00 defb $02,$00,$01,$02,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bf10 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $bf20 defb $00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bf30 defb $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$00,$01,$02,$00,$03,$05
 $bf40 defb $05,$05,$01,$02,$05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$05,$05
 $bf50 defb $00,$03,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$00
 $bf60 defb $04,$00,$01,$02,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$03,$00
 $bf70 defb $00,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$00
 $bf80 defb $00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bf90 defb $00,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$00
 $bfa0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bfb0 defb $05,$05,$05,$01,$02,$05,$05,$01,$02,$05,$00,$01,$02,$00,$00,$00
 $bfc0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bfd0 defb $00,$03,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$00
 $bfe0 defb $00,$00,$00,$00,$00,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $bff0 defb $00,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c000 defb $00,$05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c010 defb $00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$05
 $c020 defb $00,$03,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c030 defb $b2,$b3,$b4,$b5,$00,$00,$05,$01,$02,$05,$05,$05,$05,$05,$00,$00
 $c040 defb $00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05
 $c050 defb $ae,$af,$b0,$b1,$00,$00,$04,$01,$02,$03,$00,$04,$04,$00,$00,$00
 $c060 defb $00,$00,$01,$02,$05,$05,$05,$05,$00,$00,$00,$00,$04,$00,$03,$00
 $c070 defb $ae,$af,$b0,$b1,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c080 defb $00,$00,$01,$02,$00,$03,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00
 $c090 defb $aa,$ab,$ac,$ad,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c0a0 defb $00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c0b0 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c0c0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 6 layout data - see level_buffer for byte map
@label=level_6
b$c0d0 defb $05,$05,$05,$05,$05,$00,$00,$00,$00,$05,$05,$05,$05,$05,$00,$00
 $c0e0 defb $00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00
 $c0f0 defb $00,$01,$02,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c100 defb $00,$00,$00,$04,$04,$04,$04,$00,$00,$00,$03,$01,$02,$00,$00,$00
 $c110 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c120 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c130 defb $00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $c140 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c150 defb $05,$01,$02,$05,$00,$05,$01,$02,$05,$05,$00,$00,$00,$00,$00,$00
 $c160 defb $00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$01,$02,$00,$00,$00
 $c170 defb $00,$01,$02,$00,$00,$00,$01,$02,$03,$00,$00,$00,$00,$00,$00,$00
 $c180 defb $00,$00,$00,$03,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00
 $c190 defb $00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $c1a0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00
 $c1b0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $c1c0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$05,$05,$05
 $c1d0 defb $00,$00,$00,$00,$05,$05,$01,$02,$05,$05,$05,$05,$00,$00,$00,$00
 $c1e0 defb $00,$00,$00,$05,$05,$05,$01,$02,$05,$05,$05,$01,$02,$00,$04,$00
 $c1f0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$04,$00,$00,$00,$00
 $c200 defb $00,$00,$00,$03,$00,$00,$01,$02,$00,$03,$00,$01,$02,$00,$00,$00
 $c210 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $c220 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00
 $c230 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $c240 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c250 defb $05,$05,$05,$05,$05,$05,$01,$02,$05,$05,$00,$00,$00,$00,$00,$00
 $c260 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$01,$02,$05,$05,$05
 $c270 defb $00,$04,$04,$04,$04,$00,$01,$02,$00,$00,$00,$03,$00,$00,$00,$00
 $c280 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$03,$00
 $c290 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00
 $c2a0 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00
 $c2b0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c2c0 defb $00,$00,$00,$05,$05,$05,$01,$02,$05,$05,$05,$01,$02,$00,$00,$00
 $c2d0 defb $b2,$b3,$b4,$b5,$00,$03,$00,$00,$00,$05,$05,$00,$05,$05,$00,$00
 $c2e0 defb $00,$00,$00,$03,$00,$00,$01,$02,$00,$00,$00,$01,$02,$00,$00,$00
 $c2f0 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00
 $c300 defb $00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$01,$02,$05,$05,$05
 $c310 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c320 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$03,$00
 $c330 defb $aa,$ab,$ac,$ad,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c340 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c350 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c360 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 7 layout data - see level_buffer for byte map
@label=level_7
b$c370 defb $00,$00,$00,$00,$00,$05,$05,$05,$05,$00,$00,$00,$05,$05,$05,$00
 $c380 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c390 defb $00,$01,$02,$00,$00,$01,$02,$00,$00,$05,$05,$05,$00,$00,$00,$05
 $c3a0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$03,$00,$00,$00
 $c3b0 defb $05,$01,$02,$03,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$05
 $c3c0 defb $00,$00,$00,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c3d0 defb $00,$01,$02,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c3e0 defb $00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c3f0 defb $00,$01,$02,$05,$05,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c400 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c410 defb $00,$01,$02,$00,$04,$01,$02,$00,$00,$00,$05,$05,$05,$05,$05,$00
 $c420 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c430 defb $00,$01,$02,$00,$00,$01,$02,$00,$00,$00,$05,$00,$03,$04,$00,$00
 $c440 defb $00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05,$00,$00,$00,$00
 $c450 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$00,$00
 $c460 defb $00,$00,$00,$00,$00,$00,$00,$01,$02,$03,$00,$00,$00,$00,$00,$00
 $c470 defb $05,$01,$02,$05,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$05,$00
 $c480 defb $00,$05,$05,$05,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c490 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$05,$00,$00,$00,$05,$00
 $c4a0 defb $00,$00,$03,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c4b0 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c4c0 defb $00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c4d0 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c4e0 defb $00,$00,$00,$05,$05,$05,$05,$01,$02,$03,$00,$00,$00,$00,$00,$00
 $c4f0 defb $05,$01,$02,$05,$05,$05,$05,$05,$05,$05,$00,$05,$05,$05,$00,$00
 $c500 defb $00,$00,$00,$00,$01,$02,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c510 defb $00,$01,$02,$00,$00,$00,$00,$00,$04,$00,$00,$00,$03,$00,$00,$00
 $c520 defb $00,$00,$00,$00,$01,$02,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00
 $c530 defb $00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c540 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c550 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c560 defb $00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c570 defb $b2,$b3,$b4,$b5,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02
 $c580 defb $00,$00,$05,$05,$01,$02,$05,$05,$05,$05,$05,$05,$00,$00,$00,$00
 $c590 defb $ae,$af,$b0,$b1,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02
 $c5a0 defb $00,$00,$00,$04,$01,$02,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00
 $c5b0 defb $ae,$af,$b0,$b1,$00,$00,$01,$02,$03,$00,$01,$02,$03,$00,$01,$02
 $c5c0 defb $03,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c5d0 defb $aa,$ab,$ac,$ad,$00,$00,$01,$02,$00,$00,$01,$02,$00,$00,$01,$02
 $c5e0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c5f0 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c600 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Level 8 layout data - see level_buffer for byte map
@label=level_8
b$c610 defb $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $c620 defb $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $c630 defb $00,$04,$04,$01,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
 $c640 defb $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$01,$02,$04,$04,$00
 $c650 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c660 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c670 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$04,$04,$04,$04,$04,$04
 $c680 defb $04,$04,$04,$04,$04,$04,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c690 defb $00,$00,$05,$01,$02,$05,$05,$00,$03,$00,$05,$05,$05,$05,$05,$05
 $c6a0 defb $05,$05,$05,$05,$05,$05,$00,$03,$00,$05,$05,$01,$02,$05,$00,$00
 $c6b0 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c6c0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c6d0 defb $00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c6e0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00
 $c6f0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c700 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c710 defb $00,$00,$00,$05,$05,$05,$05,$05,$05,$05,$00,$03,$00,$05,$05,$01
 $c720 defb $02,$05,$05,$00,$03,$00,$05,$05,$05,$05,$05,$05,$05,$00,$00,$00
 $c730 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c740 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00
 $c750 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c760 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00
 $c770 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c780 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00
 $c790 defb $00,$00,$00,$00,$05,$01,$02,$05,$05,$05,$00,$03,$00,$05,$05,$05
 $c7a0 defb $05,$05,$05,$00,$03,$00,$05,$05,$05,$01,$02,$05,$00,$00,$00,$00
 $c7b0 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c7c0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00
 $c7d0 defb $00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c7e0 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$00,$00,$00,$00,$00
 $c7f0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c800 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c810 defb $b2,$b3,$b4,$b5,$00,$05,$05,$00,$03,$00,$05,$05,$03,$05,$05,$01
 $c820 defb $02,$05,$05,$03,$05,$05,$00,$03,$00,$05,$05,$00,$00,$00,$00,$00
 $c830 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c840 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c850 defb $ae,$af,$b0,$b1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
 $c860 defb $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c870 defb $aa,$ab,$ac,$ad,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c880 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$00
 $c890 defb $00,$a8,$a9,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $c8a0 defb $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Source code remnants?
;
; The source code here corresponds to the code at ????.
b$c8b0 defb $41,$4c,$4c,$20,$43,$4f,$4e,$56,$31
 $c8b9 defb $0d,$56,$60,$20,$20,$4c,$44,$20
 $c8c1 defb $41,$2c,$28,$32,$39,$34,$38

; An address lookup table for accessing data blocks.
@label=address_lookup_table
w$c8c8 defw $c92c
 $c8ca defw $c938
 $c8cc defw $c94c
 $c8ce defw $c958
 $c8d0 defw $c966
 $c8d2 defw $c980
 $c8d4 defw $c98c
 $c8d6 defw $c99c
 $c8d8 defw $c9ac
 $c8da defw $c9c0
 $c8dc defw $c9d6
 $c8de defw $c9e4
 $c8e0 defw $c9fa
 $c8e2 defw $ca0a
 $c8e4 defw $ca1c
 $c8e6 defw $ca2e
 $c8e8 defw $ca46
 $c8ea defw $ca56
 $c8ec defw $ca66
 $c8ee defw $ca78
 $c8f0 defw $cabe
 $c8f2 defw $cad4
 $c8f4 defw $cae2
 $c8f6 defw $cafa
 $c8f8 defw $cb14
 $c8fa defw $cb2a
 $c8fc defw $cb3e
 $c8fe defw $cb50
 $c900 defw $cb64
 $c902 defw $cb76
 $c904 defw $cb80
 $c906 defw $cb96
 $c908 defw $cbb0

; unused?
s$c90a defs $22

; related to address lookup table
b$c92c defb $06,$35,$05,$00,$04,$38,$05,$35
 $c934 defb $02,$00,$ff,$ff

; related to address lookup table
b$c938 defb $05,$3d,$07,$35,$05,$00,$05,$28
 $c940 defb $06,$3b,$09,$00,$05,$0c,$05,$0d
 $c948 defb $02,$00,$ff,$ff

; related to address lookup table
b$c94c defb $06,$10,$05,$0c,$05,$37,$03,$11
 $c954 defb $02,$00,$ff,$ff

; related to address lookup table
b$c958 defb $03,$38,$06,$06,$0e,$37,$05,$2d
 $c960 defb $07,$13,$02,$00,$ff,$ff

; related to address lookup table
b$c966 defb $05,$0b,$06,$07,$05,$29,$07,$37
 $c96e defb $05,$11,$08,$00,$07,$2d,$05,$07
 $c976 defb $05,$23,$03,$1e,$05,$3e,$02,$00
 $c97e defb $ff,$ff

; related to address lookup table
b$c980 defb $05,$20,$08,$2b,$09,$1a,$05,$11
 $c988 defb $02,$00,$ff,$ff

; related to address lookup table
b$c98c defb $04,$39,$05,$06,$10,$00,$05,$37
 $c994 defb $06,$08,$05,$3a,$02,$00,$ff,$ff

; related to address lookup table
b$c99c defb $03,$3f,$07,$13,$07,$00,$06,$3e
 $c9a4 defb $07,$33,$02,$0d,$02,$00,$ff,$ff

; related to address lookup table
b$c9ac defb $09,$2e,$06,$07,$07,$3e,$09,$00
 $c9b4 defb $06,$21,$02,$1e,$05,$1e,$05,$0b
 $c9bc defb $02,$00,$ff,$ff

; related to address lookup table
b$c9c0 defb $05,$39,$05,$1a,$05,$23,$07,$00
 $c9c8 defb $04,$38,$07,$35,$0a,$00,$06,$1d
 $c9d0 defb $06,$2f,$02,$00,$ff,$ff

; related to address lookup table
b$c9d6 defb $05,$3d,$07,$35,$06,$00,$03,$38
 $c9de defb $06,$20,$02,$00,$ff,$ff

; related to address lookup table
b$c9e4 defb $04,$21,$03,$35,$04,$0b,$07,$11
 $c9ec defb $09,$00,$05,$37,$05,$11,$04,$18
 $c9f4 defb $05,$09,$02,$00,$ff,$ff

; related to address lookup table - when player lands on a platform
b$c9fa defb $05,$22,$05,$35,$05,$2c,$0d,$00
 $ca02 defb $06,$0f,$03,$09,$02,$00,$ff,$ff

; related to address lookup table
b$ca0a defb $05,$22,$05,$14,$05,$10,$0f,$00
 $ca12 defb $07,$35,$04,$23,$03,$34,$02,$00
 $ca1a defb $ff,$ff

; related to address lookup table
b$ca1c defb $05,$35,$05,$38,$06,$37,$0b,$00
 $ca24 defb $05,$10,$06,$1a,$04,$0b,$02,$00
 $ca2c defb $ff,$ff

; related to address lookup table
b$ca2e defb $06,$27,$05,$17,$05,$2c,$0b,$00
 $ca36 defb $05,$10,$06,$0f,$04,$0b,$05,$1f
 $ca3e defb $07,$23,$09,$33,$02,$00,$ff,$ff

; related to address lookup table
b$ca46 defb $05,$2d,$07,$29,$04,$00,$02,$1a
 $ca4e defb $04,$35,$04,$11,$02,$00,$ff,$ff

; related to address lookup table
b$ca56 defb $05,$3d,$02,$18,$05,$11,$08,$00
 $ca5e defb $05,$0c,$04,$11,$02,$00,$ff,$ff

; related to address lookup table
b$ca66 defb $05,$0d,$05,$1e,$05,$28,$09,$00
 $ca6e defb $05,$2e,$05,$17,$05,$0b,$02,$00
 $ca76 defb $ff,$ff

; related to address lookup table - related to playing music?
b$ca78 defb $06,$14,$0b,$00,$05,$1a,$05,$2c
 $ca80 defb $05,$15,$09,$00,$05,$07,$05,$28
 $ca88 defb $0a,$00,$04,$37,$04,$37,$05,$17
 $ca90 defb $04,$28,$04,$11,$05,$2e,$05,$2f
 $ca98 defb $09,$00,$05,$09,$04,$0e,$05,$07
 $caa0 defb $05,$2b,$05,$07,$05,$0b,$04,$11
 $caa8 defb $07,$37,$09,$00,$05,$32,$05,$0f
 $cab0 defb $04,$08,$06,$13,$0b,$00,$06,$07
 $cab8 defb $03,$22,$02,$00,$ff,$ff

; related to address lookup table
b$cabe defb $05,$2d,$07,$35,$08,$00,$05,$17
 $cac6 defb $05,$0b,$08,$00,$05,$0d,$05,$06
 $cace defb $07,$10,$02,$00,$ff,$ff

; related to address lookup table
b$cad4 defb $05,$37,$05,$37,$07,$16,$05,$09
 $cadc defb $05,$33,$02,$00,$ff,$ff

; related to address lookup table
b$cae2 defb $05,$39,$06,$35,$05,$09,$05,$2d
 $caea defb $05,$0f,$05,$37,$09,$00,$05,$2a
 $caf2 defb $05,$14,$08,$37,$02,$00,$ff,$ff

; related to address lookup table
b$cafa defb $06,$0c,$06,$0b,$05,$37,$03,$11
 $cb02 defb $04,$27,$03,$0f,$04,$29,$04,$25
 $cb0a defb $0a,$0f,$05,$0b,$06,$37,$02,$00
 $cb12 defb $ff,$ff

; related to address lookup table
b$cb14 defb $05,$38,$05,$35,$09,$11,$05,$14
 $cb1c defb $05,$00,$05,$38,$05,$35,$09,$11
 $cb24 defb $05,$14,$02,$00,$ff,$ff

; related to address lookup table
b$cb2a defb $05,$09,$05,$2d,$04,$14,$07,$33
 $cb32 defb $09,$00,$05,$2e,$05,$17,$05,$0b
 $cb3a defb $02,$00,$ff,$ff

; related to address lookup table
b$cb3e defb $05,$09,$05,$2d,$04,$14,$07,$33
 $cb46 defb $09,$00,$05,$0d,$05,$1f,$02,$00
 $cb4e defb $ff,$ff

; related to address lookup table
b$cb50 defb $05,$09,$05,$2d,$04,$14,$07,$33
 $cb58 defb $09,$00,$05,$1d,$04,$27,$05,$13
 $cb60 defb $02,$00,$ff,$ff

; related to address lookup table
b$cb64 defb $05,$09,$05,$2d,$04,$14,$07,$33
 $cb6c defb $09,$00,$05,$28,$05,$3a,$02,$00
 $cb74 defb $ff,$ff

; related to address lookup table
b$cb76 defb $06,$35,$09,$00,$05,$05,$02,$00
 $cb7e defb $ff,$ff

; related to address lookup table
b$cb80 defb $05,$3b,$09,$00,$05,$19,$07,$1e
 $cb88 defb $08,$00,$06,$27,$09,$07,$02,$21
 $cb90 defb $09,$31,$02,$00,$ff,$ff

; related to address lookup table
b$cb96 defb $05,$0b,$07,$17,$06,$11,$09,$00
 $cb9e defb $06,$22,$04,$1e,$04,$21,$09,$00
 $cba6 defb $05,$07,$07,$38,$08,$28,$02,$00
 $cbae defb $ff,$ff

; related to address lookup table
b$cbb0 defb $06,$39,$08,$3b,$04,$15,$06,$00
 $cbb8 defb $06,$2d,$05,$1e,$03,$29,$06,$00
 $cbc0 defb $0b,$00,$ff,$ff

; The Pasmo assembler uses this directive when generating a tape image.
; Use the same address as with the ORG directive, to tell Pasmo where
; to start running the program from here.
end $5ef3

